within ;
model Demo_FMU_fmu
// Model automatically generated by Dymola from FMI model description
extends fmuIcon;
public
  type Modelica_Blocks_Interfaces_RealInput = Real;
  type Modelica_Blocks_Interfaces_RealOutput = Real;
protected
  record systemDef_rec
    constant Integer 'hrms[1]' = 1
                                  "Harmonics to simulate";
    constant Integer 'hrms[2]' = 3
                                  "Harmonics to simulate";
    constant Integer 'hrms[3]' = 5
                                  "Harmonics to simulate";
    constant Integer 'hrms[4]' = 7
                                  "Harmonics to simulate";
    constant Integer 'hrms[5]' = 9
                                  "Harmonics to simulate";
    constant Integer 'hrms[6]' = 11
                                   "Harmonics to simulate";
    constant Integer 'hrms[7]' = 13
                                   "Harmonics to simulate";
    constant Integer 'hrms[8]' = 15
                                   "Harmonics to simulate";
    constant Integer numHrm = 8
                               "Number of harmonics. (Automatically generated from hrms.)";
    constant Real fFund = 60
                            "Fundamental frequency (Hz)";
    constant Real fs = 5000.0
                             "Sampling frequency (Hz)";
    constant Integer N = 83
                           "Size of FFT";
    constant Integer numPh = 3
                              "Number of phases";
  end systemDef_rec;
public
  systemDef_rec systemDef;
protected
  record ground_rec
  protected
    record pin_rec
      constant Integer h = 8
                            "Numbder of harmonics";
    protected
      record 'v[1]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
      constant Real 'iIm[1]' = 0.0;
      constant Real 'iIm[2]' = 0.0;
      constant Real 'iIm[3]' = 0.0;
      constant Real 'iIm[4]' = 0.0;
      constant Real 'iIm[5]' = 0.0;
      constant Real 'iIm[6]' = 0.0;
      constant Real 'iIm[7]' = 0.0;
      constant Real 'iIm[8]' = 0.0;
      constant Real 'iRe[1]' = 0.0;
      constant Real 'iRe[2]' = 0.0;
      constant Real 'iRe[3]' = 0.0;
      constant Real 'iRe[4]' = 0.0;
      constant Real 'iRe[5]' = 0.0;
      constant Real 'iRe[6]' = 0.0;
      constant Real 'iRe[7]' = 0.0;
      constant Real 'iRe[8]' = 0.0;
    protected
      record reference_rec
        Modelica.SIunits.Angle theta;
      end reference_rec;
    public
      reference_rec reference;
    end pin_rec;
  public
    pin_rec pin;
  end ground_rec;
public
  ground_rec ground;
protected
  record ground2_rec
  protected
    record p_rec
      constant Modelica.SIunits.Voltage v = 0
                                             "Potential at the pin";
      constant Modelica.SIunits.Current i = 0.0
                                               "Current flowing into the pin";
    end p_rec;
  public
    p_rec p;
  end ground2_rec;
public
  ground2_rec ground2;
protected
  record v_rec
  protected
    record 'v[1]_rec'
      constant Real re = 120.0
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[1]_rec';
  public
    'v[1]_rec' 'v[1]';
  protected
    record 'v[2]_rec'
      constant Real re = 0.001
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[2]_rec';
  public
    'v[2]_rec' 'v[2]';
  protected
    record 'v[3]_rec'
      constant Real re = 0.001
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[3]_rec';
  public
    'v[3]_rec' 'v[3]';
  protected
    record 'v[4]_rec'
      constant Real re = 0.001
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[4]_rec';
  public
    'v[4]_rec' 'v[4]';
  protected
    record 'v[5]_rec'
      constant Real re = 0.001
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[5]_rec';
  public
    'v[5]_rec' 'v[5]';
  protected
    record 'v[6]_rec'
      constant Real re = 0.001
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[6]_rec';
  public
    'v[6]_rec' 'v[6]';
  protected
    record 'v[7]_rec'
      constant Real re = 0.001
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[7]_rec';
  public
    'v[7]_rec' 'v[7]';
  protected
    record 'v[8]_rec'
      constant Real re = 0.001
                              "Real part of complex number";
      constant Real im = 0.0
                            "Imaginary part of complex number";
    end 'v[8]_rec';
  public
    'v[8]_rec' 'v[8]';
  protected
    record 'i[1]_rec'
      parameter Real _re_start = 0;
      Real re(start = _re_start, fixed=false)
                                             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[1]_rec';
  public
    'i[1]_rec' 'i[1]' annotation(Dialog);
  protected
    record 'i[2]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[2]_rec';
  public
    'i[2]_rec' 'i[2]';
  protected
    record 'i[3]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[3]_rec';
  public
    'i[3]_rec' 'i[3]';
  protected
    record 'i[4]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[4]_rec';
  public
    'i[4]_rec' 'i[4]';
  protected
    record 'i[5]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[5]_rec';
  public
    'i[5]_rec' 'i[5]';
  protected
    record 'i[6]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[6]_rec';
  public
    'i[6]_rec' 'i[6]';
  protected
    record 'i[7]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[7]_rec';
  public
    'i[7]_rec' 'i[7]';
  protected
    record 'i[8]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[8]_rec';
  public
    'i[8]_rec' 'i[8]';
    constant Real omega(unit = "rad/s") = 376.99111843077515;
  protected
    record pin_p_rec
      constant Integer h = 8
                            "Numbder of harmonics";
    protected
      record 'v[1]_rec'
        constant Real re = 120.0
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
      Real 'iIm[1]';
      Real 'iIm[2]';
      Real 'iIm[3]';
      Real 'iIm[4]';
      Real 'iIm[5]';
      Real 'iIm[6]';
      Real 'iIm[7]';
      Real 'iIm[8]';
      Real 'iRe[1]';
      Real 'iRe[2]';
      Real 'iRe[3]';
      Real 'iRe[4]';
      Real 'iRe[5]';
      Real 'iRe[6]';
      Real 'iRe[7]';
      Real 'iRe[8]';
    protected
      record reference_rec
        parameter Modelica.SIunits.Angle _theta_start = 0;
        Modelica.SIunits.Angle theta(start = _theta_start);
        Real theta_der(unit = "rad/s");
      end reference_rec;
    public
      reference_rec reference annotation(Dialog);
    end pin_p_rec;
  public
    pin_p_rec pin_p annotation(Dialog);
  protected
    record pin_n_rec
      constant Integer h = 8
                            "Numbder of harmonics";
    protected
      record 'v[1]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
      Real 'iIm[1]';
      Real 'iIm[2]';
      Real 'iIm[3]';
      Real 'iIm[4]';
      Real 'iIm[5]';
      Real 'iIm[6]';
      Real 'iIm[7]';
      Real 'iIm[8]';
      Real 'iRe[1]';
      Real 'iRe[2]';
      Real 'iRe[3]';
      Real 'iRe[4]';
      Real 'iRe[5]';
      Real 'iRe[6]';
      Real 'iRe[7]';
      Real 'iRe[8]';
    protected
      record reference_rec
        Modelica.SIunits.Angle theta;
      end reference_rec;
    public
      reference_rec reference;
    end pin_n_rec;
  public
    pin_n_rec pin_n;
    Modelica.SIunits.Angle theta;
    constant Real 'vMag[1]' = 120.0
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vMag[2]' = 0.001
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vMag[3]' = 0.001
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vMag[4]' = 0.001
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vMag[5]' = 0.001
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vMag[6]' = 0.001
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vMag[7]' = 0.001
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vMag[8]' = 0.001
                                   "Voltage Magnitude (Volts rms)";
    constant Real 'vArg[1]' = 0
                               "Voltage angle (rad)";
    constant Real 'vArg[2]' = 0
                               "Voltage angle (rad)";
    constant Real 'vArg[3]' = 0
                               "Voltage angle (rad)";
    constant Real 'vArg[4]' = 0
                               "Voltage angle (rad)";
    constant Real 'vArg[5]' = 0
                               "Voltage angle (rad)";
    constant Real 'vArg[6]' = 0
                               "Voltage angle (rad)";
    constant Real 'vArg[7]' = 0
                               "Voltage angle (rad)";
    constant Real 'vArg[8]' = 0
                               "Voltage angle (rad)";
    Real P
          "Real Power";
    Real P1;
    Real 'iMag[1]';
    Real 'iMag[2]';
    Real 'iMag[3]';
    Real 'iMag[4]';
    Real 'iMag[5]';
    Real 'iMag[6]';
    Real 'iMag[7]';
    Real 'iMag[8]';
    Real 'iArg[1]';
    Real 'iArg[2]';
    Real 'iArg[3]';
    Real 'iArg[4]';
    Real 'iArg[5]';
    Real 'iArg[6]';
    Real 'iArg[7]';
    Real 'iArg[8]';
  end v_rec;
public
  v_rec v annotation(Dialog);
protected
  record z_rec
  protected
    record 'v[1]_rec'
      parameter Real _re_start = 0;
      Real re(start = _re_start, fixed=false)
                                             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[1]_rec';
  public
    'v[1]_rec' 'v[1]' annotation(Dialog);
  protected
    record 'v[2]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[2]_rec';
  public
    'v[2]_rec' 'v[2]';
  protected
    record 'v[3]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[3]_rec';
  public
    'v[3]_rec' 'v[3]';
  protected
    record 'v[4]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[4]_rec';
  public
    'v[4]_rec' 'v[4]';
  protected
    record 'v[5]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[5]_rec';
  public
    'v[5]_rec' 'v[5]';
  protected
    record 'v[6]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[6]_rec';
  public
    'v[6]_rec' 'v[6]';
  protected
    record 'v[7]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[7]_rec';
  public
    'v[7]_rec' 'v[7]';
  protected
    record 'v[8]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'v[8]_rec';
  public
    'v[8]_rec' 'v[8]';
  protected
    record 'i[1]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[1]_rec';
  public
    'i[1]_rec' 'i[1]';
  protected
    record 'i[2]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[2]_rec';
  public
    'i[2]_rec' 'i[2]';
  protected
    record 'i[3]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[3]_rec';
  public
    'i[3]_rec' 'i[3]';
  protected
    record 'i[4]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[4]_rec';
  public
    'i[4]_rec' 'i[4]';
  protected
    record 'i[5]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[5]_rec';
  public
    'i[5]_rec' 'i[5]';
  protected
    record 'i[6]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[6]_rec';
  public
    'i[6]_rec' 'i[6]';
  protected
    record 'i[7]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[7]_rec';
  public
    'i[7]_rec' 'i[7]';
  protected
    record 'i[8]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'i[8]_rec';
  public
    'i[8]_rec' 'i[8]';
    constant Real omega(unit = "rad/s") = 376.99111843077515;
  protected
    record pin_p_rec
      constant Integer h = 8
                            "Numbder of harmonics";
    protected
      record 'v[1]_rec'
        constant Real re = 120.0
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        constant Real re = 0.001
                                "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
      Real 'iIm[1]';
      Real 'iIm[2]';
      Real 'iIm[3]';
      Real 'iIm[4]';
      Real 'iIm[5]';
      Real 'iIm[6]';
      Real 'iIm[7]';
      Real 'iIm[8]';
      Real 'iRe[1]';
      Real 'iRe[2]';
      Real 'iRe[3]';
      Real 'iRe[4]';
      Real 'iRe[5]';
      Real 'iRe[6]';
      Real 'iRe[7]';
      Real 'iRe[8]';
    protected
      record reference_rec
        Modelica.SIunits.Angle theta;
        constant Real theta_der(unit = "rad/s") = 376.99111843077515;
      end reference_rec;
    public
      reference_rec reference;
    end pin_p_rec;
  public
    pin_p_rec pin_p;
  protected
    record pin_n_rec
      constant Integer h = 8
                            "Numbder of harmonics";
    protected
      record 'v[1]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
      Real 'iIm[1]';
      Real 'iIm[2]';
      Real 'iIm[3]';
      Real 'iIm[4]';
      Real 'iIm[5]';
      Real 'iIm[6]';
      Real 'iIm[7]';
      Real 'iIm[8]';
      Real 'iRe[1]';
      Real 'iRe[2]';
      Real 'iRe[3]';
      Real 'iRe[4]';
      Real 'iRe[5]';
      Real 'iRe[6]';
      Real 'iRe[7]';
      Real 'iRe[8]';
    protected
      record reference_rec
        Modelica.SIunits.Angle theta;
      end reference_rec;
    public
      reference_rec reference;
    end pin_n_rec;
  public
    pin_n_rec pin_n;
  protected
    record z_rec
      constant Real re = 0.5
                            "Real part of complex number";
      constant Real im = 0.02
                             "Imaginary part of complex number";
    end z_rec;
  public
    z_rec z;
    Real vFundAbs;
    Real vFundArg;
    Real iFundAbs;
    Real iFundArg;
  end z_rec;
public
  z_rec z annotation(Dialog);
protected
  record led_driver_rec
  protected
    record pin_p_rec
      constant Modelica.SIunits.Voltage v = 24.0
                                                "Potential at the pin";
      Modelica.SIunits.Current i
                                "Current flowing into the pin";
    end pin_p_rec;
  public
    pin_p_rec pin_p;
  protected
    record pin_n_rec
      constant Modelica.SIunits.Voltage v = 0.0
                                               "Potential at the pin";
      Modelica.SIunits.Current i
                                "Current flowing into the pin";
    end pin_n_rec;
  public
    pin_n_rec pin_n;
  protected
    record hPin_P_rec
      constant Integer h = 8
                            "Numbder of harmonics";
    protected
      record 'v[1]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
      Real 'iIm[1]';
      Real 'iIm[2]';
      Real 'iIm[3]';
      Real 'iIm[4]';
      Real 'iIm[5]';
      Real 'iIm[6]';
      Real 'iIm[7]';
      Real 'iIm[8]';
      Real 'iRe[1]';
      Real 'iRe[2]';
      Real 'iRe[3]';
      Real 'iRe[4]';
      Real 'iRe[5]';
      Real 'iRe[6]';
      Real 'iRe[7]';
      Real 'iRe[8]';
    protected
      record reference_rec
        Modelica.SIunits.Angle theta;
      end reference_rec;
    public
      reference_rec reference;
    end hPin_P_rec;
  public
    hPin_P_rec hPin_P;
  protected
    record hPin_N_rec
      constant Integer h = 8
                            "Numbder of harmonics";
    protected
      record 'v[1]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        constant Real re = 0.0
                              "Real part of complex number";
        constant Real im = 0.0
                              "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
      Real 'iIm[1]';
      Real 'iIm[2]';
      Real 'iIm[3]';
      Real 'iIm[4]';
      Real 'iIm[5]';
      Real 'iIm[6]';
      Real 'iIm[7]';
      Real 'iIm[8]';
      Real 'iRe[1]';
      Real 'iRe[2]';
      Real 'iRe[3]';
      Real 'iRe[4]';
      Real 'iRe[5]';
      Real 'iRe[6]';
      Real 'iRe[7]';
      Real 'iRe[8]';
    protected
      record reference_rec
        Modelica.SIunits.Angle theta;
      end reference_rec;
    public
      reference_rec reference;
    end hPin_N_rec;
  public
    hPin_N_rec hPin_N;
    Modelica_Blocks_Interfaces_RealOutput PLoss;
    constant Real V_Rect(unit = "V") = 24
                                         "Rectifier DC output";
    constant Real efficiency = 0.95
                                   "Rectifier efficiency (replace with efficiency model or curve)";
  protected
    record vDC_rec
      constant Modelica.SIunits.Voltage V = 24.0
                                                "Value of constant voltage";
      constant Modelica.SIunits.Voltage v = 24.0
                                                "Voltage drop between the two pins (= p.v - n.v)";
      Modelica.SIunits.Current i
                                "Current flowing from pin p to pin n";
    protected
      record p_rec
        constant Modelica.SIunits.Voltage v = 24.0
                                                  "Potential at the pin";
        Modelica.SIunits.Current i
                                  "Current flowing into the pin";
      end p_rec;
    public
      p_rec p;
    protected
      record n_rec
        constant Modelica.SIunits.Voltage v = 0.0
                                                 "Potential at the pin";
        Modelica.SIunits.Current i
                                  "Current flowing into the pin";
      end n_rec;
    public
      n_rec n;
    end vDC_rec;
  public
    vDC_rec vDC;
  protected
    record loadBase_rec
    protected
      record 'v[1]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[1]_rec';
    public
      'v[1]_rec' 'v[1]';
    protected
      record 'v[2]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[2]_rec';
    public
      'v[2]_rec' 'v[2]';
    protected
      record 'v[3]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[3]_rec';
    public
      'v[3]_rec' 'v[3]';
    protected
      record 'v[4]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[4]_rec';
    public
      'v[4]_rec' 'v[4]';
    protected
      record 'v[5]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[5]_rec';
    public
      'v[5]_rec' 'v[5]';
    protected
      record 'v[6]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[6]_rec';
    public
      'v[6]_rec' 'v[6]';
    protected
      record 'v[7]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[7]_rec';
    public
      'v[7]_rec' 'v[7]';
    protected
      record 'v[8]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'v[8]_rec';
    public
      'v[8]_rec' 'v[8]';
    protected
      record 'i[1]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[1]_rec';
    public
      'i[1]_rec' 'i[1]';
    protected
      record 'i[2]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[2]_rec';
    public
      'i[2]_rec' 'i[2]';
    protected
      record 'i[3]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[3]_rec';
    public
      'i[3]_rec' 'i[3]';
    protected
      record 'i[4]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[4]_rec';
    public
      'i[4]_rec' 'i[4]';
    protected
      record 'i[5]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[5]_rec';
    public
      'i[5]_rec' 'i[5]';
    protected
      record 'i[6]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[6]_rec';
    public
      'i[6]_rec' 'i[6]';
    protected
      record 'i[7]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[7]_rec';
    public
      'i[7]_rec' 'i[7]';
    protected
      record 'i[8]_rec'
        Real re
               "Real part of complex number";
        Real im
               "Imaginary part of complex number";
      end 'i[8]_rec';
    public
      'i[8]_rec' 'i[8]';
      constant Real omega(unit = "rad/s") = 376.99111843077515;
    protected
      record pin_p_rec
        constant Integer h = 8
                              "Numbder of harmonics";
      protected
        record 'v[1]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[1]_rec';
      public
        'v[1]_rec' 'v[1]';
      protected
        record 'v[2]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[2]_rec';
      public
        'v[2]_rec' 'v[2]';
      protected
        record 'v[3]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[3]_rec';
      public
        'v[3]_rec' 'v[3]';
      protected
        record 'v[4]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[4]_rec';
      public
        'v[4]_rec' 'v[4]';
      protected
        record 'v[5]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[5]_rec';
      public
        'v[5]_rec' 'v[5]';
      protected
        record 'v[6]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[6]_rec';
      public
        'v[6]_rec' 'v[6]';
      protected
        record 'v[7]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[7]_rec';
      public
        'v[7]_rec' 'v[7]';
      protected
        record 'v[8]_rec'
          Real re
                 "Real part of complex number";
          Real im
                 "Imaginary part of complex number";
        end 'v[8]_rec';
      public
        'v[8]_rec' 'v[8]';
        Real 'iIm[1]';
        Real 'iIm[2]';
        Real 'iIm[3]';
        Real 'iIm[4]';
        Real 'iIm[5]';
        Real 'iIm[6]';
        Real 'iIm[7]';
        Real 'iIm[8]';
        Real 'iRe[1]';
        Real 'iRe[2]';
        Real 'iRe[3]';
        Real 'iRe[4]';
        Real 'iRe[5]';
        Real 'iRe[6]';
        Real 'iRe[7]';
        Real 'iRe[8]';
      protected
        record reference_rec
          Modelica.SIunits.Angle theta;
          constant Real theta_der(unit = "rad/s") = 376.99111843077515;
        end reference_rec;
      public
        reference_rec reference;
      end pin_p_rec;
    public
      pin_p_rec pin_p;
    protected
      record pin_n_rec
        constant Integer h = 8
                              "Numbder of harmonics";
      protected
        record 'v[1]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[1]_rec';
      public
        'v[1]_rec' 'v[1]';
      protected
        record 'v[2]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[2]_rec';
      public
        'v[2]_rec' 'v[2]';
      protected
        record 'v[3]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[3]_rec';
      public
        'v[3]_rec' 'v[3]';
      protected
        record 'v[4]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[4]_rec';
      public
        'v[4]_rec' 'v[4]';
      protected
        record 'v[5]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[5]_rec';
      public
        'v[5]_rec' 'v[5]';
      protected
        record 'v[6]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[6]_rec';
      public
        'v[6]_rec' 'v[6]';
      protected
        record 'v[7]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[7]_rec';
      public
        'v[7]_rec' 'v[7]';
      protected
        record 'v[8]_rec'
          constant Real re = 0.0
                                "Real part of complex number";
          constant Real im = 0.0
                                "Imaginary part of complex number";
        end 'v[8]_rec';
      public
        'v[8]_rec' 'v[8]';
        Real 'iIm[1]';
        Real 'iIm[2]';
        Real 'iIm[3]';
        Real 'iIm[4]';
        Real 'iIm[5]';
        Real 'iIm[6]';
        Real 'iIm[7]';
        Real 'iIm[8]';
        Real 'iRe[1]';
        Real 'iRe[2]';
        Real 'iRe[3]';
        Real 'iRe[4]';
        Real 'iRe[5]';
        Real 'iRe[6]';
        Real 'iRe[7]';
        Real 'iRe[8]';
      protected
        record reference_rec
          Modelica.SIunits.Angle theta;
        end reference_rec;
      public
        reference_rec reference;
      end pin_n_rec;
    public
      pin_n_rec pin_n;
    end loadBase_rec;
  public
    loadBase_rec loadBase;
    Real P;
    Real 'I_mag[1]';
    Real 'I_mag[2]';
    Real 'I_mag[3]';
    Real 'I_mag[4]';
    Real 'I_mag[5]';
    Real 'I_mag[6]';
    Real 'I_mag[7]';
    Real 'I_mag[8]';
    Real 'I_arg[1]';
    Real 'I_arg[2]';
    Real 'I_arg[3]';
    Real 'I_arg[4]';
    Real 'I_arg[5]';
    Real 'I_arg[6]';
    Real 'I_arg[7]';
    Real 'I_arg[8]';
    Real 'V_mag[1]';
    Real 'V_mag[2]';
    Real 'V_mag[3]';
    Real 'V_mag[4]';
    Real 'V_mag[5]';
    Real 'V_mag[6]';
    Real 'V_mag[7]';
    Real 'V_mag[8]';
    Real 'V_arg[1]';
    Real 'V_arg[2]';
    Real 'V_arg[3]';
    Real 'V_arg[4]';
    Real 'V_arg[5]';
    Real 'V_arg[6]';
    Real 'V_arg[7]';
    Real 'V_arg[8]';
    Real S
          "Apparent power at fundamental";
    Real Q
          "Imaginary power at fundamental";
    constant Real 'mdlMag[1]' = 1.0
                                   "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[2]' = 0.8904
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[3]' = 0.7418
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[4]' = 0.5673
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[5]' = 0.3937
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[6]' = 0.2526
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[7]' = 0.1565
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[8]' = 0.1086
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[9]' = 0.1028
                                      "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[10]' = 0.1117
                                       "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[11]' = 0.1074
                                       "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[12]' = 0.0875
                                       "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[13]' = 0.0578
                                       "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[14]' = 0.0366
                                       "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[15]' = 0.0289
                                       "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlMag[16]' = 0.0275
                                       "Harmonic magnitudes (normalized wrt fundamental)";
    constant Real 'mdlArg[1]' = 0.3876
                                      "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[2]' = -2.179
                                      "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[3]' = 1.6303
                                      "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[4]' = -0.7953
                                       "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[5]' = 3.1273
                                      "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[6]' = 0.8908
                                      "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[7]' = -1.1864
                                       "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[8]' = -2.9993
                                       "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[9]' = 1.4699
                                      "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[10]' = -0.6068
                                        "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[11]' = -2.8447
                                        "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[12]' = 1.1602
                                       "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[13]' = -1.0324
                                        "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[14]' = -2.9612
                                        "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[15]' = 1.5582
                                       "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real 'mdlArg[16]' = -0.3532
                                        "Harmonic phases (modeled w/ voltage fundamental at zero rad)";
    constant Real argS = -0.3876
                                "Phase angle for fundamental apparent power";
    Real magScale;
    Real 'argAdj[1]';
    Real 'argAdj[2]';
    Real 'argAdj[3]';
    Real 'argAdj[4]';
    Real 'argAdj[5]';
    Real 'argAdj[6]';
    Real 'argAdj[7]';
  protected
    record 'a[1]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'a[1]_rec';
  public
    'a[1]_rec' 'a[1]';
  protected
    record 'a[2]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'a[2]_rec';
  public
    'a[2]_rec' 'a[2]';
  protected
    record 'a[3]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'a[3]_rec';
  public
    'a[3]_rec' 'a[3]';
  protected
    record 'a[4]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'a[4]_rec';
  public
    'a[4]_rec' 'a[4]';
  protected
    record 'a[5]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'a[5]_rec';
  public
    'a[5]_rec' 'a[5]';
  protected
    record 'a[6]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'a[6]_rec';
  public
    'a[6]_rec' 'a[6]';
  protected
    record 'a[7]_rec'
      Real re
             "Real part of complex number";
      Real im
             "Imaginary part of complex number";
    end 'a[7]_rec';
  public
    'a[7]_rec' 'a[7]';
    Real 'c[1]';
    Real 'c[2]';
    Real 'c[3]';
    Real 'c[4]';
    Real 'c[5]';
    Real 'c[6]';
    Real 'c[7]';
  end led_driver_rec;
public
  led_driver_rec led_driver;
protected
  record load_rec
    constant Modelica.SIunits.Voltage v = 24.0
                                              "Voltage drop between the two pins (= p.v - n.v)";
    Modelica.SIunits.Current i
                              "Current flowing from pin p to pin n";
  protected
    record p_rec
      constant Modelica.SIunits.Voltage v = 24.0
                                                "Potential at the pin";
      Modelica.SIunits.Current i
                                "Current flowing into the pin";
    end p_rec;
  public
    p_rec p;
  protected
    record n_rec
      constant Modelica.SIunits.Voltage v = 0.0
                                               "Potential at the pin";
      Modelica.SIunits.Current i
                                "Current flowing into the pin";
    end n_rec;
  public
    n_rec n;
    Modelica_Blocks_Interfaces_RealInput u(unit = "W")
                                                      "Input Power";
  end load_rec;
public
  load_rec load annotation(Dialog);
  parameter Real _u_start = 0
  annotation (Dialog( group="Start values for inputs "));
protected
  Real _u_old;
public
  Modelica.Blocks.Interfaces.RealInput u(unit = "W", start = _u_start)
  annotation (Placement(transformation(extent={{-124,-20},{-84,20}})));
  Modelica.Blocks.Interfaces.RealOutput y
  annotation (Placement(transformation(extent={{100,-20},{140,20}})));
public
  parameter String fmi_instanceName="Demo_FMU_fmu"
  annotation (Dialog(tab="FMI", group="Instance name"));
  parameter Boolean fmi_loggingOn=false
  annotation (Dialog(tab="FMI", group="Enable logging"));
  parameter Boolean fmi_pullInputsForInitialization=true
  "Set to false when using the FMU in feedback connections"
  annotation (Dialog(tab="FMI", group="Inputs for initialization"));
  parameter Boolean fmi_InputTime=false
  "Time point of input used when calling doStep."
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"),choices(choice= false "StepEnd", choice= true "StepStart"));
  parameter Boolean fmi_UsePreOnInputSignals=true
  annotation (Evaluate=true,Dialog(tab="FMI", group="Input Handling"));
  parameter Real fmi_StartTime = 0.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_StopTime = 1.0
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_NumberOfSteps = 500
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Real fmi_CommunicationStepSize=(fmi_StopTime-fmi_StartTime)/fmi_NumberOfSteps
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Integer stepSizeScaleFactor = 1 "Number of doSteps called between two CommunicationStepSize"
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter Boolean fmi_forceShutDownAtStopTime=false
  annotation (Dialog(tab="FMI", group="Step time"));
  parameter String fmi_fmuLocation="file:///"+ModelicaServices.ExternalReferences.loadResource("modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU")
  annotation (Dialog(tab="FMI", group="Instantiation"));
protected
fmi_Functions.fmiModel fmi;
Boolean fmi_StepOK;
parameter Real fmi_Initialized(fixed=false);
parameter Real fmi_AParamsAndStart(fixed=false);
parameter Real fmi_initInput0(start=0,fixed=false);
Real RealVariables1[100];
Real RealVariables2[100];
Real RealVariables3[100];
Real RealVariables4[63];
package fmi_Functions
  class fmiModel
  extends ExternalObject;
    function constructor "Initialize FMI model"
      extends Modelica.Icons.Function;
      input String instanceName;
      input Boolean loggingOn;
        input String fmuLocation;
      output fmiModel fmi;
      external"C" fmi = Demo_FMU_fmiInstantiateModel2(instanceName, loggingOn, fmuLocation)
      annotation(Header="
#ifndef Demo_FMU_Instantiate_C
#define Demo_FMU_Instantiate_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
#ifndef Demo_FMU_MYSTRCMP_C
#define Demo_FMU_MYSTRCMP_C 1
int Demo_FMUmystrcmp(const void *_a, const void *_b) {
  char *a = _a;
  char *const *b = _b;
  return strcmp(a, *b);
}
#endif
void Demo_FMULogger(fmiComponent c, fmiString instanceName, fmiStatus status,
	 fmiString category, fmiString message, ...) {
  char msg[4096];
  char buf[4096];
  int len;
  va_list ap;
  va_start(ap,message);
#if defined(_MSC_VER) && _MSC_VER>=1200
  len = _snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = _vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#else
  len = snprintf(msg, sizeof(msg)/sizeof(*msg), \"%s: %s\", instanceName, message);
  if (len < 0) goto fail;
  len = vsnprintf(buf, sizeof(buf)/sizeof(*buf) - 2, msg, ap);
  if (len < 0) goto fail;
#endif
  if( len>0 && len <4096 && buf[len - 1]!='\\n'){
    buf[len] = '\\n';
    buf[len + 1] = 0;
  }
  va_end(ap);
  switch (status) {
    case fmiFatal:
      ModelicaMessage(\"[fmiFatal]: \");
      break;
    case fmiError:
      ModelicaMessage(\"[fmiError]: \");
      break;
    case fmiDiscard:
      ModelicaMessage(\"[fmiDiscard]: \");
      break;
    case fmiWarning:
      ModelicaMessage(\"[fmiWarning]: \");
      break;
    case fmiOK:
      ModelicaMessage(\"[fmiOK]: \");
      break;
  }
  ModelicaMessage(buf);
  return;
fail:
  ModelicaMessage(\"Logger failed, message too long?\");
}
void * Demo_FMU_fmiInstantiateModel2(const char*instanceName, fmiBoolean loggingOn, const char* fmuLocation) {
  static fmiCoSimCallbackFunctions funcs = {&Demo_FMULogger, &calloc, &free, NULL};
  struct dy_Extended* res;

  res = calloc(1, sizeof(struct dy_Extended));
  if (res!=0) {
    if (!(res->hInst=LoadLibraryW(L\"Demo_FMU.dll\"))) {
      ModelicaError(\"Loading of FMU dynamic link library (Demo_FMU.dll) failed!\");
      return 0;
    }
    if(!(res->dyFmiInstantiateSlave=(fmiInstantiateSlaveFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiInstantiateSlave\"))){
      ModelicaError(\"GetProcAddress failed for fmiInstantiateSlave!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiInstantiateSlave\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiFreeSlaveInstance=(fmiFreeSlaveInstanceFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiFreeSlaveInstance\"))){
      ModelicaError(\"GetProcAddress failed for fmiFreeSlaveInstance!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiFreeSlaveInstance\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiInitializeSlave=(fmiInitializeSlaveFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiInitializeSlave\"))){
      ModelicaError(\"GetProcAddress failed for fmiInitializeSlave!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiInitializeSlave\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiResetSlave=(fmiResetSlaveFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiResetSlave\"))){
      ModelicaError(\"GetProcAddress failed for fmiResetSlave!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiResetSlave\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiDoStep=(fmiDoStepFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiDoStep\"))){
      ModelicaError(\"GetProcAddress failed for fmiDoStep!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiDoStep\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if(!(res->dyFmiTerminateSlave=(fmiTerminateSlaveFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiTerminateSlave\"))){
      ModelicaError(\"GetProcAddress failed for fmiTerminateSlave!\\n The model was imported as a Co-Simulation FMU but could not load the CS specific function fmiTerminateSlave\\n Verify that the FMU supports Co-Simulation\");
      return 0;
    }
    if (!(res->dyFmiSetReal=(fmiSetRealFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiSetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetReal!\");
      return 0;
    }
    if (!(res->dyFmiGetReal=(fmiGetRealFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiGetReal\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetReal!\");
      return 0;
    }
    if (!(res->dyFmiSetInteger=(fmiSetIntegerFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiSetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetInteger!\");
      return 0;
    }
    if (!(res->dyFmiGetInteger=(fmiGetIntegerFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiGetInteger\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetInteger!\");
      return 0;
    }
    if (!(res->dyFmiSetBoolean=(fmiSetBooleanFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiSetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiGetBoolean=(fmiGetBooleanFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiGetBoolean\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetBoolean!\");
      return 0;
    }
    if (!(res->dyFmiSetString=(fmiSetStringFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiSetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetString!\");
      return 0;
    }
    if (!(res->dyFmiGetString=(fmiGetStringFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiGetString\"))) {
      ModelicaError(\"GetProcAddress failed for fmiGetString!\");
      return 0;
    }
    if (!(res->dyFmiSetDebugLogging=(fmiSetDebugLoggingFunc)GetProcAddress(res->hInst,\"Demo_FMU_fmiSetDebugLogging\"))) {
      ModelicaError(\"GetProcAddress failed for fmiSetDebugLogging!\");
      return 0;
    }
    res->m=res->dyFmiInstantiateSlave(instanceName, \"{582333a1-0e9b-469e-9b79-609fdac964e2}\", fmuLocation, \"application/x-dymolakernel\", 0, fmiFalse, fmiFalse, funcs, loggingOn);
    if (0==res->m) {free(res);res=0;ModelicaError(\"InstantiateSlave failed\");}
    else {res->dyTriggered=0;res->dyTime=res->dyLastTime=-1e37;}
  }
  return res;
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end constructor;

    function destructor "Release storage of FMI model"
      extends Modelica.Icons.Function;
      input fmiModel fmi;
      external"C"
                 Demo_FMU_fmiFreeModelInstance2(fmi);
      annotation (Header="
#ifndef Demo_FMU_Free_C
#define Demo_FMU_Free_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiFreeModelInstance2(void*m) {
  struct dy_Extended*a=m;
  if (a) {
    a->dyFmiTerminateSlave(a->m);
    a->dyFmiFreeSlaveInstance(a->m);
    FreeLibrary(a->hInst);
    free(a);
  }
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end destructor;
  end fmiModel;

    function fmiInitializeSlave
      input fmiModel fmi;
      input Real tStart;
      input Boolean forceShutDownAtTStop;
       input Real tStop;
      input Real preAvailable;
      output Real postAvailable=preAvailable;
      external"C" Demo_FMU_fmiInitializeSlave2(fmi, tStart, forceShutDownAtTStop, tStop);
      annotation (Header="
#ifndef Demo_FMU_InitializeSlave_C
#define Demo_FMU_InitializeSlave_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
double Demo_FMU_fmiInitializeSlave2(void*m, fmiReal tStart, fmiBoolean forceShutDownAtTStop, fmiReal tStop) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiInitializeSlave(a->m, tStart, forceShutDownAtTStop, tStop);
    a->dyTriggered=0;
    a->dyLastTime=a->dyTime;
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"InitializeSlave failed\");
  return 1e37;
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end fmiInitializeSlave;

    function fmiDoStep
     input fmiModel fmi;
     input Real currentTime;
     input Real stepSize;
     output Boolean stepOK;
     external"C" stepOK= Demo_FMU_fmiDoStep2(fmi, currentTime, stepSize);
     annotation (Header="
#ifndef Demo_FMU_DoStep_C
#define Demo_FMU_DoStep_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
double Demo_FMU_fmiDoStep2(void*m, double currentTime, double stepSize) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiDoStep(a->m, currentTime, stepSize, fmiTrue);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"DoStep failed\");
  return 1.0;
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end fmiDoStep;

    function fmiResetSlave
      input fmiModel fmi;
      output Boolean resetOK;
      external"C" resetOK = Demo_FMU_fmiResetSlave2(fmi);
      annotation (Header="
#ifndef Demo_FMU_ResetSlave_C
#define Demo_FMU_ResetSlave_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
double Demo_FMU_fmiResetSlave2(void*m) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiResetSlave(a->m);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"resetSlave failed\");
    return 1.0;
  }
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end fmiResetSlave;

    function fmiSetReal
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
      output Real dummy= 1;
      external"C"
                 Demo_FMU_fmiSetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef Demo_FMU_SetReal_C
#define Demo_FMU_SetReal_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiSetReal2(void*m, const int*refs, size_t nrefs, const double*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetReal failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetReal;

    function fmiSetRealParam
      input fmiModel fmi;
      input Integer refs[:];
      input Real vals[size(refs, 1)];
    protected
      Real oldVals[size(refs, 1)];
      external"C"
                 Demo_FMU_fmiSetRealParam2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals);
        annotation (Header="
#ifndef Demo_FMU_SetRealParam_C
#define Demo_FMU_SetRealParam_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiSetRealParam2(void*m, const int*refs, size_t nrefs, const double*vals, double*oldVals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  int i = 0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyInstantiationMode){
		status=a->dyFmiSetReal(a->m, refs, nrefs, vals);
    }else{
      status=a->dyFmiGetReal(a->m, refs, nrefs, oldVals);
      for(i=0; i<nrefs;++i){
        if( abs(vals[i]-oldVals[i])> 5e-16){
          ModelicaError(\"SetRealParameter: new parameters with diferent values are being set after initialization, this is not allowed\");
        }
      }
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetReal failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetRealParam;

    function fmiGetRealScalar
      input fmiModel fmi;
      input Integer ref;
      input Real dummy;
      output Real val;
    algorithm
        val := scalar(fmiGetReal(fmi, {ref}, dummy));
    end fmiGetRealScalar;

    function fmiGetReal
      input fmiModel fmi;
      input Integer refs[:];
      output Real vals[size(refs, 1)];
      input Real preAvailable;
      external"C" Demo_FMU_fmiGetReal2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef Demo_FMU_GetReal_C
#define Demo_FMU_GetReal_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiGetReal2(void*m, const int*refs, size_t nrefs, double*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetReal(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetReal failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end fmiGetReal;

    function fmiGetIntegerScalar
      input fmiModel fmi;
      input Integer ref;
      input Integer dummy;
      output Integer val;
    algorithm
        val := scalar(fmiGetInteger(fmi, {ref}, dummy));
    end fmiGetIntegerScalar;

    function fmiGetInteger
      input fmiModel fmi;
      input Integer refs[:];
      output Integer vals[size(refs, 1)];
      input Integer preAvailable;
      external"C" Demo_FMU_fmiGetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef Demo_FMU_GetInteger_C
#define Demo_FMU_GetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiGetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetInteger failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end fmiGetInteger;

    function fmiSetInteger
    input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
      output Real dummy= 1;
      external"C" Demo_FMU_fmiSetInteger2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef Demo_FMU_SetInteger_C
#define Demo_FMU_SetInteger_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiSetInteger2(void*m, const int*refs, size_t nrefs, int*vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetInteger;

    function fmiSetIntegerParam
    input fmiModel fmi;
      input Integer refs[:];
      input Integer vals[size(refs, 1)];
    protected
      Integer oldVals[size(refs, 1)];
      external"C" Demo_FMU_fmiSetIntegerParam2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        oldVals);
        annotation (Header="
#ifndef Demo_FMU_SetIntegerParam_C
#define Demo_FMU_SetIntegerParam_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiSetIntegerParam2(void*m, const int*refs, size_t nrefs, int*vals, int*oldVals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  int i=0;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyInstantiationMode){
      status=a->dyFmiSetInteger(a->m, refs, nrefs, vals);
    }else{
      status=a->dyFmiGetInteger(a->m, refs, nrefs, oldVals);
      for(i = 0; i< nrefs; ++i){
        if(vals[i]!=oldVals[i]){
          ModelicaError(\"SetIntegerParameter: new parameters with diferent values are being set after initialization, this is not allowed\");
        }
      }
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetInteger failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetIntegerParam;

    function fmiGetBooleanScalar
      input fmiModel fmi;
      input Integer ref;
      input Integer dummy;
      output Boolean val;
    algorithm
        val := scalar(fmiGetBoolean(fmi, {ref}, dummy));
    end fmiGetBooleanScalar;

    function fmiGetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      output Boolean vals[size(refs, 1)];
      input Integer preAvailable;
      external"C" Demo_FMU_fmiGetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef Demo_FMU_GetBoolean_C
#define Demo_FMU_GetBoolean_C 1
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiGetBoolean2(void*m, const int* refs, size_t nr, int* vals) {
  int i;
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetBoolean(a->m, refs, nr, (fmiBoolean*)(vals));
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"GetBoolean failed\");
  for(i=nr-1;i>=0;i--) vals[i]=((fmiBoolean*)(vals))[i];
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end fmiGetBoolean;

    function fmiSetBoolean
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
      output Real dummy2= 1;
    protected
      Boolean dummy[size(refs, 1)];
      external"C" Demo_FMU_fmiSetBoolean2(
        fmi,
        refs,
        size(refs, 1),
        vals,
        dummy);
        annotation (Header="
#ifndef Demo_FMU_SetBoolean_C
#define Demo_FMU_SetBoolean_C 1
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiSetBoolean2(void*m, const int* refs, size_t nr, const int* vals,int*dummy) {
  int i;
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmiBoolean*)(dummy))[i]=vals[i];
  if (a) {
    status=a->dyFmiSetBoolean(a->m, refs, nr, (fmiBoolean*)(dummy));
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBoolean;

    function fmiSetBooleanParam
      input fmiModel fmi;
      input Integer refs[:];
      input Boolean vals[size(refs, 1)];
    protected
      Boolean dummy[size(refs, 1)];
      Boolean oldVals[size(refs, 1)];
      external"C" Demo_FMU_fmiSetBooleanParam2(
      fmi,
        refs,
        size(refs, 1),
        vals,
        dummy,
        oldVals);
        annotation (Header="
#ifndef Demo_FMU_SetBooleanParam_C
#define Demo_FMU_SetBooleanParam_C 1
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiSetBooleanParam2(void*m, const int* refs, size_t nr, const int* vals,int*dummy,int*oldVals) {
  int i;
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nr){return;}
  for(i=0;i<nr;++i) ((fmiBoolean*)(dummy))[i]=vals[i];
  if (a) {
    if(a->currentMode == dyInstantiationMode){
      status=a->dyFmiSetBoolean(a->m, refs, nr, (fmiBoolean*)(dummy));
    }else{
      status=a->dyFmiGetBoolean(a->m, refs, nr, (fmiBoolean*)(oldVals));
      for(i=nr-1;i>=0;i--){
        oldVals[i]=((fmiBoolean*)(oldVals))[i];
        if(oldVals[i]!=dummy[i]){
          ModelicaError(\"SetIntegerParameter: new parameters with diferent values are being set after initialization, this is not allowed\");
        }
      }
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetBoolean failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetBooleanParam;

    function fmiGetString
      input fmiModel fmi;
      input Integer refs[:];
      output String vals[size(refs, 1)];
      input Integer preAvailable;
      external"C" Demo_FMU_fmiGetString2(
        fmi,
        refs,
        size(refs, 1),
        vals);
      annotation (Header="
#ifndef Demo_FMU_GetString_C
#define Demo_FMU_GetString_C 1
#include <stdlib.h>
#include \"FMI/fmiImport.h\"
void Demo_FMU_fmiGetString2(void*m, const int*refs, size_t nrefs, fmiString* vals) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if (a) {
    status=a->dyFmiGetString(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"StringInteger failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU");
    end fmiGetString;

    function fmiSetString
    input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" Demo_FMU_fmiSetString2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef Demo_FMU_SetString_C
#define Demo_FMU_SetString_C 1
#include \"FMI/fmiImport.h\"
#include <stdlib.h>
void Demo_FMU_fmiSetString2(void*m, const int*refs, size_t nrefs, const fmiString vals[]) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    status=a->dyFmiSetString(a->m, refs, nrefs, vals);
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetString failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetString;

    function fmiSetStringParam
    input fmiModel fmi;
      input Integer refs[:];
      input String vals[size(refs, 1)];
      external"C" Demo_FMU_fmiSetStringParam2(
        fmi,
        refs,
        size(refs, 1),
        vals);
        annotation (Header="
#ifndef Demo_FMU_SetStringParam_C
#define Demo_FMU_SetStringParam_C 1
#include \"FMI/fmiImport.h\"
#include <stdlib.h>
void Demo_FMU_fmiSetStringParam2(void*m, const int*refs, size_t nrefs, const fmiString vals[]) {
  struct dy_Extended*a=m;
  fmiStatus status=fmiFatal;
  if(!nrefs){return;}
  if (a) {
    if(a->currentMode == dyInstantiationMode){
		status=a->dyFmiSetString(a->m, refs, nrefs, vals);
    }else{
      status=fmiOK;
    }
  }
  if (status!=fmiOK && status!=fmiWarning) ModelicaError(\"SetString failed\");
}
#endif", Library="Demo_FMU", LibraryDirectory="modelica://Demo_FMU_fmu/Resources/Library/FMU/Demo_FMU/binaries", __Dymola_CriticalRegion="Demo_FMU",__Dymola_IdemPotent=true, __Dymola_VectorizedExceptFirst=true);
    end fmiSetStringParam;

    function noHysteresis
      input Real x;
      output Real y;
    algorithm
      y:=x+(if (x < 0) then -1 else 1);
    end noHysteresis;
end fmi_Functions;
equation
  when initial() then
    fmi = fmi_Functions.fmiModel(fmi_instanceName, fmi_loggingOn, fmi_fmuLocation);
  end when;
algorithm
  when {initial(), sample(fmi_StartTime, fmi_CommunicationStepSize)} then
    if time>=fmi_CommunicationStepSize +fmi_StartTime then
    if fmi_InputTime then
      fmi_Functions.fmiSetReal(fmi, {352321536}, {_u_old});
    else
      if fmi_UsePreOnInputSignals then
        fmi_Functions.fmiSetReal(fmi, {352321536}, {pre(u)});
      else
        fmi_Functions.fmiSetReal(fmi, {352321536}, {u});
      end if;
    end if;
      for stepSizeIndex in 1:stepSizeScaleFactor loop
        fmi_StepOK :=fmi_Functions.fmiDoStep(
          fmi,
          time + (stepSizeIndex - 1 - stepSizeScaleFactor)*
            fmi_CommunicationStepSize/stepSizeScaleFactor,
          fmi_CommunicationStepSize/stepSizeScaleFactor);
      end for;
    end if;
    _u_old := u;
  y :=fmi_Functions.fmiGetRealScalar(
      fmi,
      335544320,
      1);
RealVariables1 :=fmi_Functions.fmiGetReal(
      fmi,
      {33554432,905969728,905969729,905969730,905969731,905969732,905969733,
        905969734,905969735,905969736,905969737,905969738,905969739,905969740,
        905969741,905969742,905969743,905969729,905969731,905969733,905969735,
        905969737,905969739,905969741,905969743,905969728,905969730,905969732,
        905969734,905969736,905969738,905969740,905969742,33554432,587202560,
        905969877,905969878,905969879,905969880,905969881,905969882,905969883,
        905969884,905969885,905969886,905969887,905969888,905969889,905969890,
        905969891,905969892,33554432,33554432,905969795,905969796,905969797,
        905969798,905969799,905969800,905969801,905969802,905969803,905969804,
        905969805,905969806,905969807,905969808,905969809,905969810,905969811,
        905969812,905969813,905969814,905969815,905969816,905969817,905969818,
        905969819,905969820,905969821,905969822,905969823,905969824,905969825,
        905969826,905969827,905969828,905969885,905969877,905969886,905969878,
        905969887,905969879,905969888,905969880,905969889,905969881,905969890,
        905969882,905969891},
      1);
RealVariables2 :=fmi_Functions.fmiGetReal(
      fmi,
      {905969883,905969892,905969884,905969877,905969878,905969879,905969880,
        905969881,905969882,905969883,905969884,905969885,905969886,905969887,
        905969888,905969889,905969890,905969891,905969892,905969847,905969850,
        905969869,905969851,905969870,905969852,905969871,905969853,905969872,
        905969854,905969873,905969855,905969874,905969856,905969875,905969857,
        905969876,905969729,905969731,905969733,905969735,905969737,905969739,
        905969741,905969743,905969728,905969730,905969732,905969734,905969736,
        905969738,905969740,905969742,33554432,905969860,905969861,905969862,
        905969863,369098953,369098955,905969850,905969869,905969851,905969870,
        905969852,905969871,905969853,905969872,905969854,905969873,905969855,
        905969874,905969856,905969875,905969857,905969876,905969877,905969878,
        905969879,905969880,905969881,905969882,905969883,905969884,905969885,
        905969886,905969887,905969888,905969889,905969890,905969891,905969892,
        33554432,905969729,905969731,905969733,905969735,905969737,905969739,
        905969741,905969743},
      1);
RealVariables3 :=fmi_Functions.fmiGetReal(
      fmi,
      {905969728,905969730,905969732,905969734,905969736,905969738,905969740,
        905969742,33554432,335544320,369098953,369098953,369098955,905969850,
        905969869,905969851,905969870,905969852,905969871,905969853,905969872,
        905969854,905969873,905969855,905969874,905969856,905969875,905969857,
        905969876,905969885,905969877,905969886,905969878,905969887,905969879,
        905969888,905969880,905969889,905969881,905969890,905969882,905969891,
        905969883,905969892,905969884,905969850,905969869,905969851,905969870,
        905969852,905969871,905969853,905969872,905969854,905969873,905969855,
        905969874,905969856,905969875,905969857,905969876,905969877,905969878,
        905969879,905969880,905969881,905969882,905969883,905969884,905969885,
        905969886,905969887,905969888,905969889,905969890,905969891,905969892,
        33554432,905969729,905969731,905969733,905969735,905969737,905969739,
        905969741,905969743,905969728,905969730,905969732,905969734,905969736,
        905969738,905969740,905969742,33554432,369099024,905969937,905969938,
        905969939,905969940},
      1);
RealVariables4 :=fmi_Functions.fmiGetReal(
      fmi,
      {905969941,905969942,905969943,905969944,905969945,905969946,905969947,
        905969948,905969949,905969950,905969951,905969952,905969953,905969954,
        905969955,905969956,905969957,905969958,905969959,905969960,905969961,
        905969962,905969963,905969964,905969965,905969966,905969967,905969968,
        905969969,905969970,905970004,905970005,905970006,905970007,905970008,
        905970009,905970010,905970011,905970012,905970013,905970014,905970015,
        905970016,905970017,905970018,905970019,905970020,905970021,905970022,
        905970023,905970024,905970025,905970026,905970027,905970028,905970029,
        905970030,905970031,905970032,369098955,369098955,369098953,436207616},
      1);
  end when;
initial algorithm
  fmi_AParamsAndStart:=1;
 // 0 Real parameters
 // 1 Real start values
  fmi_Functions.fmiSetRealParam(fmi, {33554432}, {v.pin_p.reference._theta_start});
 // 0 Integer parameters
 // 0 Integer start values
 // 0 Boolean parameters
 // 0 Boolean start values
 // 0 Enumeration parameters
 // 0 Enumeration start values
 // 0 String parameters
initial equation
if fmi_pullInputsForInitialization then fmi_initInput0 = fmi_Functions.fmiSetReal(fmi, {352321536}, {pre(u)}); else fmi_initInput0 = fmi_Functions.fmiSetReal(fmi, {352321536}, {_u_start}); end if;
  fmi_Initialized = fmi_Functions.fmiInitializeSlave(fmi, fmi_StartTime, fmi_forceShutDownAtStopTime, fmi_StopTime,fmi_AParamsAndStart+ fmi_initInput0);
equation
  ground.pin.reference.theta = RealVariables1[1];
  v.'i[1]'.re = RealVariables1[2];
  v.'i[1]'.im = RealVariables1[3];
  v.'i[2]'.re = RealVariables1[4];
  v.'i[2]'.im = RealVariables1[5];
  v.'i[3]'.re = RealVariables1[6];
  v.'i[3]'.im = RealVariables1[7];
  v.'i[4]'.re = RealVariables1[8];
  v.'i[4]'.im = RealVariables1[9];
  v.'i[5]'.re = RealVariables1[10];
  v.'i[5]'.im = RealVariables1[11];
  v.'i[6]'.re = RealVariables1[12];
  v.'i[6]'.im = RealVariables1[13];
  v.'i[7]'.re = RealVariables1[14];
  v.'i[7]'.im = RealVariables1[15];
  v.'i[8]'.re = RealVariables1[16];
  v.'i[8]'.im = RealVariables1[17];
  v.pin_p.'iIm[1]' = RealVariables1[18];
  v.pin_p.'iIm[2]' = RealVariables1[19];
  v.pin_p.'iIm[3]' = RealVariables1[20];
  v.pin_p.'iIm[4]' = RealVariables1[21];
  v.pin_p.'iIm[5]' = RealVariables1[22];
  v.pin_p.'iIm[6]' = RealVariables1[23];
  v.pin_p.'iIm[7]' = RealVariables1[24];
  v.pin_p.'iIm[8]' = RealVariables1[25];
  v.pin_p.'iRe[1]' = RealVariables1[26];
  v.pin_p.'iRe[2]' = RealVariables1[27];
  v.pin_p.'iRe[3]' = RealVariables1[28];
  v.pin_p.'iRe[4]' = RealVariables1[29];
  v.pin_p.'iRe[5]' = RealVariables1[30];
  v.pin_p.'iRe[6]' = RealVariables1[31];
  v.pin_p.'iRe[7]' = RealVariables1[32];
  v.pin_p.'iRe[8]' = RealVariables1[33];
  v.pin_p.reference.theta = RealVariables1[34];
  v.pin_p.reference.theta_der = RealVariables1[35];
  v.pin_n.'iIm[1]' = RealVariables1[36];
  v.pin_n.'iIm[2]' = RealVariables1[37];
  v.pin_n.'iIm[3]' = RealVariables1[38];
  v.pin_n.'iIm[4]' = RealVariables1[39];
  v.pin_n.'iIm[5]' = RealVariables1[40];
  v.pin_n.'iIm[6]' = RealVariables1[41];
  v.pin_n.'iIm[7]' = RealVariables1[42];
  v.pin_n.'iIm[8]' = RealVariables1[43];
  v.pin_n.'iRe[1]' = RealVariables1[44];
  v.pin_n.'iRe[2]' = RealVariables1[45];
  v.pin_n.'iRe[3]' = RealVariables1[46];
  v.pin_n.'iRe[4]' = RealVariables1[47];
  v.pin_n.'iRe[5]' = RealVariables1[48];
  v.pin_n.'iRe[6]' = RealVariables1[49];
  v.pin_n.'iRe[7]' = RealVariables1[50];
  v.pin_n.'iRe[8]' = RealVariables1[51];
  v.pin_n.reference.theta = RealVariables1[52];
  v.theta = RealVariables1[53];
  v.P = RealVariables1[54];
  v.P1 = RealVariables1[55];
  v.'iMag[1]' = RealVariables1[56];
  v.'iMag[2]' = RealVariables1[57];
  v.'iMag[3]' = RealVariables1[58];
  v.'iMag[4]' = RealVariables1[59];
  v.'iMag[5]' = RealVariables1[60];
  v.'iMag[6]' = RealVariables1[61];
  v.'iMag[7]' = RealVariables1[62];
  v.'iMag[8]' = RealVariables1[63];
  v.'iArg[1]' = RealVariables1[64];
  v.'iArg[2]' = RealVariables1[65];
  v.'iArg[3]' = RealVariables1[66];
  v.'iArg[4]' = RealVariables1[67];
  v.'iArg[5]' = RealVariables1[68];
  v.'iArg[6]' = RealVariables1[69];
  v.'iArg[7]' = RealVariables1[70];
  v.'iArg[8]' = RealVariables1[71];
  z.'v[1]'.re = RealVariables1[72];
  z.'v[1]'.im = RealVariables1[73];
  z.'v[2]'.re = RealVariables1[74];
  z.'v[2]'.im = RealVariables1[75];
  z.'v[3]'.re = RealVariables1[76];
  z.'v[3]'.im = RealVariables1[77];
  z.'v[4]'.re = RealVariables1[78];
  z.'v[4]'.im = RealVariables1[79];
  z.'v[5]'.re = RealVariables1[80];
  z.'v[5]'.im = RealVariables1[81];
  z.'v[6]'.re = RealVariables1[82];
  z.'v[6]'.im = RealVariables1[83];
  z.'v[7]'.re = RealVariables1[84];
  z.'v[7]'.im = RealVariables1[85];
  z.'v[8]'.re = RealVariables1[86];
  z.'v[8]'.im = RealVariables1[87];
  z.'i[1]'.re = RealVariables1[88];
  z.'i[1]'.im = RealVariables1[89];
  z.'i[2]'.re = RealVariables1[90];
  z.'i[2]'.im = RealVariables1[91];
  z.'i[3]'.re = RealVariables1[92];
  z.'i[3]'.im = RealVariables1[93];
  z.'i[4]'.re = RealVariables1[94];
  z.'i[4]'.im = RealVariables1[95];
  z.'i[5]'.re = RealVariables1[96];
  z.'i[5]'.im = RealVariables1[97];
  z.'i[6]'.re = RealVariables1[98];
  z.'i[6]'.im = RealVariables1[99];
  z.'i[7]'.re = RealVariables1[100];
  z.'i[7]'.im = RealVariables2[1];
  z.'i[8]'.re = RealVariables2[2];
  z.'i[8]'.im = RealVariables2[3];
  z.pin_p.'iIm[1]' = RealVariables2[4];
  z.pin_p.'iIm[2]' = RealVariables2[5];
  z.pin_p.'iIm[3]' = RealVariables2[6];
  z.pin_p.'iIm[4]' = RealVariables2[7];
  z.pin_p.'iIm[5]' = RealVariables2[8];
  z.pin_p.'iIm[6]' = RealVariables2[9];
  z.pin_p.'iIm[7]' = RealVariables2[10];
  z.pin_p.'iIm[8]' = RealVariables2[11];
  z.pin_p.'iRe[1]' = RealVariables2[12];
  z.pin_p.'iRe[2]' = RealVariables2[13];
  z.pin_p.'iRe[3]' = RealVariables2[14];
  z.pin_p.'iRe[4]' = RealVariables2[15];
  z.pin_p.'iRe[5]' = RealVariables2[16];
  z.pin_p.'iRe[6]' = RealVariables2[17];
  z.pin_p.'iRe[7]' = RealVariables2[18];
  z.pin_p.'iRe[8]' = RealVariables2[19];
  z.pin_p.reference.theta = RealVariables2[20];
  z.pin_n.'v[1]'.re = RealVariables2[21];
  z.pin_n.'v[1]'.im = RealVariables2[22];
  z.pin_n.'v[2]'.re = RealVariables2[23];
  z.pin_n.'v[2]'.im = RealVariables2[24];
  z.pin_n.'v[3]'.re = RealVariables2[25];
  z.pin_n.'v[3]'.im = RealVariables2[26];
  z.pin_n.'v[4]'.re = RealVariables2[27];
  z.pin_n.'v[4]'.im = RealVariables2[28];
  z.pin_n.'v[5]'.re = RealVariables2[29];
  z.pin_n.'v[5]'.im = RealVariables2[30];
  z.pin_n.'v[6]'.re = RealVariables2[31];
  z.pin_n.'v[6]'.im = RealVariables2[32];
  z.pin_n.'v[7]'.re = RealVariables2[33];
  z.pin_n.'v[7]'.im = RealVariables2[34];
  z.pin_n.'v[8]'.re = RealVariables2[35];
  z.pin_n.'v[8]'.im = RealVariables2[36];
  z.pin_n.'iIm[1]' = RealVariables2[37];
  z.pin_n.'iIm[2]' = RealVariables2[38];
  z.pin_n.'iIm[3]' = RealVariables2[39];
  z.pin_n.'iIm[4]' = RealVariables2[40];
  z.pin_n.'iIm[5]' = RealVariables2[41];
  z.pin_n.'iIm[6]' = RealVariables2[42];
  z.pin_n.'iIm[7]' = RealVariables2[43];
  z.pin_n.'iIm[8]' = RealVariables2[44];
  z.pin_n.'iRe[1]' = RealVariables2[45];
  z.pin_n.'iRe[2]' = RealVariables2[46];
  z.pin_n.'iRe[3]' = RealVariables2[47];
  z.pin_n.'iRe[4]' = RealVariables2[48];
  z.pin_n.'iRe[5]' = RealVariables2[49];
  z.pin_n.'iRe[6]' = RealVariables2[50];
  z.pin_n.'iRe[7]' = RealVariables2[51];
  z.pin_n.'iRe[8]' = RealVariables2[52];
  z.pin_n.reference.theta = RealVariables2[53];
  z.vFundAbs = RealVariables2[54];
  z.vFundArg = RealVariables2[55];
  z.iFundAbs = RealVariables2[56];
  z.iFundArg = RealVariables2[57];
  led_driver.pin_p.i = RealVariables2[58];
  led_driver.pin_n.i = RealVariables2[59];
  led_driver.hPin_P.'v[1]'.re = RealVariables2[60];
  led_driver.hPin_P.'v[1]'.im = RealVariables2[61];
  led_driver.hPin_P.'v[2]'.re = RealVariables2[62];
  led_driver.hPin_P.'v[2]'.im = RealVariables2[63];
  led_driver.hPin_P.'v[3]'.re = RealVariables2[64];
  led_driver.hPin_P.'v[3]'.im = RealVariables2[65];
  led_driver.hPin_P.'v[4]'.re = RealVariables2[66];
  led_driver.hPin_P.'v[4]'.im = RealVariables2[67];
  led_driver.hPin_P.'v[5]'.re = RealVariables2[68];
  led_driver.hPin_P.'v[5]'.im = RealVariables2[69];
  led_driver.hPin_P.'v[6]'.re = RealVariables2[70];
  led_driver.hPin_P.'v[6]'.im = RealVariables2[71];
  led_driver.hPin_P.'v[7]'.re = RealVariables2[72];
  led_driver.hPin_P.'v[7]'.im = RealVariables2[73];
  led_driver.hPin_P.'v[8]'.re = RealVariables2[74];
  led_driver.hPin_P.'v[8]'.im = RealVariables2[75];
  led_driver.hPin_P.'iIm[1]' = RealVariables2[76];
  led_driver.hPin_P.'iIm[2]' = RealVariables2[77];
  led_driver.hPin_P.'iIm[3]' = RealVariables2[78];
  led_driver.hPin_P.'iIm[4]' = RealVariables2[79];
  led_driver.hPin_P.'iIm[5]' = RealVariables2[80];
  led_driver.hPin_P.'iIm[6]' = RealVariables2[81];
  led_driver.hPin_P.'iIm[7]' = RealVariables2[82];
  led_driver.hPin_P.'iIm[8]' = RealVariables2[83];
  led_driver.hPin_P.'iRe[1]' = RealVariables2[84];
  led_driver.hPin_P.'iRe[2]' = RealVariables2[85];
  led_driver.hPin_P.'iRe[3]' = RealVariables2[86];
  led_driver.hPin_P.'iRe[4]' = RealVariables2[87];
  led_driver.hPin_P.'iRe[5]' = RealVariables2[88];
  led_driver.hPin_P.'iRe[6]' = RealVariables2[89];
  led_driver.hPin_P.'iRe[7]' = RealVariables2[90];
  led_driver.hPin_P.'iRe[8]' = RealVariables2[91];
  led_driver.hPin_P.reference.theta = RealVariables2[92];
  led_driver.hPin_N.'iIm[1]' = RealVariables2[93];
  led_driver.hPin_N.'iIm[2]' = RealVariables2[94];
  led_driver.hPin_N.'iIm[3]' = RealVariables2[95];
  led_driver.hPin_N.'iIm[4]' = RealVariables2[96];
  led_driver.hPin_N.'iIm[5]' = RealVariables2[97];
  led_driver.hPin_N.'iIm[6]' = RealVariables2[98];
  led_driver.hPin_N.'iIm[7]' = RealVariables2[99];
  led_driver.hPin_N.'iIm[8]' = RealVariables2[100];
  led_driver.hPin_N.'iRe[1]' = RealVariables3[1];
  led_driver.hPin_N.'iRe[2]' = RealVariables3[2];
  led_driver.hPin_N.'iRe[3]' = RealVariables3[3];
  led_driver.hPin_N.'iRe[4]' = RealVariables3[4];
  led_driver.hPin_N.'iRe[5]' = RealVariables3[5];
  led_driver.hPin_N.'iRe[6]' = RealVariables3[6];
  led_driver.hPin_N.'iRe[7]' = RealVariables3[7];
  led_driver.hPin_N.'iRe[8]' = RealVariables3[8];
  led_driver.hPin_N.reference.theta = RealVariables3[9];
  led_driver.PLoss = RealVariables3[10];
  led_driver.vDC.i = RealVariables3[11];
  led_driver.vDC.p.i = RealVariables3[12];
  led_driver.vDC.n.i = RealVariables3[13];
  led_driver.loadBase.'v[1]'.re = RealVariables3[14];
  led_driver.loadBase.'v[1]'.im = RealVariables3[15];
  led_driver.loadBase.'v[2]'.re = RealVariables3[16];
  led_driver.loadBase.'v[2]'.im = RealVariables3[17];
  led_driver.loadBase.'v[3]'.re = RealVariables3[18];
  led_driver.loadBase.'v[3]'.im = RealVariables3[19];
  led_driver.loadBase.'v[4]'.re = RealVariables3[20];
  led_driver.loadBase.'v[4]'.im = RealVariables3[21];
  led_driver.loadBase.'v[5]'.re = RealVariables3[22];
  led_driver.loadBase.'v[5]'.im = RealVariables3[23];
  led_driver.loadBase.'v[6]'.re = RealVariables3[24];
  led_driver.loadBase.'v[6]'.im = RealVariables3[25];
  led_driver.loadBase.'v[7]'.re = RealVariables3[26];
  led_driver.loadBase.'v[7]'.im = RealVariables3[27];
  led_driver.loadBase.'v[8]'.re = RealVariables3[28];
  led_driver.loadBase.'v[8]'.im = RealVariables3[29];
  led_driver.loadBase.'i[1]'.re = RealVariables3[30];
  led_driver.loadBase.'i[1]'.im = RealVariables3[31];
  led_driver.loadBase.'i[2]'.re = RealVariables3[32];
  led_driver.loadBase.'i[2]'.im = RealVariables3[33];
  led_driver.loadBase.'i[3]'.re = RealVariables3[34];
  led_driver.loadBase.'i[3]'.im = RealVariables3[35];
  led_driver.loadBase.'i[4]'.re = RealVariables3[36];
  led_driver.loadBase.'i[4]'.im = RealVariables3[37];
  led_driver.loadBase.'i[5]'.re = RealVariables3[38];
  led_driver.loadBase.'i[5]'.im = RealVariables3[39];
  led_driver.loadBase.'i[6]'.re = RealVariables3[40];
  led_driver.loadBase.'i[6]'.im = RealVariables3[41];
  led_driver.loadBase.'i[7]'.re = RealVariables3[42];
  led_driver.loadBase.'i[7]'.im = RealVariables3[43];
  led_driver.loadBase.'i[8]'.re = RealVariables3[44];
  led_driver.loadBase.'i[8]'.im = RealVariables3[45];
  led_driver.loadBase.pin_p.'v[1]'.re = RealVariables3[46];
  led_driver.loadBase.pin_p.'v[1]'.im = RealVariables3[47];
  led_driver.loadBase.pin_p.'v[2]'.re = RealVariables3[48];
  led_driver.loadBase.pin_p.'v[2]'.im = RealVariables3[49];
  led_driver.loadBase.pin_p.'v[3]'.re = RealVariables3[50];
  led_driver.loadBase.pin_p.'v[3]'.im = RealVariables3[51];
  led_driver.loadBase.pin_p.'v[4]'.re = RealVariables3[52];
  led_driver.loadBase.pin_p.'v[4]'.im = RealVariables3[53];
  led_driver.loadBase.pin_p.'v[5]'.re = RealVariables3[54];
  led_driver.loadBase.pin_p.'v[5]'.im = RealVariables3[55];
  led_driver.loadBase.pin_p.'v[6]'.re = RealVariables3[56];
  led_driver.loadBase.pin_p.'v[6]'.im = RealVariables3[57];
  led_driver.loadBase.pin_p.'v[7]'.re = RealVariables3[58];
  led_driver.loadBase.pin_p.'v[7]'.im = RealVariables3[59];
  led_driver.loadBase.pin_p.'v[8]'.re = RealVariables3[60];
  led_driver.loadBase.pin_p.'v[8]'.im = RealVariables3[61];
  led_driver.loadBase.pin_p.'iIm[1]' = RealVariables3[62];
  led_driver.loadBase.pin_p.'iIm[2]' = RealVariables3[63];
  led_driver.loadBase.pin_p.'iIm[3]' = RealVariables3[64];
  led_driver.loadBase.pin_p.'iIm[4]' = RealVariables3[65];
  led_driver.loadBase.pin_p.'iIm[5]' = RealVariables3[66];
  led_driver.loadBase.pin_p.'iIm[6]' = RealVariables3[67];
  led_driver.loadBase.pin_p.'iIm[7]' = RealVariables3[68];
  led_driver.loadBase.pin_p.'iIm[8]' = RealVariables3[69];
  led_driver.loadBase.pin_p.'iRe[1]' = RealVariables3[70];
  led_driver.loadBase.pin_p.'iRe[2]' = RealVariables3[71];
  led_driver.loadBase.pin_p.'iRe[3]' = RealVariables3[72];
  led_driver.loadBase.pin_p.'iRe[4]' = RealVariables3[73];
  led_driver.loadBase.pin_p.'iRe[5]' = RealVariables3[74];
  led_driver.loadBase.pin_p.'iRe[6]' = RealVariables3[75];
  led_driver.loadBase.pin_p.'iRe[7]' = RealVariables3[76];
  led_driver.loadBase.pin_p.'iRe[8]' = RealVariables3[77];
  led_driver.loadBase.pin_p.reference.theta = RealVariables3[78];
  led_driver.loadBase.pin_n.'iIm[1]' = RealVariables3[79];
  led_driver.loadBase.pin_n.'iIm[2]' = RealVariables3[80];
  led_driver.loadBase.pin_n.'iIm[3]' = RealVariables3[81];
  led_driver.loadBase.pin_n.'iIm[4]' = RealVariables3[82];
  led_driver.loadBase.pin_n.'iIm[5]' = RealVariables3[83];
  led_driver.loadBase.pin_n.'iIm[6]' = RealVariables3[84];
  led_driver.loadBase.pin_n.'iIm[7]' = RealVariables3[85];
  led_driver.loadBase.pin_n.'iIm[8]' = RealVariables3[86];
  led_driver.loadBase.pin_n.'iRe[1]' = RealVariables3[87];
  led_driver.loadBase.pin_n.'iRe[2]' = RealVariables3[88];
  led_driver.loadBase.pin_n.'iRe[3]' = RealVariables3[89];
  led_driver.loadBase.pin_n.'iRe[4]' = RealVariables3[90];
  led_driver.loadBase.pin_n.'iRe[5]' = RealVariables3[91];
  led_driver.loadBase.pin_n.'iRe[6]' = RealVariables3[92];
  led_driver.loadBase.pin_n.'iRe[7]' = RealVariables3[93];
  led_driver.loadBase.pin_n.'iRe[8]' = RealVariables3[94];
  led_driver.loadBase.pin_n.reference.theta = RealVariables3[95];
  led_driver.P = RealVariables3[96];
  led_driver.'I_mag[1]' = RealVariables3[97];
  led_driver.'I_mag[2]' = RealVariables3[98];
  led_driver.'I_mag[3]' = RealVariables3[99];
  led_driver.'I_mag[4]' = RealVariables3[100];
  led_driver.'I_mag[5]' = RealVariables4[1];
  led_driver.'I_mag[6]' = RealVariables4[2];
  led_driver.'I_mag[7]' = RealVariables4[3];
  led_driver.'I_mag[8]' = RealVariables4[4];
  led_driver.'I_arg[1]' = RealVariables4[5];
  led_driver.'I_arg[2]' = RealVariables4[6];
  led_driver.'I_arg[3]' = RealVariables4[7];
  led_driver.'I_arg[4]' = RealVariables4[8];
  led_driver.'I_arg[5]' = RealVariables4[9];
  led_driver.'I_arg[6]' = RealVariables4[10];
  led_driver.'I_arg[7]' = RealVariables4[11];
  led_driver.'I_arg[8]' = RealVariables4[12];
  led_driver.'V_mag[1]' = RealVariables4[13];
  led_driver.'V_mag[2]' = RealVariables4[14];
  led_driver.'V_mag[3]' = RealVariables4[15];
  led_driver.'V_mag[4]' = RealVariables4[16];
  led_driver.'V_mag[5]' = RealVariables4[17];
  led_driver.'V_mag[6]' = RealVariables4[18];
  led_driver.'V_mag[7]' = RealVariables4[19];
  led_driver.'V_mag[8]' = RealVariables4[20];
  led_driver.'V_arg[1]' = RealVariables4[21];
  led_driver.'V_arg[2]' = RealVariables4[22];
  led_driver.'V_arg[3]' = RealVariables4[23];
  led_driver.'V_arg[4]' = RealVariables4[24];
  led_driver.'V_arg[5]' = RealVariables4[25];
  led_driver.'V_arg[6]' = RealVariables4[26];
  led_driver.'V_arg[7]' = RealVariables4[27];
  led_driver.'V_arg[8]' = RealVariables4[28];
  led_driver.S = RealVariables4[29];
  led_driver.Q = RealVariables4[30];
  led_driver.magScale = RealVariables4[31];
  led_driver.'argAdj[1]' = RealVariables4[32];
  led_driver.'argAdj[2]' = RealVariables4[33];
  led_driver.'argAdj[3]' = RealVariables4[34];
  led_driver.'argAdj[4]' = RealVariables4[35];
  led_driver.'argAdj[5]' = RealVariables4[36];
  led_driver.'argAdj[6]' = RealVariables4[37];
  led_driver.'argAdj[7]' = RealVariables4[38];
  led_driver.'a[1]'.re = RealVariables4[39];
  led_driver.'a[1]'.im = RealVariables4[40];
  led_driver.'a[2]'.re = RealVariables4[41];
  led_driver.'a[2]'.im = RealVariables4[42];
  led_driver.'a[3]'.re = RealVariables4[43];
  led_driver.'a[3]'.im = RealVariables4[44];
  led_driver.'a[4]'.re = RealVariables4[45];
  led_driver.'a[4]'.im = RealVariables4[46];
  led_driver.'a[5]'.re = RealVariables4[47];
  led_driver.'a[5]'.im = RealVariables4[48];
  led_driver.'a[6]'.re = RealVariables4[49];
  led_driver.'a[6]'.im = RealVariables4[50];
  led_driver.'a[7]'.re = RealVariables4[51];
  led_driver.'a[7]'.im = RealVariables4[52];
  led_driver.'c[1]' = RealVariables4[53];
  led_driver.'c[2]' = RealVariables4[54];
  led_driver.'c[3]' = RealVariables4[55];
  led_driver.'c[4]' = RealVariables4[56];
  led_driver.'c[5]' = RealVariables4[57];
  led_driver.'c[6]' = RealVariables4[58];
  led_driver.'c[7]' = RealVariables4[59];
  load.i = RealVariables4[60];
  load.p.i = RealVariables4[61];
  load.n.i = RealVariables4[62];
  load.u = RealVariables4[63];
  annotation (__Dymola_FMUImportVersion="Dymola 2019", experiment(StartTime=0.0, StopTime=1.0, Tolerance=1E-06),
    Icon(graphics={
      Text(extent={{-150,150},{150,110}},
        lineColor={0,0,255},
        textString="%name"),
      Text(extent={{-150,-110},{150,-150}},
        lineColor={95,95,95},
        textString="FMI 1.0 CS")}),
Documentation(info="<html>
<h4>ModelDescription Attributes</h4>
<ul>
<li>fmiVersion = 1.0</li>
<li>modelName = Demo_FMU</li>
<li>generationTool = Dymola Version 2019 (64-bit), 2018-04-11 (requires license to execute)</li>
<li>generationDateAndTime = 2019-12-18T21:32:41Z</li>
</ul>
<p><br><b>Co-Simulation Attributes</b></p>
<ul>
<li>canHandleVariableCommunicationStepSize = true</li>
<li>canHandleEvents = true</li>
<li>canRejectSteps = false</li>
<li>canInterpolateInputs = false</li>
<li>maxOutputDerivativeOrder = 1</li>
<li>canRunAsynchronuously = false</li>
<li>canSignalEvents = false</li>
<li>canBeInstantiatedOnlyOncePerProcess = false</li>
<li>canNotUseMemoryManagementFunctions = false</li>
</ul>
</html>"));
end Demo_FMU_fmu;
