Compiler arguments:
  -log=verbose: compile_log.txt,w|xml|stderr -target=me -version=2.0 -platform=linux64 -out=. -modelicapath=/home/linuxdev/jmodelica/ThirdParty/MSL ../../../HPF HPF.Examples.Demo 
Current working directory:
  /media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/Examples/Demo.pyjmi
Compiler version: r13863
Java version: 11.0.5-ea
OS name: Linux
OS architecture: amd64
MODELICAPATH    = 
JAVA_HOME       = /usr/lib/jvm/java-11-openjdk-amd64
JMODELICA_HOME  = /home/linuxdev/jmodelica
======= Compiling model =======
Parsing ../../../HPF/package.mo...
Checking for errors...
MODELICAPATH = /home/linuxdev/jmodelica/ThirdParty/MSL
extra_lib_dirs = 
Parsing ../../../HPF/package.mo...
Parsing ../../../HPF/Examples/package.mo...
Parsing ../../../HPF/Examples/Demo.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/package.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Icons.mo...
Parsing ../../../HPF/SystemDef.mo...
Parsing ../../../HPF/SinglePhase/package.mo...
Parsing ../../../HPF/SinglePhase/Sources/package.mo...
Parsing ../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo...
Parsing ../../../HPF/SinglePhase/Interface.mo...
Parsing ../../../HPF/Machines/package.mo...
Parsing ../../../HPF/Machines/Transformers_iPh/package.mo...
Parsing ../../../HPF/Machines/Transformers_iPh/Test_DY.mo...
Parsing ../../../HPF/SinglePhase/Components/package.mo...
Parsing ../../../HPF/SinglePhase/Components/Ground.mo...
Parsing ../../../HPF/PowerElectronicsConverters/package.mo...
Parsing ../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo...
Parsing ../../../HPF/SinglePhase/Components/Resistor.mo...
Parsing ../../../HPF/DC/package.mo...
Parsing ../../../HPF/DC/DC_Load.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Electrical/package.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Electrical/Analog/package.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Electrical/Analog/Interfaces.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Electrical/Analog/Basic.mo...
Parsing ../../../HPF/ExternalInterface/package.mo...
Parsing ../../../HPF/ExternalInterface/Zone.mo...
Parsing ../../../HPF/Utilities.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/SIunits.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Complex.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Utilities/package.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Utilities/Files.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Utilities/Internal.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/ModelicaServices/package.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Utilities/Streams.mo...
make -f /home/linuxdev/jmodelica/Makefiles/MakeFile ceval_
make[1]: Entering directory '/tmp/jmc10536875843175247085out'
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o ModelicaIO_readMatrixSizes.o sources/ModelicaIO_readMatrixSizes.c
mkdir -p binaries
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -o binaries/ModelicaIO_readMatrixSizes  ModelicaIO_readMatrixSizes.o  -L/home/linuxdev/jmodelica/lib/RuntimeLibrary -ljmi_evaluator_util -ljmi -ldl "-L/home/linuxdev/jmodelica/lib" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library/linux64/gcc921-9ubuntu2" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library/linux64" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library" -lModelicaIO -lModelicaMatIO -lzlib -ljmi_get_set_default -lModelicaIO -lModelicaMatIO -lzlib -ljmi_get_set_default -llapack -lblas -lgfortran -lModelicaExternalC -lzlib -ljmi -lstdc++ -lm
/usr/bin/ld: /home/linuxdev/jmodelica/lib/RuntimeLibrary/libModelicaMatIO.a(ModelicaMatIO.c.o): in function `Mat_VarDelete':
/home/linuxdev/tmp/JModelica.org/ThirdParty/MSL/Modelica/Resources/C-Sources/ModelicaMatIO.c:8521: warning: the use of `mktemp' is dangerous, better use `mkstemp' or `mkdtemp'
rm -f  ModelicaIO_readMatrixSizes.o 
make[1]: Leaving directory '/tmp/jmc10536875843175247085out'
Parsing ../../../HPF/Types.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Constants.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Math/package.mo...
Parsing ../../../HPF/SinglePhase/Components/IdealTransformer.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Blocks/package.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Blocks/Interfaces.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Electrical/Analog/Sources.mo...
Parsing /home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/ComplexMath.mo...
Flattening model...
make -f /home/linuxdev/jmodelica/Makefiles/MakeFile ceval_
make[1]: Entering directory '/tmp/jmc10536875843175247085out'
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o ModelicaIO_readRealMatrix.o sources/ModelicaIO_readRealMatrix.c
mkdir -p binaries
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -o binaries/ModelicaIO_readRealMatrix  ModelicaIO_readRealMatrix.o  -L/home/linuxdev/jmodelica/lib/RuntimeLibrary -ljmi_evaluator_util -ljmi -ldl "-L/home/linuxdev/jmodelica/lib" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library/linux64/gcc921-9ubuntu2" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library/linux64" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library" -lModelicaIO -lModelicaMatIO -lzlib -ljmi_get_set_default -lModelicaIO -lModelicaMatIO -lzlib -ljmi_get_set_default -llapack -lblas -lgfortran -lModelicaExternalC -lzlib -ljmi -lstdc++ -lm
/usr/bin/ld: /home/linuxdev/jmodelica/lib/RuntimeLibrary/libModelicaMatIO.a(ModelicaMatIO.c.o): in function `Mat_VarDelete':
/home/linuxdev/tmp/JModelica.org/ThirdParty/MSL/Modelica/Resources/C-Sources/ModelicaMatIO.c:8521: warning: the use of `mktemp' is dangerous, better use `mkstemp' or `mkdtemp'
rm -f  ModelicaIO_readRealMatrix.o 
make[1]: Leaving directory '/tmp/jmc10536875843175247085out'
ModelicaMessage: <msg:... loading "magV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat"
>
ModelicaMessage: <msg:... loading "argV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat"
>
ModelicaMessage: <msg:... loading "magV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat"
>
ModelicaMessage: <msg:... loading "argV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat"
>
ModelicaMessage: <msg:... loading "magV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat"
>
ModelicaMessage: <msg:... loading "argV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat"
>
ModelicaMessage: <msg:... loading "magV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat"
>
ModelicaMessage: <msg:... loading "argV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat"
>
ModelicaMessage: <msg:... loading "magV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat"
>
ModelicaMessage: <msg:... loading "argV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat"
>
ModelicaMessage: <msg:... loading "magV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat"
>
ModelicaMessage: <msg:... loading "argV" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat"
>
ModelicaMessage: <msg:... loading "arg" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat"
>
ModelicaMessage: <msg:... loading "mag" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat"
>
ModelicaMessage: <msg:... loading "mag" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat"
>
ModelicaMessage: <msg:... loading "arg" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat"
>
ModelicaMessage: <msg:... loading "arg" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat"
>
ModelicaMessage: <msg:... loading "mag" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat"
>
ModelicaMessage: <msg:... loading "mag" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat"
>
ModelicaMessage: <msg:... loading "arg" from "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat"
>
Raw flattened model:
fclass HPF.Examples.Demo
 parameter Integer systemDef.hrms[8] = {1, 3, 5, 7, 9, 11, 13, 15} "Harmonics to simulate" /* { 1, 3, 5, 7, 9, 11, 13, 15 } */;
 structural parameter Integer systemDef.numHrm = 8 "Number of harmonics. (Automatically generated from hrms.)" /* 8 */;
 parameter Real systemDef.fFund = 60 "Fundamental frequency (Hz)" /* 60 */;
 parameter Real systemDef.fs = 5000.0 "Sampling frequency (Hz)" /* 5000.0 */;
 parameter Integer systemDef.N = integer(floor(systemDef.fs / systemDef.fFund)) "Size of FFT";
 parameter Integer systemDef.numPh = 3 "Number of phases" /* 3 */;
 discrete HPF.Utilities.ComponentProperties PhA.properties(ComponentType = "VoltageSource");
 structural (loadResource) parameter String PhA.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" */;
 structural parameter String PhA.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" */;
 structural parameter Integer PhA.matDim[2] = {32, 1} /* { 32, 1 } */;
 structural parameter Real PhA.magDataMat[32,1] = {{0.016839795751254}, {491.28990594667346}, {0.4635405644252304}, {1.0463774223253857}, {0.2331345715632324}, {1.6598617132749682}, {0.1518565411422124}, {1.9105967094709126}, {0.1386948308207945}, {0.5251811665424375}, {0.0877197456635834}, {1.9262797730195742}, {0.1184440683532766}, {0.481422982261235}, {0.0544090284431237}, {0.1451474507152328}, {0.0258533576473125}, {0.8951740935763725}, {0.035779586777545}, {0.1306259620277833}, {0.1030772087446648}, {0.0294340894198748}, {0.0944957041462652}, {0.3245085302933516}, {0.0390577054549229}, {0.0340450317134204}, {0.1097767013072763}, {0.0470594525429294}, {0.1228566379285578}, {0.2164928463914955}, {0.0342300079933074}, {0.0348258926394183}} /* { { 0.016839795751254 }, { 491.28990594667346 }, { 0.4635405644252304 }, { 1.0463774223253857 }, { 0.2331345715632324 }, { 1.6598617132749682 }, { 0.1518565411422124 }, { 1.9105967094709126 }, { 0.1386948308207945 }, { 0.5251811665424375 }, { 0.0877197456635834 }, { 1.9262797730195742 }, { 0.1184440683532766 }, { 0.481422982261235 }, { 0.0544090284431237 }, { 0.1451474507152328 }, { 0.0258533576473125 }, { 0.8951740935763725 }, { 0.035779586777545 }, { 0.1306259620277833 }, { 0.1030772087446648 }, { 0.0294340894198748 }, { 0.0944957041462652 }, { 0.3245085302933516 }, { 0.0390577054549229 }, { 0.0340450317134204 }, { 0.1097767013072763 }, { 0.0470594525429294 }, { 0.1228566379285578 }, { 0.2164928463914955 }, { 0.0342300079933074 }, { 0.0348258926394183 } } */;
 structural parameter Real PhA.argDataMat[32,1] = {{1.5707963267948966}, {0.0077560921535743}, {-0.0852246972433012}, {0.1337983605530348}, {-0.5679607507970243}, {0.3371965305429522}, {-0.0199975129308559}, {-2.4142373069782015}, {0.6504198353240805}, {-2.715056952812912}, {0.5102162003333609}, {-0.1108023593667606}, {-0.262421590602965}, {1.7236257613676265}, {1.1515321243259355}, {-0.2477226727538361}, {-1.7754828141248986}, {2.663073916674371}, {-0.0318137713960557}, {0.2993721368277082}, {1.1393837225179722}, {2.391777148898547}, {1.5648231015885503}, {-0.356629080481576}, {0.2671820434478699}, {2.3096759301950636}, {0.1696844071201723}, {-0.0763985737214103}, {0.5594469031924515}, {-1.2997703855896772}, {0.4481215218879092}, {0.9517083118310508}} /* { { 1.5707963267948966 }, { 0.0077560921535743 }, { -0.0852246972433012 }, { 0.1337983605530348 }, { -0.5679607507970243 }, { 0.3371965305429522 }, { -0.0199975129308559 }, { -2.4142373069782015 }, { 0.6504198353240805 }, { -2.715056952812912 }, { 0.5102162003333609 }, { -0.1108023593667606 }, { -0.262421590602965 }, { 1.7236257613676265 }, { 1.1515321243259355 }, { -0.2477226727538361 }, { -1.7754828141248986 }, { 2.663073916674371 }, { -0.0318137713960557 }, { 0.2993721368277082 }, { 1.1393837225179722 }, { 2.391777148898547 }, { 1.5648231015885503 }, { -0.356629080481576 }, { 0.2671820434478699 }, { 2.3096759301950636 }, { 0.1696844071201723 }, { -0.0763985737214103 }, { 0.5594469031924515 }, { -1.2997703855896772 }, { 0.4481215218879092 }, { 0.9517083118310508 } } */;
 Modelica.SIunits.Angle PhA.theta(start = 0) = PhA.pin_p.reference.theta;
 Complex PhA.v[8](each re(start = 0),each im(start = 0)) "Complex voltage";
 Complex PhA.i[8](each re(start = 0),each im(start = 0)) "Complex current";
 Real PhA.omega;
 HPF.Types.Reference PhA.pin_p.reference(theta(start = 0)) "Reference";
 structural parameter Integer PhA.pin_p.h = 8 "Numbder of harmonics" /* 8 */;
 Complex PhA.pin_p.v[8] "Complex potential at the node";
 Real PhA.pin_p.iIm[8];
 Real PhA.pin_p.iRe[8];
 HPF.Types.Reference PhA.pin_n.reference(theta(start = 0)) "Reference";
 structural parameter Integer PhA.pin_n.h = 8 "Numbder of harmonics" /* 8 */;
 Complex PhA.pin_n.v[8] "Complex potential at the node";
 Real PhA.pin_n.iIm[8];
 Real PhA.pin_n.iRe[8];
 discrete HPF.Utilities.ComponentProperties PhB.properties(ComponentType = "VoltageSource");
 structural (loadResource) parameter String PhB.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" */;
 structural parameter String PhB.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" */;
 structural parameter Integer PhB.matDim[2] = {32, 1} /* { 32, 1 } */;
 structural parameter Real PhB.magDataMat[32,1] = {{0.2859962329521695}, {492.3540794785275}, {0.208496948122041}, {1.1805408036097413}, {0.1693263989961228}, {0.9106214363027906}, {0.1195391546137544}, {1.6580541328073826}, {0.1269101445860712}, {0.3289985189761305}, {0.0946942856942096}, {2.0198413017769763}, {0.0836821242552161}, {0.4924159700118574}, {0.0668687465332885}, {0.1143872931492812}, {0.076898954125649}, {0.9655752395607782}, {0.0349853026484666}, {0.226897033607389}, {0.098402544910626}, {0.0652517506228442}, {0.08011082638466}, {0.1620678510443835}, {0.0400637050971903}, {0.0561736562706734}, {0.1331380625697481}, {0.0296172064955882}, {0.094827068391166}, {0.2157544231279243}, {0.0180623326640486}, {0.0434623170353308}} /* { { 0.2859962329521695 }, { 492.3540794785275 }, { 0.208496948122041 }, { 1.1805408036097413 }, { 0.1693263989961228 }, { 0.9106214363027906 }, { 0.1195391546137544 }, { 1.6580541328073826 }, { 0.1269101445860712 }, { 0.3289985189761305 }, { 0.0946942856942096 }, { 2.0198413017769763 }, { 0.0836821242552161 }, { 0.4924159700118574 }, { 0.0668687465332885 }, { 0.1143872931492812 }, { 0.076898954125649 }, { 0.9655752395607782 }, { 0.0349853026484666 }, { 0.226897033607389 }, { 0.098402544910626 }, { 0.0652517506228442 }, { 0.08011082638466 }, { 0.1620678510443835 }, { 0.0400637050971903 }, { 0.0561736562706734 }, { 0.1331380625697481 }, { 0.0296172064955882 }, { 0.094827068391166 }, { 0.2157544231279243 }, { 0.0180623326640486 }, { 0.0434623170353308 } } */;
 structural parameter Real PhB.argDataMat[32,1] = {{1.5707963267948966}, {-2.086840476097504}, {-2.5253242170980594}, {-1.8115418295128152}, {2.8595229031828926}, {2.8739733224576094}, {-2.8607178229132786}, {2.073331261624584}, {-2.9351292614081848}, {-0.1551377562798652}, {-1.6094031270218976}, {2.1810033665310717}, {2.8832395214114577}, {-0.0631873306821448}, {-2.133736341444569}, {-2.9370100120292153}, {1.5326277680479188}, {-1.4355335492083865}, {-2.7058834666324927}, {-1.82542395065559}, {-2.9017038801663326}, {-1.6471531147838383}, {-0.2664005312148152}, {2.233387596536119}, {-2.373672554709982}, {0.8816266227593619}, {2.17935104062631}, {2.36233434884658}, {-1.275072088990568}, {0.9083106039150173}, {-2.5000963969047283}, {2.7980169261979593}} /* { { 1.5707963267948966 }, { -2.086840476097504 }, { -2.5253242170980594 }, { -1.8115418295128152 }, { 2.8595229031828926 }, { 2.8739733224576094 }, { -2.8607178229132786 }, { 2.073331261624584 }, { -2.9351292614081848 }, { -0.1551377562798652 }, { -1.6094031270218976 }, { 2.1810033665310717 }, { 2.8832395214114577 }, { -0.0631873306821448 }, { -2.133736341444569 }, { -2.9370100120292153 }, { 1.5326277680479188 }, { -1.4355335492083865 }, { -2.7058834666324927 }, { -1.82542395065559 }, { -2.9017038801663326 }, { -1.6471531147838383 }, { -0.2664005312148152 }, { 2.233387596536119 }, { -2.373672554709982 }, { 0.8816266227593619 }, { 2.17935104062631 }, { 2.36233434884658 }, { -1.275072088990568 }, { 0.9083106039150173 }, { -2.5000963969047283 }, { 2.7980169261979593 } } */;
 Modelica.SIunits.Angle PhB.theta(start = 0) = PhB.pin_p.reference.theta;
 Complex PhB.v[8](each re(start = 0),each im(start = 0)) "Complex voltage";
 Complex PhB.i[8](each re(start = 0),each im(start = 0)) "Complex current";
 Real PhB.omega;
 HPF.Types.Reference PhB.pin_p.reference(theta(start = 0)) "Reference";
 structural parameter Integer PhB.pin_p.h = 8 "Numbder of harmonics" /* 8 */;
 Complex PhB.pin_p.v[8] "Complex potential at the node";
 Real PhB.pin_p.iIm[8];
 Real PhB.pin_p.iRe[8];
 HPF.Types.Reference PhB.pin_n.reference(theta(start = 0)) "Reference";
 structural parameter Integer PhB.pin_n.h = 8 "Numbder of harmonics" /* 8 */;
 Complex PhB.pin_n.v[8] "Complex potential at the node";
 Real PhB.pin_n.iIm[8];
 Real PhB.pin_n.iRe[8];
 discrete HPF.Utilities.ComponentProperties PhC.properties(ComponentType = "VoltageSource");
 structural (loadResource) parameter String PhC.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" */;
 structural parameter String PhC.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" */;
 structural parameter Integer PhC.matDim[2] = {32, 1} /* { 32, 1 } */;
 structural parameter Real PhC.magDataMat[32,1] = {{0.2719091281810751}, {491.7835718293929}, {0.3388220554753613}, {1.2560872424865368}, {0.0837965376619556}, {1.049579074569396}, {0.0479633900797327}, {2.232243217516371}, {0.0613261670877852}, {0.3085661753673511}, {0.0894017215045658}, {1.6340384052716668}, {0.0360394590491708}, {0.6080350350042865}, {0.0144866764815914}, {0.0616593186094572}, {0.0526340810138655}, {0.8610409933552359}, {0.0223544380084765}, {0.1965193072432281}, {0.0820234182998287}, {0.0475998645936773}, {0.1031046389723781}, {0.2083187534520808}, {0.0208153705589776}, {0.0678806501902422}, {0.1312213892402629}, {0.0355695042062854}, {0.1405141155536664}, {0.1917926361699222}, {0.0151716866761024}, {0.0441299911973412}} /* { { 0.2719091281810751 }, { 491.7835718293929 }, { 0.3388220554753613 }, { 1.2560872424865368 }, { 0.0837965376619556 }, { 1.049579074569396 }, { 0.0479633900797327 }, { 2.232243217516371 }, { 0.0613261670877852 }, { 0.3085661753673511 }, { 0.0894017215045658 }, { 1.6340384052716668 }, { 0.0360394590491708 }, { 0.6080350350042865 }, { 0.0144866764815914 }, { 0.0616593186094572 }, { 0.0526340810138655 }, { 0.8610409933552359 }, { 0.0223544380084765 }, { 0.1965193072432281 }, { 0.0820234182998287 }, { 0.0475998645936773 }, { 0.1031046389723781 }, { 0.2083187534520808 }, { 0.0208153705589776 }, { 0.0678806501902422 }, { 0.1312213892402629 }, { 0.0355695042062854 }, { 0.1405141155536664 }, { 0.1917926361699222 }, { 0.0151716866761024 }, { 0.0441299911973412 } } */;
 structural parameter Real PhC.argDataMat[32,1] = {{-1.5707963267948966}, {2.1002127315831656}, {2.626463259293345}, {2.213433315249527}, {1.9305801732284436}, {-2.287526674673138}, {2.4365080165904245}, {-0.0814742736872363}, {-1.384994505036182}, {1.0470875569304956}, {2.631009325075965}, {-2.0524997537545646}, {3.1325135086188496}, {-2.3307335874922797}, {0.0369170525554631}, {1.98109019446484}, {-1.5401794110408888}, {0.6878100982576986}, {1.8960282037310516}, {1.905818739906312}, {-0.8685007111657533}, {0.9586173036243184}, {-2.359173994218259}, {-3.0830059554674554}, {2.345527303073058}, {-1.6859722132521102}, {-1.8371613968199139}, {-2.6180299851214954}, {2.891302880891181}, {2.9641683759106843}, {3.108553064967207}, {-1.056675653397591}} /* { { -1.5707963267948966 }, { 2.1002127315831656 }, { 2.626463259293345 }, { 2.213433315249527 }, { 1.9305801732284436 }, { -2.287526674673138 }, { 2.4365080165904245 }, { -0.0814742736872363 }, { -1.384994505036182 }, { 1.0470875569304956 }, { 2.631009325075965 }, { -2.0524997537545646 }, { 3.1325135086188496 }, { -2.3307335874922797 }, { 0.0369170525554631 }, { 1.98109019446484 }, { -1.5401794110408888 }, { 0.6878100982576986 }, { 1.8960282037310516 }, { 1.905818739906312 }, { -0.8685007111657533 }, { 0.9586173036243184 }, { -2.359173994218259 }, { -3.0830059554674554 }, { 2.345527303073058 }, { -1.6859722132521102 }, { -1.8371613968199139 }, { -2.6180299851214954 }, { 2.891302880891181 }, { 2.9641683759106843 }, { 3.108553064967207 }, { -1.056675653397591 } } */;
 Modelica.SIunits.Angle PhC.theta(start = 0) = PhC.pin_p.reference.theta;
 Complex PhC.v[8](each re(start = 0),each im(start = 0)) "Complex voltage";
 Complex PhC.i[8](each re(start = 0),each im(start = 0)) "Complex current";
 Real PhC.omega;
 HPF.Types.Reference PhC.pin_p.reference(theta(start = 0)) "Reference";
 structural parameter Integer PhC.pin_p.h = 8 "Numbder of harmonics" /* 8 */;
 Complex PhC.pin_p.v[8] "Complex potential at the node";
 Real PhC.pin_p.iIm[8];
 Real PhC.pin_p.iRe[8];
 HPF.Types.Reference PhC.pin_n.reference(theta(start = 0)) "Reference";
 structural parameter Integer PhC.pin_n.h = 8 "Numbder of harmonics" /* 8 */;
 Complex PhC.pin_n.v[8] "Complex potential at the node";
 Real PhC.pin_n.iIm[8];
 Real PhC.pin_n.iRe[8];
 discrete HPF.Utilities.ComponentProperties test_DY.properties(ComponentType = "MultiPhaseTransformer");
 parameter Integer test_DY.N = 10 "Turns ration" /* 10 */;
 discrete HPF.Utilities.ComponentProperties test_DY.idealTransformer1.properties(ComponentType = "Transformer");
 parameter Real test_DY.idealTransformer1.N = test_DY.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 Complex test_DY.idealTransformer1.vPrim[8] "Complex voltage primary winding";
 Complex test_DY.idealTransformer1.iPrim[8] "Complex current primary winding";
 Complex test_DY.idealTransformer1.vSec[8] "Complex voltage secondary winding";
 Complex test_DY.idealTransformer1.iSec[8] "Complex current secondary winding";
 HPF.Types.Reference test_DY.idealTransformer1.pinP_Prim.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer1.pinP_Prim.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer1.pinP_Prim.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer1.pinP_Prim.iIm[8];
 Real test_DY.idealTransformer1.pinP_Prim.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer1.pinN_Prim.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer1.pinN_Prim.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer1.pinN_Prim.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer1.pinN_Prim.iIm[8];
 Real test_DY.idealTransformer1.pinN_Prim.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer1.pinP_Sec.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer1.pinP_Sec.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer1.pinP_Sec.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer1.pinP_Sec.iIm[8];
 Real test_DY.idealTransformer1.pinP_Sec.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer1.pinN_Sec.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer1.pinN_Sec.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer1.pinN_Sec.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer1.pinN_Sec.iIm[8];
 Real test_DY.idealTransformer1.pinN_Sec.iRe[8];
 discrete HPF.Utilities.ComponentProperties test_DY.idealTransformer2.properties(ComponentType = "Transformer");
 parameter Real test_DY.idealTransformer2.N = test_DY.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 Complex test_DY.idealTransformer2.vPrim[8] "Complex voltage primary winding";
 Complex test_DY.idealTransformer2.iPrim[8] "Complex current primary winding";
 Complex test_DY.idealTransformer2.vSec[8] "Complex voltage secondary winding";
 Complex test_DY.idealTransformer2.iSec[8] "Complex current secondary winding";
 HPF.Types.Reference test_DY.idealTransformer2.pinP_Prim.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer2.pinP_Prim.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer2.pinP_Prim.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer2.pinP_Prim.iIm[8];
 Real test_DY.idealTransformer2.pinP_Prim.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer2.pinN_Prim.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer2.pinN_Prim.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer2.pinN_Prim.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer2.pinN_Prim.iIm[8];
 Real test_DY.idealTransformer2.pinN_Prim.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer2.pinP_Sec.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer2.pinP_Sec.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer2.pinP_Sec.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer2.pinP_Sec.iIm[8];
 Real test_DY.idealTransformer2.pinP_Sec.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer2.pinN_Sec.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer2.pinN_Sec.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer2.pinN_Sec.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer2.pinN_Sec.iIm[8];
 Real test_DY.idealTransformer2.pinN_Sec.iRe[8];
 discrete HPF.Utilities.ComponentProperties test_DY.idealTransformer3.properties(ComponentType = "Transformer");
 parameter Real test_DY.idealTransformer3.N = test_DY.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 Complex test_DY.idealTransformer3.vPrim[8] "Complex voltage primary winding";
 Complex test_DY.idealTransformer3.iPrim[8] "Complex current primary winding";
 Complex test_DY.idealTransformer3.vSec[8] "Complex voltage secondary winding";
 Complex test_DY.idealTransformer3.iSec[8] "Complex current secondary winding";
 HPF.Types.Reference test_DY.idealTransformer3.pinP_Prim.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer3.pinP_Prim.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer3.pinP_Prim.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer3.pinP_Prim.iIm[8];
 Real test_DY.idealTransformer3.pinP_Prim.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer3.pinN_Prim.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer3.pinN_Prim.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer3.pinN_Prim.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer3.pinN_Prim.iIm[8];
 Real test_DY.idealTransformer3.pinN_Prim.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer3.pinP_Sec.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer3.pinP_Sec.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer3.pinP_Sec.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer3.pinP_Sec.iIm[8];
 Real test_DY.idealTransformer3.pinP_Sec.iRe[8];
 HPF.Types.Reference test_DY.idealTransformer3.pinN_Sec.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.idealTransformer3.pinN_Sec.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.idealTransformer3.pinN_Sec.v[8] "Complex potential at the node";
 Real test_DY.idealTransformer3.pinN_Sec.iIm[8];
 Real test_DY.idealTransformer3.pinN_Sec.iRe[8];
 HPF.Types.Reference test_DY.pinPrim_A.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.pinPrim_A.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.pinPrim_A.v[8] "Complex potential at the node";
 Real test_DY.pinPrim_A.iIm[8];
 Real test_DY.pinPrim_A.iRe[8];
 HPF.Types.Reference test_DY.pinPrim_B.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.pinPrim_B.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.pinPrim_B.v[8] "Complex potential at the node";
 Real test_DY.pinPrim_B.iIm[8];
 Real test_DY.pinPrim_B.iRe[8];
 HPF.Types.Reference test_DY.pinPrim_C.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.pinPrim_C.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.pinPrim_C.v[8] "Complex potential at the node";
 Real test_DY.pinPrim_C.iIm[8];
 Real test_DY.pinPrim_C.iRe[8];
 HPF.Types.Reference test_DY.pinSec_A.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.pinSec_A.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.pinSec_A.v[8] "Complex potential at the node";
 Real test_DY.pinSec_A.iIm[8];
 Real test_DY.pinSec_A.iRe[8];
 HPF.Types.Reference test_DY.pinSec_B.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.pinSec_B.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.pinSec_B.v[8] "Complex potential at the node";
 Real test_DY.pinSec_B.iIm[8];
 Real test_DY.pinSec_B.iRe[8];
 HPF.Types.Reference test_DY.pinSec_C.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.pinSec_C.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.pinSec_C.v[8] "Complex potential at the node";
 Real test_DY.pinSec_C.iIm[8];
 Real test_DY.pinSec_C.iRe[8];
 HPF.Types.Reference test_DY.hPin_N.reference(theta(start = 0)) "Reference";
 structural parameter Integer test_DY.hPin_N.h = 8 "Numbder of harmonics" /* 8 */;
 Complex test_DY.hPin_N.v[8] "Complex potential at the node";
 Real test_DY.hPin_N.iIm[8];
 Real test_DY.hPin_N.iRe[8];
 discrete HPF.Utilities.ComponentProperties ground.properties(ComponentType = "Ground");
 HPF.Types.Reference ground.pin.reference(theta(start = 0)) "Reference";
 structural parameter Integer ground.pin.h = 8 "Numbder of harmonics" /* 8 */;
 Complex ground.pin.v[8] "Complex potential at the node";
 Real ground.pin.iIm[8];
 Real ground.pin.iRe[8];
 discrete HPF.Utilities.ComponentProperties laptop2.properties(ComponentType = "NonlinearLoad");
 Modelica.SIunits.ElectricPotential laptop2.pin_p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent laptop2.pin_p.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential laptop2.pin_n.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent laptop2.pin_n.i "Current flowing into the pin";
 HPF.Types.Reference laptop2.hPin_P.reference(theta(start = 0)) "Reference";
 structural parameter Integer laptop2.hPin_P.h = 8 "Numbder of harmonics" /* 8 */;
 Complex laptop2.hPin_P.v[8] "Complex potential at the node";
 Real laptop2.hPin_P.iIm[8];
 Real laptop2.hPin_P.iRe[8];
 HPF.Types.Reference laptop2.hPin_N.reference(theta(start = 0)) "Reference";
 structural parameter Integer laptop2.hPin_N.h = 8 "Numbder of harmonics" /* 8 */;
 Complex laptop2.hPin_N.v[8] "Complex potential at the node";
 Real laptop2.hPin_N.iIm[8];
 Real laptop2.hPin_N.iRe[8];
 Modelica.Blocks.Interfaces.RealOutput laptop2.PLoss;
 parameter Real laptop2.V_Rect(start = 0) = 19.5 "Rectifier DC output" /* 19.5 */;
 parameter Real laptop2.efficiency(start = 1) = 0.9 "Rectifier efficiency (replace with efficiency model or curve)" /* 0.9 */;
 parameter Real laptop2.rectifierModel = 0 "Rectifier model (Other model parameters passed as a record?)" /* 0 */;
 parameter Modelica.SIunits.ElectricPotential laptop2.vDC.V(start = 1) = laptop2.V_Rect "Value of constant voltage";
 Modelica.SIunits.ElectricPotential laptop2.vDC.v "Voltage drop between the two pins (= p.v - n.v)";
 Modelica.SIunits.ElectricCurrent laptop2.vDC.i "Current flowing from pin p to pin n";
 Modelica.SIunits.ElectricPotential laptop2.vDC.p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent laptop2.vDC.p.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential laptop2.vDC.n.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent laptop2.vDC.n.i "Current flowing into the pin";
 Complex laptop2.loadBase.v[8](each re(start = 0),each im(start = 0)) "Complex voltage";
 Complex laptop2.loadBase.i[8](each re(start = 0),each im(start = 0)) "Complex current";
 Real laptop2.loadBase.omega;
 HPF.Types.Reference laptop2.loadBase.pin_p.reference(theta(start = 0)) "Reference";
 structural parameter Integer laptop2.loadBase.pin_p.h = 8 "Numbder of harmonics" /* 8 */;
 Complex laptop2.loadBase.pin_p.v[8] "Complex potential at the node";
 Real laptop2.loadBase.pin_p.iIm[8];
 Real laptop2.loadBase.pin_p.iRe[8];
 HPF.Types.Reference laptop2.loadBase.pin_n.reference(theta(start = 0)) "Reference";
 structural parameter Integer laptop2.loadBase.pin_n.h = 8 "Numbder of harmonics" /* 8 */;
 Complex laptop2.loadBase.pin_n.v[8] "Complex potential at the node";
 Real laptop2.loadBase.pin_n.iIm[8];
 Real laptop2.loadBase.pin_n.iRe[8];
 Real laptop2.P = abs(laptop2.efficiency * (laptop2.vDC.v * laptop2.vDC.i));
 Real laptop2.I_mag[8] = Modelica.ComplexMath.'abs'(laptop2.loadBase.i[1:8]);
 Real laptop2.I_arg[8] = Modelica.ComplexMath.arg(laptop2.loadBase.i[1:8], 0);
 Real laptop2.V_mag[8] = Modelica.ComplexMath.'abs'(laptop2.loadBase.v[1:8]);
 Real laptop2.V_arg[8] = Modelica.ComplexMath.arg(laptop2.loadBase.v[1:8], 0);
 Real laptop2.S(start = 1) "Apparent power at fundamental";
 Real laptop2.Q(start = 1) "Imaginary power at fundamental";
 structural (loadResource) parameter String laptop2.modelFileName = "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" "Rectifier harmonic model mat file" /* "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" */;
 structural parameter String laptop2.resourceRetValue = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" */;
 structural parameter Integer laptop2.matDim[2] = {16, 1} /* { 16, 1 } */;
 structural parameter Real laptop2.magDataMat[16,1] = {{0.9999999999999999}, {0.9486974344201337}, {0.9221155376813399}, {0.8849332521469448}, {0.8475867045468796}, {0.7944241839808487}, {0.7230242274654483}, {0.6688914048386135}, {0.5939253865608557}, {0.5280196623121391}, {0.4568186887780485}, {0.3861474201640431}, {0.3163533253631282}, {0.2534864723066213}, {0.1920046370077911}, {0.1442126307974456}} /* { { 0.9999999999999999 }, { 0.9486974344201337 }, { 0.9221155376813399 }, { 0.8849332521469448 }, { 0.8475867045468796 }, { 0.7944241839808487 }, { 0.7230242274654483 }, { 0.6688914048386135 }, { 0.5939253865608557 }, { 0.5280196623121391 }, { 0.4568186887780485 }, { 0.3861474201640431 }, { 0.3163533253631282 }, { 0.2534864723066213 }, { 0.1920046370077911 }, { 0.1442126307974456 } } */;
 structural parameter Real laptop2.argDataMat[16,1] = {{0.3053419323150846}, {-2.8182357929499515}, {0.5364901833841553}, {-2.381193752481799}, {0.9688071004089418}, {-1.959495555161772}, {1.4013739855750704}, {-1.5329775105321843}, {1.8276649690040103}, {-1.1106883983886444}, {2.2426384598738585}, {-0.6809000975704675}, {2.648460001811645}, {-0.2835615514742411}, {3.0642644296286683}, {0.0716470412434909}} /* { { 0.3053419323150846 }, { -2.8182357929499515 }, { 0.5364901833841553 }, { -2.381193752481799 }, { 0.9688071004089418 }, { -1.959495555161772 }, { 1.4013739855750704 }, { -1.5329775105321843 }, { 1.8276649690040103 }, { -1.1106883983886444 }, { 2.2426384598738585 }, { -0.6809000975704675 }, { 2.648460001811645 }, { -0.2835615514742411 }, { 3.0642644296286683 }, { 0.0716470412434909 } } */;
 Real laptop2.argS "Phase angle for fundamental apparent power";
 Real laptop2.magScale = Modelica.ComplexMath.'abs'(laptop2.loadBase.i[1]);
 Real laptop2.argAdj[7] = {-2.8182357929499515, 0.5364901833841553, -2.381193752481799, 0.9688071004089418, -1.959495555161772, 1.4013739855750704, -1.5329775105321843} - Modelica.ComplexMath.arg(laptop2.loadBase.v[1], 0) .* systemDef.hrms[2:8];
 Complex laptop2.a[7] = {Complex.'constructor'.fromReal(cos(laptop2.argAdj[1]), sin(laptop2.argAdj[1])), Complex.'constructor'.fromReal(cos(laptop2.argAdj[2]), sin(laptop2.argAdj[2])), Complex.'constructor'.fromReal(cos(laptop2.argAdj[3]), sin(laptop2.argAdj[3])), Complex.'constructor'.fromReal(cos(laptop2.argAdj[4]), sin(laptop2.argAdj[4])), Complex.'constructor'.fromReal(cos(laptop2.argAdj[5]), sin(laptop2.argAdj[5])), Complex.'constructor'.fromReal(cos(laptop2.argAdj[6]), sin(laptop2.argAdj[6])), Complex.'constructor'.fromReal(cos(laptop2.argAdj[7]), sin(laptop2.argAdj[7]))};
 Real laptop2.c[7] = laptop2.magScale * {0.9486974344201337, 0.9221155376813399, 0.8849332521469448, 0.8475867045468796, 0.7944241839808487, 0.7230242274654483, 0.6688914048386135};
 discrete HPF.Utilities.ComponentProperties led_driver.properties(ComponentType = "NonlinearLoad");
 Modelica.SIunits.ElectricPotential led_driver.pin_p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent led_driver.pin_p.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential led_driver.pin_n.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent led_driver.pin_n.i "Current flowing into the pin";
 HPF.Types.Reference led_driver.hPin_P.reference(theta(start = 0)) "Reference";
 structural parameter Integer led_driver.hPin_P.h = 8 "Numbder of harmonics" /* 8 */;
 Complex led_driver.hPin_P.v[8] "Complex potential at the node";
 Real led_driver.hPin_P.iIm[8];
 Real led_driver.hPin_P.iRe[8];
 HPF.Types.Reference led_driver.hPin_N.reference(theta(start = 0)) "Reference";
 structural parameter Integer led_driver.hPin_N.h = 8 "Numbder of harmonics" /* 8 */;
 Complex led_driver.hPin_N.v[8] "Complex potential at the node";
 Real led_driver.hPin_N.iIm[8];
 Real led_driver.hPin_N.iRe[8];
 Modelica.Blocks.Interfaces.RealOutput led_driver.PLoss;
 parameter Real led_driver.V_Rect(start = 0) = 24 "Rectifier DC output" /* 24 */;
 parameter Real led_driver.efficiency(start = 1) = 0.9 "Rectifier efficiency (replace with efficiency model or curve)" /* 0.9 */;
 parameter Real led_driver.rectifierModel = 0 "Rectifier model (Other model parameters passed as a record?)" /* 0 */;
 parameter Modelica.SIunits.ElectricPotential led_driver.vDC.V(start = 1) = led_driver.V_Rect "Value of constant voltage";
 Modelica.SIunits.ElectricPotential led_driver.vDC.v "Voltage drop between the two pins (= p.v - n.v)";
 Modelica.SIunits.ElectricCurrent led_driver.vDC.i "Current flowing from pin p to pin n";
 Modelica.SIunits.ElectricPotential led_driver.vDC.p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent led_driver.vDC.p.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential led_driver.vDC.n.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent led_driver.vDC.n.i "Current flowing into the pin";
 Complex led_driver.loadBase.v[8](each re(start = 0),each im(start = 0)) "Complex voltage";
 Complex led_driver.loadBase.i[8](each re(start = 0),each im(start = 0)) "Complex current";
 Real led_driver.loadBase.omega;
 HPF.Types.Reference led_driver.loadBase.pin_p.reference(theta(start = 0)) "Reference";
 structural parameter Integer led_driver.loadBase.pin_p.h = 8 "Numbder of harmonics" /* 8 */;
 Complex led_driver.loadBase.pin_p.v[8] "Complex potential at the node";
 Real led_driver.loadBase.pin_p.iIm[8];
 Real led_driver.loadBase.pin_p.iRe[8];
 HPF.Types.Reference led_driver.loadBase.pin_n.reference(theta(start = 0)) "Reference";
 structural parameter Integer led_driver.loadBase.pin_n.h = 8 "Numbder of harmonics" /* 8 */;
 Complex led_driver.loadBase.pin_n.v[8] "Complex potential at the node";
 Real led_driver.loadBase.pin_n.iIm[8];
 Real led_driver.loadBase.pin_n.iRe[8];
 Real led_driver.P = abs(led_driver.efficiency * (led_driver.vDC.v * led_driver.vDC.i));
 Real led_driver.I_mag[8] = Modelica.ComplexMath.'abs'(led_driver.loadBase.i[1:8]);
 Real led_driver.I_arg[8] = Modelica.ComplexMath.arg(led_driver.loadBase.i[1:8], 0);
 Real led_driver.V_mag[8] = Modelica.ComplexMath.'abs'(led_driver.loadBase.v[1:8]);
 Real led_driver.V_arg[8] = Modelica.ComplexMath.arg(led_driver.loadBase.v[1:8], 0);
 Real led_driver.S(start = 1) "Apparent power at fundamental";
 Real led_driver.Q(start = 1) "Imaginary power at fundamental";
 structural (loadResource) parameter String led_driver.modelFileName = "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" "Rectifier harmonic model mat file" /* "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" */;
 structural parameter String led_driver.resourceRetValue = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" */;
 structural parameter Integer led_driver.matDim[2] = {16, 1} /* { 16, 1 } */;
 structural parameter Real led_driver.magDataMat[16,1] = {{1.0}, {0.890432111870432}, {0.7418107134668804}, {0.567293049298617}, {0.3936692199400683}, {0.2525656583874291}, {0.1565031895698116}, {0.1085784608235925}, {0.1028049066991282}, {0.1116701804666674}, {0.1074207968075735}, {0.0874748765804625}, {0.05783641101013}, {0.0366390283673692}, {0.0289014631844665}, {0.0275187725558538}} /* { { 1.0 }, { 0.890432111870432 }, { 0.7418107134668804 }, { 0.567293049298617 }, { 0.3936692199400683 }, { 0.2525656583874291 }, { 0.1565031895698116 }, { 0.1085784608235925 }, { 0.1028049066991282 }, { 0.1116701804666674 }, { 0.1074207968075735 }, { 0.0874748765804625 }, { 0.05783641101013 }, { 0.0366390283673692 }, { 0.0289014631844665 }, { 0.0275187725558538 } } */;
 structural parameter Real led_driver.argDataMat[16,1] = {{0.3875666016022497}, {-2.1789648209071406}, {1.6302868785533633}, {-0.7953249928799604}, {3.1273318832610917}, {0.8908122903345195}, {-1.1864005972204819}, {-2.999284764233698}, {1.4699218316090397}, {-0.606821589236838}, {-2.844685963688736}, {1.1601646456077166}, {-1.0323815181519134}, {-2.9611753908140344}, {1.5581822303336441}, {-0.353240856878104}} /* { { 0.3875666016022497 }, { -2.1789648209071406 }, { 1.6302868785533633 }, { -0.7953249928799604 }, { 3.1273318832610917 }, { 0.8908122903345195 }, { -1.1864005972204819 }, { -2.999284764233698 }, { 1.4699218316090397 }, { -0.606821589236838 }, { -2.844685963688736 }, { 1.1601646456077166 }, { -1.0323815181519134 }, { -2.9611753908140344 }, { 1.5581822303336441 }, { -0.353240856878104 } } */;
 Real led_driver.argS "Phase angle for fundamental apparent power";
 Real led_driver.magScale = Modelica.ComplexMath.'abs'(led_driver.loadBase.i[1]);
 Real led_driver.argAdj[7] = {-2.1789648209071406, 1.6302868785533633, -0.7953249928799604, 3.1273318832610917, 0.8908122903345195, -1.1864005972204819, -2.999284764233698} - Modelica.ComplexMath.arg(led_driver.loadBase.v[1], 0) .* systemDef.hrms[2:8];
 Complex led_driver.a[7] = {Complex.'constructor'.fromReal(cos(led_driver.argAdj[1]), sin(led_driver.argAdj[1])), Complex.'constructor'.fromReal(cos(led_driver.argAdj[2]), sin(led_driver.argAdj[2])), Complex.'constructor'.fromReal(cos(led_driver.argAdj[3]), sin(led_driver.argAdj[3])), Complex.'constructor'.fromReal(cos(led_driver.argAdj[4]), sin(led_driver.argAdj[4])), Complex.'constructor'.fromReal(cos(led_driver.argAdj[5]), sin(led_driver.argAdj[5])), Complex.'constructor'.fromReal(cos(led_driver.argAdj[6]), sin(led_driver.argAdj[6])), Complex.'constructor'.fromReal(cos(led_driver.argAdj[7]), sin(led_driver.argAdj[7]))};
 Real led_driver.c[7] = led_driver.magScale * {0.890432111870432, 0.7418107134668804, 0.567293049298617, 0.3936692199400683, 0.2525656583874291, 0.1565031895698116, 0.1085784608235925};
 discrete HPF.Utilities.ComponentProperties ground1.properties(ComponentType = "Ground");
 HPF.Types.Reference ground1.pin.reference(theta(start = 0)) "Reference";
 structural parameter Integer ground1.pin.h = 8 "Numbder of harmonics" /* 8 */;
 Complex ground1.pin.v[8] "Complex potential at the node";
 Real ground1.pin.iIm[8];
 Real ground1.pin.iRe[8];
 discrete HPF.Utilities.ComponentProperties r.properties(ComponentType = "Resistor");
 parameter Real r.r(start = 1) = 1000000.0 "Resistance (ohm)" /* 1000000.0 */;
 Real r.vFundAbs = Modelica.ComplexMath.'abs'(r.v[1]);
 Real r.vFundArg = Modelica.ComplexMath.arg(r.v[1], 0);
 Real r.iFundAbs = Modelica.ComplexMath.'abs'(r.i[1]);
 Real r.iFundArg = Modelica.ComplexMath.arg(r.i[1], 0);
 Complex r.v[8](each re(start = 0),each im(start = 0)) "Complex voltage";
 Complex r.i[8](each re(start = 0),each im(start = 0)) "Complex current";
 Real r.omega;
 HPF.Types.Reference r.pin_p.reference(theta(start = 0)) "Reference";
 structural parameter Integer r.pin_p.h = 8 "Numbder of harmonics" /* 8 */;
 Complex r.pin_p.v[8] "Complex potential at the node";
 Real r.pin_p.iIm[8];
 Real r.pin_p.iRe[8];
 HPF.Types.Reference r.pin_n.reference(theta(start = 0)) "Reference";
 structural parameter Integer r.pin_n.h = 8 "Numbder of harmonics" /* 8 */;
 Complex r.pin_n.v[8] "Complex potential at the node";
 Real r.pin_n.iIm[8];
 Real r.pin_n.iRe[8];
 discrete HPF.Utilities.ComponentProperties led_load.properties(ComponentType = "DC_Load");
 parameter Real led_load.pwr(start = 1) = 50 "Power (watts)" /* 50 */;
 Modelica.SIunits.ElectricPotential led_load.v "Voltage drop between the two pins (= p.v - n.v)";
 Modelica.SIunits.ElectricCurrent led_load.i "Current flowing from pin p to pin n";
 Modelica.SIunits.ElectricPotential led_load.p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent led_load.p.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential led_load.n.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent led_load.n.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential ground2.p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent ground2.p.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential ground3.p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent ground3.p.i "Current flowing into the pin";
 discrete HPF.Utilities.ComponentProperties laptop_load.properties(ComponentType = "DC_Load");
 parameter Real laptop_load.pwr(start = 1) = 25 "Power (watts)" /* 25 */;
 Modelica.SIunits.ElectricPotential laptop_load.v "Voltage drop between the two pins (= p.v - n.v)";
 Modelica.SIunits.ElectricCurrent laptop_load.i "Current flowing from pin p to pin n";
 Modelica.SIunits.ElectricPotential laptop_load.p.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent laptop_load.p.i "Current flowing into the pin";
 Modelica.SIunits.ElectricPotential laptop_load.n.v "Potential at the pin";
 Modelica.SIunits.ElectricCurrent laptop_load.n.i "Current flowing into the pin";
 discrete HPF.Utilities.ComponentProperties zone_1.properties(ComponentType = "ThermalZone");
 Modelica.Blocks.Interfaces.RealInput zone_1.u;
 Real zone_1.dummyRealVar_1;
 discrete HPF.Utilities.ComponentProperties zone_2.properties(ComponentType = "ThermalZone");
 Modelica.Blocks.Interfaces.RealInput zone_2.u;
 Real zone_2.dummyRealVar_1;
initial equation
 algorithm
;
parameter equation
 assert({32, 1} == Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "magV"), "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert({{0.016839795751254}, {491.28990594667346}, {0.4635405644252304}, {1.0463774223253857}, {0.2331345715632324}, {1.6598617132749682}, {0.1518565411422124}, {1.9105967094709126}, {0.1386948308207945}, {0.5251811665424375}, {0.0877197456635834}, {1.9262797730195742}, {0.1184440683532766}, {0.481422982261235}, {0.0544090284431237}, {0.1451474507152328}, {0.0258533576473125}, {0.8951740935763725}, {0.035779586777545}, {0.1306259620277833}, {0.1030772087446648}, {0.0294340894198748}, {0.0944957041462652}, {0.3245085302933516}, {0.0390577054549229}, {0.0340450317134204}, {0.1097767013072763}, {0.0470594525429294}, {0.1228566379285578}, {0.2164928463914955}, {0.0342300079933074}, {0.0348258926394183}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "magV", 32, 1, true), "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({{1.5707963267948966}, {0.0077560921535743}, {-0.0852246972433012}, {0.1337983605530348}, {-0.5679607507970243}, {0.3371965305429522}, {-0.0199975129308559}, {-2.4142373069782015}, {0.6504198353240805}, {-2.715056952812912}, {0.5102162003333609}, {-0.1108023593667606}, {-0.262421590602965}, {1.7236257613676265}, {1.1515321243259355}, {-0.2477226727538361}, {-1.7754828141248986}, {2.663073916674371}, {-0.0318137713960557}, {0.2993721368277082}, {1.1393837225179722}, {2.391777148898547}, {1.5648231015885503}, {-0.356629080481576}, {0.2671820434478699}, {2.3096759301950636}, {0.1696844071201723}, {-0.0763985737214103}, {0.5594469031924515}, {-1.2997703855896772}, {0.4481215218879092}, {0.9517083118310508}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "argV", 32, 1, true), "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({32, 1} == Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "magV"), "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert({{0.2859962329521695}, {492.3540794785275}, {0.208496948122041}, {1.1805408036097413}, {0.1693263989961228}, {0.9106214363027906}, {0.1195391546137544}, {1.6580541328073826}, {0.1269101445860712}, {0.3289985189761305}, {0.0946942856942096}, {2.0198413017769763}, {0.0836821242552161}, {0.4924159700118574}, {0.0668687465332885}, {0.1143872931492812}, {0.076898954125649}, {0.9655752395607782}, {0.0349853026484666}, {0.226897033607389}, {0.098402544910626}, {0.0652517506228442}, {0.08011082638466}, {0.1620678510443835}, {0.0400637050971903}, {0.0561736562706734}, {0.1331380625697481}, {0.0296172064955882}, {0.094827068391166}, {0.2157544231279243}, {0.0180623326640486}, {0.0434623170353308}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "magV", 32, 1, true), "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({{1.5707963267948966}, {-2.086840476097504}, {-2.5253242170980594}, {-1.8115418295128152}, {2.8595229031828926}, {2.8739733224576094}, {-2.8607178229132786}, {2.073331261624584}, {-2.9351292614081848}, {-0.1551377562798652}, {-1.6094031270218976}, {2.1810033665310717}, {2.8832395214114577}, {-0.0631873306821448}, {-2.133736341444569}, {-2.9370100120292153}, {1.5326277680479188}, {-1.4355335492083865}, {-2.7058834666324927}, {-1.82542395065559}, {-2.9017038801663326}, {-1.6471531147838383}, {-0.2664005312148152}, {2.233387596536119}, {-2.373672554709982}, {0.8816266227593619}, {2.17935104062631}, {2.36233434884658}, {-1.275072088990568}, {0.9083106039150173}, {-2.5000963969047283}, {2.7980169261979593}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "argV", 32, 1, true), "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({32, 1} == Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "magV"), "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert({{0.2719091281810751}, {491.7835718293929}, {0.3388220554753613}, {1.2560872424865368}, {0.0837965376619556}, {1.049579074569396}, {0.0479633900797327}, {2.232243217516371}, {0.0613261670877852}, {0.3085661753673511}, {0.0894017215045658}, {1.6340384052716668}, {0.0360394590491708}, {0.6080350350042865}, {0.0144866764815914}, {0.0616593186094572}, {0.0526340810138655}, {0.8610409933552359}, {0.0223544380084765}, {0.1965193072432281}, {0.0820234182998287}, {0.0475998645936773}, {0.1031046389723781}, {0.2083187534520808}, {0.0208153705589776}, {0.0678806501902422}, {0.1312213892402629}, {0.0355695042062854}, {0.1405141155536664}, {0.1917926361699222}, {0.0151716866761024}, {0.0441299911973412}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "magV", 32, 1, true), "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({{-1.5707963267948966}, {2.1002127315831656}, {2.626463259293345}, {2.213433315249527}, {1.9305801732284436}, {-2.287526674673138}, {2.4365080165904245}, {-0.0814742736872363}, {-1.384994505036182}, {1.0470875569304956}, {2.631009325075965}, {-2.0524997537545646}, {3.1325135086188496}, {-2.3307335874922797}, {0.0369170525554631}, {1.98109019446484}, {-1.5401794110408888}, {0.6878100982576986}, {1.8960282037310516}, {1.905818739906312}, {-0.8685007111657533}, {0.9586173036243184}, {-2.359173994218259}, {-3.0830059554674554}, {2.345527303073058}, {-1.6859722132521102}, {-1.8371613968199139}, {-2.6180299851214954}, {2.891302880891181}, {2.9641683759106843}, {3.108553064967207}, {-1.056675653397591}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "argV", 32, 1, true), "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({16, 1} == Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "mag"), "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert({{0.9999999999999999}, {0.9486974344201337}, {0.9221155376813399}, {0.8849332521469448}, {0.8475867045468796}, {0.7944241839808487}, {0.7230242274654483}, {0.6688914048386135}, {0.5939253865608557}, {0.5280196623121391}, {0.4568186887780485}, {0.3861474201640431}, {0.3163533253631282}, {0.2534864723066213}, {0.1920046370077911}, {0.1442126307974456}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "mag", 16, 1, true), "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({{0.3053419323150846}, {-2.8182357929499515}, {0.5364901833841553}, {-2.381193752481799}, {0.9688071004089418}, {-1.959495555161772}, {1.4013739855750704}, {-1.5329775105321843}, {1.8276649690040103}, {-1.1106883983886444}, {2.2426384598738585}, {-0.6809000975704675}, {2.648460001811645}, {-0.2835615514742411}, {3.0642644296286683}, {0.0716470412434909}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "arg", 16, 1, true), "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({16, 1} == Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "mag"), "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert({{1.0}, {0.890432111870432}, {0.7418107134668804}, {0.567293049298617}, {0.3936692199400683}, {0.2525656583874291}, {0.1565031895698116}, {0.1085784608235925}, {0.1028049066991282}, {0.1116701804666674}, {0.1074207968075735}, {0.0874748765804625}, {0.05783641101013}, {0.0366390283673692}, {0.0289014631844665}, {0.0275187725558538}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "mag", 16, 1, true), "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert({{0.3875666016022497}, {-2.1789648209071406}, {1.6302868785533633}, {-0.7953249928799604}, {3.1273318832610917}, {0.8908122903345195}, {-1.1864005972204819}, {-2.999284764233698}, {1.4699218316090397}, {-0.606821589236838}, {-2.844685963688736}, {1.1601646456077166}, {-1.0323815181519134}, {-2.9611753908140344}, {1.5581822303336441}, {-0.353240856878104}} == Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "arg", 16, 1, true), "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
algorithm
equation
 PhA.omega = 2 * 3.141592653589793 * systemDef.fFund;
 PhA.v[1:8].re = {0.016839795751254, 491.28990594667346, 0.4635405644252304, 1.0463774223253857, 0.2331345715632324, 1.6598617132749682, 0.1518565411422124, 1.9105967094709126} .* cos({1.5707963267948966, 0.0077560921535743, -0.0852246972433012, 0.1337983605530348, -0.5679607507970243, 0.3371965305429522, -0.0199975129308559, -2.4142373069782015});
 PhA.v[1:8].im = {0.016839795751254, 491.28990594667346, 0.4635405644252304, 1.0463774223253857, 0.2331345715632324, 1.6598617132749682, 0.1518565411422124, 1.9105967094709126} .* sin({1.5707963267948966, 0.0077560921535743, -0.0852246972433012, 0.1337983605530348, -0.5679607507970243, 0.3371965305429522, -0.0199975129308559, -2.4142373069782015});
 PhA.pin_p.reference.theta = PhA.pin_n.reference.theta;
 PhA.omega = der(PhA.pin_p.reference.theta);
 PhA.v[1:8] = {Complex.'-'.subtract(PhA.pin_p.v[1], PhA.pin_n.v[1]), Complex.'-'.subtract(PhA.pin_p.v[2], PhA.pin_n.v[2]), Complex.'-'.subtract(PhA.pin_p.v[3], PhA.pin_n.v[3]), Complex.'-'.subtract(PhA.pin_p.v[4], PhA.pin_n.v[4]), Complex.'-'.subtract(PhA.pin_p.v[5], PhA.pin_n.v[5]), Complex.'-'.subtract(PhA.pin_p.v[6], PhA.pin_n.v[6]), Complex.'-'.subtract(PhA.pin_p.v[7], PhA.pin_n.v[7]), Complex.'-'.subtract(PhA.pin_p.v[8], PhA.pin_n.v[8])};
 PhA.i[1:8].re = PhA.pin_p.iRe[1:8];
 PhA.i[1:8].im = PhA.pin_p.iIm[1:8];
 PhA.pin_p.iRe[1:8] + PhA.pin_n.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 PhA.pin_p.iIm[1:8] + PhA.pin_n.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 PhB.omega = 2 * 3.141592653589793 * systemDef.fFund;
 PhB.v[1:8].re = {0.2859962329521695, 492.3540794785275, 0.208496948122041, 1.1805408036097413, 0.1693263989961228, 0.9106214363027906, 0.1195391546137544, 1.6580541328073826} .* cos({1.5707963267948966, -2.086840476097504, -2.5253242170980594, -1.8115418295128152, 2.8595229031828926, 2.8739733224576094, -2.8607178229132786, 2.073331261624584});
 PhB.v[1:8].im = {0.2859962329521695, 492.3540794785275, 0.208496948122041, 1.1805408036097413, 0.1693263989961228, 0.9106214363027906, 0.1195391546137544, 1.6580541328073826} .* sin({1.5707963267948966, -2.086840476097504, -2.5253242170980594, -1.8115418295128152, 2.8595229031828926, 2.8739733224576094, -2.8607178229132786, 2.073331261624584});
 PhB.pin_p.reference.theta = PhB.pin_n.reference.theta;
 PhB.omega = der(PhB.pin_p.reference.theta);
 PhB.v[1:8] = {Complex.'-'.subtract(PhB.pin_p.v[1], PhB.pin_n.v[1]), Complex.'-'.subtract(PhB.pin_p.v[2], PhB.pin_n.v[2]), Complex.'-'.subtract(PhB.pin_p.v[3], PhB.pin_n.v[3]), Complex.'-'.subtract(PhB.pin_p.v[4], PhB.pin_n.v[4]), Complex.'-'.subtract(PhB.pin_p.v[5], PhB.pin_n.v[5]), Complex.'-'.subtract(PhB.pin_p.v[6], PhB.pin_n.v[6]), Complex.'-'.subtract(PhB.pin_p.v[7], PhB.pin_n.v[7]), Complex.'-'.subtract(PhB.pin_p.v[8], PhB.pin_n.v[8])};
 PhB.i[1:8].re = PhB.pin_p.iRe[1:8];
 PhB.i[1:8].im = PhB.pin_p.iIm[1:8];
 PhB.pin_p.iRe[1:8] + PhB.pin_n.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 PhB.pin_p.iIm[1:8] + PhB.pin_n.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 PhC.omega = 2 * 3.141592653589793 * systemDef.fFund;
 PhC.v[1:8].re = {0.2719091281810751, 491.7835718293929, 0.3388220554753613, 1.2560872424865368, 0.0837965376619556, 1.049579074569396, 0.0479633900797327, 2.232243217516371} .* cos({-1.5707963267948966, 2.1002127315831656, 2.626463259293345, 2.213433315249527, 1.9305801732284436, -2.287526674673138, 2.4365080165904245, -0.0814742736872363});
 PhC.v[1:8].im = {0.2719091281810751, 491.7835718293929, 0.3388220554753613, 1.2560872424865368, 0.0837965376619556, 1.049579074569396, 0.0479633900797327, 2.232243217516371} .* sin({-1.5707963267948966, 2.1002127315831656, 2.626463259293345, 2.213433315249527, 1.9305801732284436, -2.287526674673138, 2.4365080165904245, -0.0814742736872363});
 PhC.pin_p.reference.theta = PhC.pin_n.reference.theta;
 PhC.omega = der(PhC.pin_p.reference.theta);
 PhC.v[1:8] = {Complex.'-'.subtract(PhC.pin_p.v[1], PhC.pin_n.v[1]), Complex.'-'.subtract(PhC.pin_p.v[2], PhC.pin_n.v[2]), Complex.'-'.subtract(PhC.pin_p.v[3], PhC.pin_n.v[3]), Complex.'-'.subtract(PhC.pin_p.v[4], PhC.pin_n.v[4]), Complex.'-'.subtract(PhC.pin_p.v[5], PhC.pin_n.v[5]), Complex.'-'.subtract(PhC.pin_p.v[6], PhC.pin_n.v[6]), Complex.'-'.subtract(PhC.pin_p.v[7], PhC.pin_n.v[7]), Complex.'-'.subtract(PhC.pin_p.v[8], PhC.pin_n.v[8])};
 PhC.i[1:8].re = PhC.pin_p.iRe[1:8];
 PhC.i[1:8].im = PhC.pin_p.iIm[1:8];
 PhC.pin_p.iRe[1:8] + PhC.pin_n.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 PhC.pin_p.iIm[1:8] + PhC.pin_n.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer1.vSec[1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[7]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.vPrim[8])};
 test_DY.idealTransformer1.iSec[1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[7]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer1.N, 0), test_DY.idealTransformer1.iPrim[8])};
 test_DY.idealTransformer1.pinP_Prim.reference.theta = test_DY.idealTransformer1.pinN_Prim.reference.theta;
 test_DY.idealTransformer1.pinP_Prim.reference.theta = test_DY.idealTransformer1.pinP_Sec.reference.theta;
 test_DY.idealTransformer1.pinN_Prim.reference.theta = test_DY.idealTransformer1.pinN_Sec.reference.theta;
 test_DY.idealTransformer1.vPrim[1:8] = {Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[1], test_DY.idealTransformer1.pinN_Prim.v[1]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[2], test_DY.idealTransformer1.pinN_Prim.v[2]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[3], test_DY.idealTransformer1.pinN_Prim.v[3]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[4], test_DY.idealTransformer1.pinN_Prim.v[4]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[5], test_DY.idealTransformer1.pinN_Prim.v[5]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[6], test_DY.idealTransformer1.pinN_Prim.v[6]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[7], test_DY.idealTransformer1.pinN_Prim.v[7]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Prim.v[8], test_DY.idealTransformer1.pinN_Prim.v[8])};
 test_DY.idealTransformer1.vSec[1:8] = {Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[1], test_DY.idealTransformer1.pinN_Sec.v[1]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[2], test_DY.idealTransformer1.pinN_Sec.v[2]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[3], test_DY.idealTransformer1.pinN_Sec.v[3]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[4], test_DY.idealTransformer1.pinN_Sec.v[4]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[5], test_DY.idealTransformer1.pinN_Sec.v[5]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[6], test_DY.idealTransformer1.pinN_Sec.v[6]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[7], test_DY.idealTransformer1.pinN_Sec.v[7]), Complex.'-'.subtract(test_DY.idealTransformer1.pinP_Sec.v[8], test_DY.idealTransformer1.pinN_Sec.v[8])};
 test_DY.idealTransformer1.iPrim[1:8].re = test_DY.idealTransformer1.pinP_Prim.iRe[1:8];
 test_DY.idealTransformer1.iPrim[1:8].im = test_DY.idealTransformer1.pinP_Prim.iIm[1:8];
 test_DY.idealTransformer1.iSec[1:8].re = test_DY.idealTransformer1.pinP_Sec.iRe[1:8];
 test_DY.idealTransformer1.iSec[1:8].im = test_DY.idealTransformer1.pinP_Sec.iIm[1:8];
 test_DY.idealTransformer1.pinP_Prim.iRe[1:8] + test_DY.idealTransformer1.pinN_Prim.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer1.pinP_Prim.iIm[1:8] + test_DY.idealTransformer1.pinN_Prim.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer1.pinP_Sec.iRe[1:8] + test_DY.idealTransformer1.pinN_Sec.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer1.pinP_Sec.iIm[1:8] + test_DY.idealTransformer1.pinN_Sec.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer2.vSec[1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[7]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.vPrim[8])};
 test_DY.idealTransformer2.iSec[1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[7]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer2.N, 0), test_DY.idealTransformer2.iPrim[8])};
 test_DY.idealTransformer2.pinP_Prim.reference.theta = test_DY.idealTransformer2.pinN_Prim.reference.theta;
 test_DY.idealTransformer2.pinP_Prim.reference.theta = test_DY.idealTransformer2.pinP_Sec.reference.theta;
 test_DY.idealTransformer2.pinN_Prim.reference.theta = test_DY.idealTransformer2.pinN_Sec.reference.theta;
 test_DY.idealTransformer2.vPrim[1:8] = {Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[1], test_DY.idealTransformer2.pinN_Prim.v[1]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[2], test_DY.idealTransformer2.pinN_Prim.v[2]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[3], test_DY.idealTransformer2.pinN_Prim.v[3]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[4], test_DY.idealTransformer2.pinN_Prim.v[4]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[5], test_DY.idealTransformer2.pinN_Prim.v[5]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[6], test_DY.idealTransformer2.pinN_Prim.v[6]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[7], test_DY.idealTransformer2.pinN_Prim.v[7]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Prim.v[8], test_DY.idealTransformer2.pinN_Prim.v[8])};
 test_DY.idealTransformer2.vSec[1:8] = {Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[1], test_DY.idealTransformer2.pinN_Sec.v[1]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[2], test_DY.idealTransformer2.pinN_Sec.v[2]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[3], test_DY.idealTransformer2.pinN_Sec.v[3]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[4], test_DY.idealTransformer2.pinN_Sec.v[4]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[5], test_DY.idealTransformer2.pinN_Sec.v[5]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[6], test_DY.idealTransformer2.pinN_Sec.v[6]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[7], test_DY.idealTransformer2.pinN_Sec.v[7]), Complex.'-'.subtract(test_DY.idealTransformer2.pinP_Sec.v[8], test_DY.idealTransformer2.pinN_Sec.v[8])};
 test_DY.idealTransformer2.iPrim[1:8].re = test_DY.idealTransformer2.pinP_Prim.iRe[1:8];
 test_DY.idealTransformer2.iPrim[1:8].im = test_DY.idealTransformer2.pinP_Prim.iIm[1:8];
 test_DY.idealTransformer2.iSec[1:8].re = test_DY.idealTransformer2.pinP_Sec.iRe[1:8];
 test_DY.idealTransformer2.iSec[1:8].im = test_DY.idealTransformer2.pinP_Sec.iIm[1:8];
 test_DY.idealTransformer2.pinP_Prim.iRe[1:8] + test_DY.idealTransformer2.pinN_Prim.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer2.pinP_Prim.iIm[1:8] + test_DY.idealTransformer2.pinN_Prim.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer2.pinP_Sec.iRe[1:8] + test_DY.idealTransformer2.pinN_Sec.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer2.pinP_Sec.iIm[1:8] + test_DY.idealTransformer2.pinN_Sec.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer3.vSec[1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[7]), Complex.'*'.multiply(Complex.'constructor'.fromReal(1 / test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.vPrim[8])};
 test_DY.idealTransformer3.iSec[1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[7]), Complex.'*'.multiply(Complex.'constructor'.fromReal(test_DY.idealTransformer3.N, 0), test_DY.idealTransformer3.iPrim[8])};
 test_DY.idealTransformer3.pinP_Prim.reference.theta = test_DY.idealTransformer3.pinN_Prim.reference.theta;
 test_DY.idealTransformer3.pinP_Prim.reference.theta = test_DY.idealTransformer3.pinP_Sec.reference.theta;
 test_DY.idealTransformer3.pinN_Prim.reference.theta = test_DY.idealTransformer3.pinN_Sec.reference.theta;
 test_DY.idealTransformer3.vPrim[1:8] = {Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[1], test_DY.idealTransformer3.pinN_Prim.v[1]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[2], test_DY.idealTransformer3.pinN_Prim.v[2]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[3], test_DY.idealTransformer3.pinN_Prim.v[3]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[4], test_DY.idealTransformer3.pinN_Prim.v[4]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[5], test_DY.idealTransformer3.pinN_Prim.v[5]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[6], test_DY.idealTransformer3.pinN_Prim.v[6]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[7], test_DY.idealTransformer3.pinN_Prim.v[7]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Prim.v[8], test_DY.idealTransformer3.pinN_Prim.v[8])};
 test_DY.idealTransformer3.vSec[1:8] = {Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[1], test_DY.idealTransformer3.pinN_Sec.v[1]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[2], test_DY.idealTransformer3.pinN_Sec.v[2]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[3], test_DY.idealTransformer3.pinN_Sec.v[3]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[4], test_DY.idealTransformer3.pinN_Sec.v[4]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[5], test_DY.idealTransformer3.pinN_Sec.v[5]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[6], test_DY.idealTransformer3.pinN_Sec.v[6]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[7], test_DY.idealTransformer3.pinN_Sec.v[7]), Complex.'-'.subtract(test_DY.idealTransformer3.pinP_Sec.v[8], test_DY.idealTransformer3.pinN_Sec.v[8])};
 test_DY.idealTransformer3.iPrim[1:8].re = test_DY.idealTransformer3.pinP_Prim.iRe[1:8];
 test_DY.idealTransformer3.iPrim[1:8].im = test_DY.idealTransformer3.pinP_Prim.iIm[1:8];
 test_DY.idealTransformer3.iSec[1:8].re = test_DY.idealTransformer3.pinP_Sec.iRe[1:8];
 test_DY.idealTransformer3.iSec[1:8].im = test_DY.idealTransformer3.pinP_Sec.iIm[1:8];
 test_DY.idealTransformer3.pinP_Prim.iRe[1:8] + test_DY.idealTransformer3.pinN_Prim.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer3.pinP_Prim.iIm[1:8] + test_DY.idealTransformer3.pinN_Prim.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer3.pinP_Sec.iRe[1:8] + test_DY.idealTransformer3.pinN_Sec.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 test_DY.idealTransformer3.pinP_Sec.iIm[1:8] + test_DY.idealTransformer3.pinN_Sec.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 if Connections.isRoot(ground.pin.reference) then
  ground.pin.reference.theta = 0;
 end if;
 ground.pin.v[1:8] = {Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0)};
 laptop2.argS = -0.3053419323150846;
 laptop2.P = laptop2.S * cos(laptop2.argS);
 laptop2.Q = laptop2.S * sin(laptop2.argS);
 Complex.'constructor'.fromReal(laptop2.P, laptop2.Q) = Complex.'*'.multiply(laptop2.loadBase.v[1], Modelica.ComplexMath.conj(laptop2.loadBase.i[1]));
 laptop2.loadBase.i[2:1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(laptop2.c[1], 0), laptop2.a[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(laptop2.c[2], 0), laptop2.a[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(laptop2.c[3], 0), laptop2.a[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(laptop2.c[4], 0), laptop2.a[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(laptop2.c[5], 0), laptop2.a[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(laptop2.c[6], 0), laptop2.a[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(laptop2.c[7], 0), laptop2.a[7])};
 laptop2.PLoss = laptop2.P * (1 - laptop2.efficiency) / laptop2.efficiency;
algorithm
equation
 laptop2.vDC.v = laptop2.vDC.V;
 laptop2.vDC.v = laptop2.vDC.p.v - laptop2.vDC.n.v;
 0 = laptop2.vDC.p.i + laptop2.vDC.n.i;
 laptop2.vDC.i = laptop2.vDC.p.i;
 laptop2.loadBase.pin_p.reference.theta = laptop2.loadBase.pin_n.reference.theta;
 laptop2.loadBase.omega = der(laptop2.loadBase.pin_p.reference.theta);
 laptop2.loadBase.v[1:8] = {Complex.'-'.subtract(laptop2.loadBase.pin_p.v[1], laptop2.loadBase.pin_n.v[1]), Complex.'-'.subtract(laptop2.loadBase.pin_p.v[2], laptop2.loadBase.pin_n.v[2]), Complex.'-'.subtract(laptop2.loadBase.pin_p.v[3], laptop2.loadBase.pin_n.v[3]), Complex.'-'.subtract(laptop2.loadBase.pin_p.v[4], laptop2.loadBase.pin_n.v[4]), Complex.'-'.subtract(laptop2.loadBase.pin_p.v[5], laptop2.loadBase.pin_n.v[5]), Complex.'-'.subtract(laptop2.loadBase.pin_p.v[6], laptop2.loadBase.pin_n.v[6]), Complex.'-'.subtract(laptop2.loadBase.pin_p.v[7], laptop2.loadBase.pin_n.v[7]), Complex.'-'.subtract(laptop2.loadBase.pin_p.v[8], laptop2.loadBase.pin_n.v[8])};
 laptop2.loadBase.i[1:8].re = laptop2.loadBase.pin_p.iRe[1:8];
 laptop2.loadBase.i[1:8].im = laptop2.loadBase.pin_p.iIm[1:8];
 laptop2.loadBase.pin_p.iRe[1:8] + laptop2.loadBase.pin_n.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 laptop2.loadBase.pin_p.iIm[1:8] + laptop2.loadBase.pin_n.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 led_driver.argS = -0.3875666016022497;
 led_driver.P = led_driver.S * cos(led_driver.argS);
 led_driver.Q = led_driver.S * sin(led_driver.argS);
 Complex.'constructor'.fromReal(led_driver.P, led_driver.Q) = Complex.'*'.multiply(led_driver.loadBase.v[1], Modelica.ComplexMath.conj(led_driver.loadBase.i[1]));
 led_driver.loadBase.i[2:1:8] = {Complex.'*'.multiply(Complex.'constructor'.fromReal(led_driver.c[1], 0), led_driver.a[1]), Complex.'*'.multiply(Complex.'constructor'.fromReal(led_driver.c[2], 0), led_driver.a[2]), Complex.'*'.multiply(Complex.'constructor'.fromReal(led_driver.c[3], 0), led_driver.a[3]), Complex.'*'.multiply(Complex.'constructor'.fromReal(led_driver.c[4], 0), led_driver.a[4]), Complex.'*'.multiply(Complex.'constructor'.fromReal(led_driver.c[5], 0), led_driver.a[5]), Complex.'*'.multiply(Complex.'constructor'.fromReal(led_driver.c[6], 0), led_driver.a[6]), Complex.'*'.multiply(Complex.'constructor'.fromReal(led_driver.c[7], 0), led_driver.a[7])};
 led_driver.PLoss = led_driver.P * (1 - led_driver.efficiency) / led_driver.efficiency;
algorithm
equation
 led_driver.vDC.v = led_driver.vDC.V;
 led_driver.vDC.v = led_driver.vDC.p.v - led_driver.vDC.n.v;
 0 = led_driver.vDC.p.i + led_driver.vDC.n.i;
 led_driver.vDC.i = led_driver.vDC.p.i;
 led_driver.loadBase.pin_p.reference.theta = led_driver.loadBase.pin_n.reference.theta;
 led_driver.loadBase.omega = der(led_driver.loadBase.pin_p.reference.theta);
 led_driver.loadBase.v[1:8] = {Complex.'-'.subtract(led_driver.loadBase.pin_p.v[1], led_driver.loadBase.pin_n.v[1]), Complex.'-'.subtract(led_driver.loadBase.pin_p.v[2], led_driver.loadBase.pin_n.v[2]), Complex.'-'.subtract(led_driver.loadBase.pin_p.v[3], led_driver.loadBase.pin_n.v[3]), Complex.'-'.subtract(led_driver.loadBase.pin_p.v[4], led_driver.loadBase.pin_n.v[4]), Complex.'-'.subtract(led_driver.loadBase.pin_p.v[5], led_driver.loadBase.pin_n.v[5]), Complex.'-'.subtract(led_driver.loadBase.pin_p.v[6], led_driver.loadBase.pin_n.v[6]), Complex.'-'.subtract(led_driver.loadBase.pin_p.v[7], led_driver.loadBase.pin_n.v[7]), Complex.'-'.subtract(led_driver.loadBase.pin_p.v[8], led_driver.loadBase.pin_n.v[8])};
 led_driver.loadBase.i[1:8].re = led_driver.loadBase.pin_p.iRe[1:8];
 led_driver.loadBase.i[1:8].im = led_driver.loadBase.pin_p.iIm[1:8];
 led_driver.loadBase.pin_p.iRe[1:8] + led_driver.loadBase.pin_n.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 led_driver.loadBase.pin_p.iIm[1:8] + led_driver.loadBase.pin_n.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 if Connections.isRoot(ground1.pin.reference) then
  ground1.pin.reference.theta = 0;
 end if;
 ground1.pin.v[1:8] = {Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0), Complex.'constructor'.fromReal(0.0, 0)};
 r.v[1:8].re = r.r .* r.i[1:8].re;
 r.v[1:8].im = r.r .* r.i[1:8].im;
 r.pin_p.reference.theta = r.pin_n.reference.theta;
 r.omega = der(r.pin_p.reference.theta);
 r.v[1:8] = {Complex.'-'.subtract(r.pin_p.v[1], r.pin_n.v[1]), Complex.'-'.subtract(r.pin_p.v[2], r.pin_n.v[2]), Complex.'-'.subtract(r.pin_p.v[3], r.pin_n.v[3]), Complex.'-'.subtract(r.pin_p.v[4], r.pin_n.v[4]), Complex.'-'.subtract(r.pin_p.v[5], r.pin_n.v[5]), Complex.'-'.subtract(r.pin_p.v[6], r.pin_n.v[6]), Complex.'-'.subtract(r.pin_p.v[7], r.pin_n.v[7]), Complex.'-'.subtract(r.pin_p.v[8], r.pin_n.v[8])};
 r.i[1:8].re = r.pin_p.iRe[1:8];
 r.i[1:8].im = r.pin_p.iIm[1:8];
 r.pin_p.iRe[1:8] + r.pin_n.iRe[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 r.pin_p.iIm[1:8] + r.pin_n.iIm[1:8] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
 led_load.i = led_load.pwr / led_load.v;
 led_load.v = led_load.p.v - led_load.n.v;
 0 = led_load.p.i + led_load.n.i;
 led_load.i = led_load.p.i;
 ground2.p.v = 0;
 ground3.p.v = 0;
 laptop_load.i = laptop_load.pwr / laptop_load.v;
 laptop_load.v = laptop_load.p.v - laptop_load.n.v;
 0 = laptop_load.p.i + laptop_load.n.i;
 laptop_load.i = laptop_load.p.i;
 zone_1.u = zone_1.dummyRealVar_1;
 zone_2.u = zone_2.dummyRealVar_1;
 PhA.pin_p.iIm[1:8] + test_DY.pinPrim_A.iIm[1:8] = zeros(8);
 PhA.pin_p.iRe[1:8] + test_DY.pinPrim_A.iRe[1:8] = zeros(8);
 PhA.pin_p.v[1].im = test_DY.pinPrim_A.v[1].im;
 PhA.pin_p.v[1].re = test_DY.pinPrim_A.v[1].re;
 PhA.pin_p.v[2].im = test_DY.pinPrim_A.v[2].im;
 PhA.pin_p.v[2].re = test_DY.pinPrim_A.v[2].re;
 PhA.pin_p.v[3].im = test_DY.pinPrim_A.v[3].im;
 PhA.pin_p.v[3].re = test_DY.pinPrim_A.v[3].re;
 PhA.pin_p.v[4].im = test_DY.pinPrim_A.v[4].im;
 PhA.pin_p.v[4].re = test_DY.pinPrim_A.v[4].re;
 PhA.pin_p.v[5].im = test_DY.pinPrim_A.v[5].im;
 PhA.pin_p.v[5].re = test_DY.pinPrim_A.v[5].re;
 PhA.pin_p.v[6].im = test_DY.pinPrim_A.v[6].im;
 PhA.pin_p.v[6].re = test_DY.pinPrim_A.v[6].re;
 PhA.pin_p.v[7].im = test_DY.pinPrim_A.v[7].im;
 PhA.pin_p.v[7].re = test_DY.pinPrim_A.v[7].re;
 PhA.pin_p.v[8].im = test_DY.pinPrim_A.v[8].im;
 PhA.pin_p.v[8].re = test_DY.pinPrim_A.v[8].re;
 PhB.pin_p.iIm[1:8] + test_DY.pinPrim_B.iIm[1:8] = zeros(8);
 PhB.pin_p.iRe[1:8] + test_DY.pinPrim_B.iRe[1:8] = zeros(8);
 PhB.pin_p.v[1].im = test_DY.pinPrim_B.v[1].im;
 PhB.pin_p.v[1].re = test_DY.pinPrim_B.v[1].re;
 PhB.pin_p.v[2].im = test_DY.pinPrim_B.v[2].im;
 PhB.pin_p.v[2].re = test_DY.pinPrim_B.v[2].re;
 PhB.pin_p.v[3].im = test_DY.pinPrim_B.v[3].im;
 PhB.pin_p.v[3].re = test_DY.pinPrim_B.v[3].re;
 PhB.pin_p.v[4].im = test_DY.pinPrim_B.v[4].im;
 PhB.pin_p.v[4].re = test_DY.pinPrim_B.v[4].re;
 PhB.pin_p.v[5].im = test_DY.pinPrim_B.v[5].im;
 PhB.pin_p.v[5].re = test_DY.pinPrim_B.v[5].re;
 PhB.pin_p.v[6].im = test_DY.pinPrim_B.v[6].im;
 PhB.pin_p.v[6].re = test_DY.pinPrim_B.v[6].re;
 PhB.pin_p.v[7].im = test_DY.pinPrim_B.v[7].im;
 PhB.pin_p.v[7].re = test_DY.pinPrim_B.v[7].re;
 PhB.pin_p.v[8].im = test_DY.pinPrim_B.v[8].im;
 PhB.pin_p.v[8].re = test_DY.pinPrim_B.v[8].re;
 PhC.pin_p.iIm[1:8] + test_DY.pinPrim_C.iIm[1:8] = zeros(8);
 PhC.pin_p.iRe[1:8] + test_DY.pinPrim_C.iRe[1:8] = zeros(8);
 PhC.pin_p.v[1].im = test_DY.pinPrim_C.v[1].im;
 PhC.pin_p.v[1].re = test_DY.pinPrim_C.v[1].re;
 PhC.pin_p.v[2].im = test_DY.pinPrim_C.v[2].im;
 PhC.pin_p.v[2].re = test_DY.pinPrim_C.v[2].re;
 PhC.pin_p.v[3].im = test_DY.pinPrim_C.v[3].im;
 PhC.pin_p.v[3].re = test_DY.pinPrim_C.v[3].re;
 PhC.pin_p.v[4].im = test_DY.pinPrim_C.v[4].im;
 PhC.pin_p.v[4].re = test_DY.pinPrim_C.v[4].re;
 PhC.pin_p.v[5].im = test_DY.pinPrim_C.v[5].im;
 PhC.pin_p.v[5].re = test_DY.pinPrim_C.v[5].re;
 PhC.pin_p.v[6].im = test_DY.pinPrim_C.v[6].im;
 PhC.pin_p.v[6].re = test_DY.pinPrim_C.v[6].re;
 PhC.pin_p.v[7].im = test_DY.pinPrim_C.v[7].im;
 PhC.pin_p.v[7].re = test_DY.pinPrim_C.v[7].re;
 PhC.pin_p.v[8].im = test_DY.pinPrim_C.v[8].im;
 PhC.pin_p.v[8].re = test_DY.pinPrim_C.v[8].re;
 PhA.pin_n.iIm[1:8] + PhB.pin_n.iIm[1:8] + PhC.pin_n.iIm[1:8] + ground.pin.iIm[1:8] = zeros(8);
 PhA.pin_n.iRe[1:8] + PhB.pin_n.iRe[1:8] + PhC.pin_n.iRe[1:8] + ground.pin.iRe[1:8] = zeros(8);
 PhA.pin_n.v[1].im = PhB.pin_n.v[1].im;
 PhB.pin_n.v[1].im = PhC.pin_n.v[1].im;
 PhC.pin_n.v[1].im = ground.pin.v[1].im;
 PhA.pin_n.v[1].re = PhB.pin_n.v[1].re;
 PhB.pin_n.v[1].re = PhC.pin_n.v[1].re;
 PhC.pin_n.v[1].re = ground.pin.v[1].re;
 PhA.pin_n.v[2].im = PhB.pin_n.v[2].im;
 PhB.pin_n.v[2].im = PhC.pin_n.v[2].im;
 PhC.pin_n.v[2].im = ground.pin.v[2].im;
 PhA.pin_n.v[2].re = PhB.pin_n.v[2].re;
 PhB.pin_n.v[2].re = PhC.pin_n.v[2].re;
 PhC.pin_n.v[2].re = ground.pin.v[2].re;
 PhA.pin_n.v[3].im = PhB.pin_n.v[3].im;
 PhB.pin_n.v[3].im = PhC.pin_n.v[3].im;
 PhC.pin_n.v[3].im = ground.pin.v[3].im;
 PhA.pin_n.v[3].re = PhB.pin_n.v[3].re;
 PhB.pin_n.v[3].re = PhC.pin_n.v[3].re;
 PhC.pin_n.v[3].re = ground.pin.v[3].re;
 PhA.pin_n.v[4].im = PhB.pin_n.v[4].im;
 PhB.pin_n.v[4].im = PhC.pin_n.v[4].im;
 PhC.pin_n.v[4].im = ground.pin.v[4].im;
 PhA.pin_n.v[4].re = PhB.pin_n.v[4].re;
 PhB.pin_n.v[4].re = PhC.pin_n.v[4].re;
 PhC.pin_n.v[4].re = ground.pin.v[4].re;
 PhA.pin_n.v[5].im = PhB.pin_n.v[5].im;
 PhB.pin_n.v[5].im = PhC.pin_n.v[5].im;
 PhC.pin_n.v[5].im = ground.pin.v[5].im;
 PhA.pin_n.v[5].re = PhB.pin_n.v[5].re;
 PhB.pin_n.v[5].re = PhC.pin_n.v[5].re;
 PhC.pin_n.v[5].re = ground.pin.v[5].re;
 PhA.pin_n.v[6].im = PhB.pin_n.v[6].im;
 PhB.pin_n.v[6].im = PhC.pin_n.v[6].im;
 PhC.pin_n.v[6].im = ground.pin.v[6].im;
 PhA.pin_n.v[6].re = PhB.pin_n.v[6].re;
 PhB.pin_n.v[6].re = PhC.pin_n.v[6].re;
 PhC.pin_n.v[6].re = ground.pin.v[6].re;
 PhA.pin_n.v[7].im = PhB.pin_n.v[7].im;
 PhB.pin_n.v[7].im = PhC.pin_n.v[7].im;
 PhC.pin_n.v[7].im = ground.pin.v[7].im;
 PhA.pin_n.v[7].re = PhB.pin_n.v[7].re;
 PhB.pin_n.v[7].re = PhC.pin_n.v[7].re;
 PhC.pin_n.v[7].re = ground.pin.v[7].re;
 PhA.pin_n.v[8].im = PhB.pin_n.v[8].im;
 PhB.pin_n.v[8].im = PhC.pin_n.v[8].im;
 PhC.pin_n.v[8].im = ground.pin.v[8].im;
 PhA.pin_n.v[8].re = PhB.pin_n.v[8].re;
 PhB.pin_n.v[8].re = PhC.pin_n.v[8].re;
 PhC.pin_n.v[8].re = ground.pin.v[8].re;
 led_driver.hPin_P.iIm[1:8] + test_DY.pinSec_A.iIm[1:8] = zeros(8);
 led_driver.hPin_P.iRe[1:8] + test_DY.pinSec_A.iRe[1:8] = zeros(8);
 led_driver.hPin_P.v[1].im = test_DY.pinSec_A.v[1].im;
 led_driver.hPin_P.v[1].re = test_DY.pinSec_A.v[1].re;
 led_driver.hPin_P.v[2].im = test_DY.pinSec_A.v[2].im;
 led_driver.hPin_P.v[2].re = test_DY.pinSec_A.v[2].re;
 led_driver.hPin_P.v[3].im = test_DY.pinSec_A.v[3].im;
 led_driver.hPin_P.v[3].re = test_DY.pinSec_A.v[3].re;
 led_driver.hPin_P.v[4].im = test_DY.pinSec_A.v[4].im;
 led_driver.hPin_P.v[4].re = test_DY.pinSec_A.v[4].re;
 led_driver.hPin_P.v[5].im = test_DY.pinSec_A.v[5].im;
 led_driver.hPin_P.v[5].re = test_DY.pinSec_A.v[5].re;
 led_driver.hPin_P.v[6].im = test_DY.pinSec_A.v[6].im;
 led_driver.hPin_P.v[6].re = test_DY.pinSec_A.v[6].re;
 led_driver.hPin_P.v[7].im = test_DY.pinSec_A.v[7].im;
 led_driver.hPin_P.v[7].re = test_DY.pinSec_A.v[7].re;
 led_driver.hPin_P.v[8].im = test_DY.pinSec_A.v[8].im;
 led_driver.hPin_P.v[8].re = test_DY.pinSec_A.v[8].re;
 laptop2.hPin_P.iIm[1:8] + test_DY.pinSec_B.iIm[1:8] = zeros(8);
 laptop2.hPin_P.iRe[1:8] + test_DY.pinSec_B.iRe[1:8] = zeros(8);
 laptop2.hPin_P.v[1].im = test_DY.pinSec_B.v[1].im;
 laptop2.hPin_P.v[1].re = test_DY.pinSec_B.v[1].re;
 laptop2.hPin_P.v[2].im = test_DY.pinSec_B.v[2].im;
 laptop2.hPin_P.v[2].re = test_DY.pinSec_B.v[2].re;
 laptop2.hPin_P.v[3].im = test_DY.pinSec_B.v[3].im;
 laptop2.hPin_P.v[3].re = test_DY.pinSec_B.v[3].re;
 laptop2.hPin_P.v[4].im = test_DY.pinSec_B.v[4].im;
 laptop2.hPin_P.v[4].re = test_DY.pinSec_B.v[4].re;
 laptop2.hPin_P.v[5].im = test_DY.pinSec_B.v[5].im;
 laptop2.hPin_P.v[5].re = test_DY.pinSec_B.v[5].re;
 laptop2.hPin_P.v[6].im = test_DY.pinSec_B.v[6].im;
 laptop2.hPin_P.v[6].re = test_DY.pinSec_B.v[6].re;
 laptop2.hPin_P.v[7].im = test_DY.pinSec_B.v[7].im;
 laptop2.hPin_P.v[7].re = test_DY.pinSec_B.v[7].re;
 laptop2.hPin_P.v[8].im = test_DY.pinSec_B.v[8].im;
 laptop2.hPin_P.v[8].re = test_DY.pinSec_B.v[8].re;
 ground1.pin.iIm[1:8] + laptop2.hPin_N.iIm[1:8] + led_driver.hPin_N.iIm[1:8] + r.pin_n.iIm[1:8] + test_DY.hPin_N.iIm[1:8] = zeros(8);
 ground1.pin.iRe[1:8] + laptop2.hPin_N.iRe[1:8] + led_driver.hPin_N.iRe[1:8] + r.pin_n.iRe[1:8] + test_DY.hPin_N.iRe[1:8] = zeros(8);
 ground1.pin.v[1].im = laptop2.hPin_N.v[1].im;
 laptop2.hPin_N.v[1].im = led_driver.hPin_N.v[1].im;
 led_driver.hPin_N.v[1].im = r.pin_n.v[1].im;
 r.pin_n.v[1].im = test_DY.hPin_N.v[1].im;
 ground1.pin.v[1].re = laptop2.hPin_N.v[1].re;
 laptop2.hPin_N.v[1].re = led_driver.hPin_N.v[1].re;
 led_driver.hPin_N.v[1].re = r.pin_n.v[1].re;
 r.pin_n.v[1].re = test_DY.hPin_N.v[1].re;
 ground1.pin.v[2].im = laptop2.hPin_N.v[2].im;
 laptop2.hPin_N.v[2].im = led_driver.hPin_N.v[2].im;
 led_driver.hPin_N.v[2].im = r.pin_n.v[2].im;
 r.pin_n.v[2].im = test_DY.hPin_N.v[2].im;
 ground1.pin.v[2].re = laptop2.hPin_N.v[2].re;
 laptop2.hPin_N.v[2].re = led_driver.hPin_N.v[2].re;
 led_driver.hPin_N.v[2].re = r.pin_n.v[2].re;
 r.pin_n.v[2].re = test_DY.hPin_N.v[2].re;
 ground1.pin.v[3].im = laptop2.hPin_N.v[3].im;
 laptop2.hPin_N.v[3].im = led_driver.hPin_N.v[3].im;
 led_driver.hPin_N.v[3].im = r.pin_n.v[3].im;
 r.pin_n.v[3].im = test_DY.hPin_N.v[3].im;
 ground1.pin.v[3].re = laptop2.hPin_N.v[3].re;
 laptop2.hPin_N.v[3].re = led_driver.hPin_N.v[3].re;
 led_driver.hPin_N.v[3].re = r.pin_n.v[3].re;
 r.pin_n.v[3].re = test_DY.hPin_N.v[3].re;
 ground1.pin.v[4].im = laptop2.hPin_N.v[4].im;
 laptop2.hPin_N.v[4].im = led_driver.hPin_N.v[4].im;
 led_driver.hPin_N.v[4].im = r.pin_n.v[4].im;
 r.pin_n.v[4].im = test_DY.hPin_N.v[4].im;
 ground1.pin.v[4].re = laptop2.hPin_N.v[4].re;
 laptop2.hPin_N.v[4].re = led_driver.hPin_N.v[4].re;
 led_driver.hPin_N.v[4].re = r.pin_n.v[4].re;
 r.pin_n.v[4].re = test_DY.hPin_N.v[4].re;
 ground1.pin.v[5].im = laptop2.hPin_N.v[5].im;
 laptop2.hPin_N.v[5].im = led_driver.hPin_N.v[5].im;
 led_driver.hPin_N.v[5].im = r.pin_n.v[5].im;
 r.pin_n.v[5].im = test_DY.hPin_N.v[5].im;
 ground1.pin.v[5].re = laptop2.hPin_N.v[5].re;
 laptop2.hPin_N.v[5].re = led_driver.hPin_N.v[5].re;
 led_driver.hPin_N.v[5].re = r.pin_n.v[5].re;
 r.pin_n.v[5].re = test_DY.hPin_N.v[5].re;
 ground1.pin.v[6].im = laptop2.hPin_N.v[6].im;
 laptop2.hPin_N.v[6].im = led_driver.hPin_N.v[6].im;
 led_driver.hPin_N.v[6].im = r.pin_n.v[6].im;
 r.pin_n.v[6].im = test_DY.hPin_N.v[6].im;
 ground1.pin.v[6].re = laptop2.hPin_N.v[6].re;
 laptop2.hPin_N.v[6].re = led_driver.hPin_N.v[6].re;
 led_driver.hPin_N.v[6].re = r.pin_n.v[6].re;
 r.pin_n.v[6].re = test_DY.hPin_N.v[6].re;
 ground1.pin.v[7].im = laptop2.hPin_N.v[7].im;
 laptop2.hPin_N.v[7].im = led_driver.hPin_N.v[7].im;
 led_driver.hPin_N.v[7].im = r.pin_n.v[7].im;
 r.pin_n.v[7].im = test_DY.hPin_N.v[7].im;
 ground1.pin.v[7].re = laptop2.hPin_N.v[7].re;
 laptop2.hPin_N.v[7].re = led_driver.hPin_N.v[7].re;
 led_driver.hPin_N.v[7].re = r.pin_n.v[7].re;
 r.pin_n.v[7].re = test_DY.hPin_N.v[7].re;
 ground1.pin.v[8].im = laptop2.hPin_N.v[8].im;
 laptop2.hPin_N.v[8].im = led_driver.hPin_N.v[8].im;
 led_driver.hPin_N.v[8].im = r.pin_n.v[8].im;
 r.pin_n.v[8].im = test_DY.hPin_N.v[8].im;
 ground1.pin.v[8].re = laptop2.hPin_N.v[8].re;
 laptop2.hPin_N.v[8].re = led_driver.hPin_N.v[8].re;
 led_driver.hPin_N.v[8].re = r.pin_n.v[8].re;
 r.pin_n.v[8].re = test_DY.hPin_N.v[8].re;
 r.pin_p.iIm[1:8] + test_DY.pinSec_C.iIm[1:8] = zeros(8);
 r.pin_p.iRe[1:8] + test_DY.pinSec_C.iRe[1:8] = zeros(8);
 r.pin_p.v[1].im = test_DY.pinSec_C.v[1].im;
 r.pin_p.v[1].re = test_DY.pinSec_C.v[1].re;
 r.pin_p.v[2].im = test_DY.pinSec_C.v[2].im;
 r.pin_p.v[2].re = test_DY.pinSec_C.v[2].re;
 r.pin_p.v[3].im = test_DY.pinSec_C.v[3].im;
 r.pin_p.v[3].re = test_DY.pinSec_C.v[3].re;
 r.pin_p.v[4].im = test_DY.pinSec_C.v[4].im;
 r.pin_p.v[4].re = test_DY.pinSec_C.v[4].re;
 r.pin_p.v[5].im = test_DY.pinSec_C.v[5].im;
 r.pin_p.v[5].re = test_DY.pinSec_C.v[5].re;
 r.pin_p.v[6].im = test_DY.pinSec_C.v[6].im;
 r.pin_p.v[6].re = test_DY.pinSec_C.v[6].re;
 r.pin_p.v[7].im = test_DY.pinSec_C.v[7].im;
 r.pin_p.v[7].re = test_DY.pinSec_C.v[7].re;
 r.pin_p.v[8].im = test_DY.pinSec_C.v[8].im;
 r.pin_p.v[8].re = test_DY.pinSec_C.v[8].re;
 ground2.p.i + led_driver.pin_n.i + led_load.n.i = 0.0;
 ground2.p.v = led_driver.pin_n.v;
 led_driver.pin_n.v = led_load.n.v;
 led_driver.pin_p.i + led_load.p.i = 0.0;
 led_driver.pin_p.v = led_load.p.v;
 laptop2.pin_p.i + laptop_load.p.i = 0.0;
 laptop2.pin_p.v = laptop_load.p.v;
 ground3.p.i + laptop2.pin_n.i + laptop_load.n.i = 0.0;
 ground3.p.v = laptop2.pin_n.v;
 laptop2.pin_n.v = laptop_load.n.v;
 led_driver.PLoss = zone_1.u;
 laptop2.PLoss = zone_2.u;
 test_DY.idealTransformer1.pinP_Prim.iIm[1:8] + test_DY.idealTransformer2.pinN_Prim.iIm[1:8] - test_DY.pinPrim_A.iIm[1:8] = zeros(8);
 test_DY.idealTransformer1.pinP_Prim.iRe[1:8] + test_DY.idealTransformer2.pinN_Prim.iRe[1:8] - test_DY.pinPrim_A.iRe[1:8] = zeros(8);
 test_DY.idealTransformer1.pinP_Prim.v[1].im = test_DY.idealTransformer2.pinN_Prim.v[1].im;
 test_DY.idealTransformer2.pinN_Prim.v[1].im = test_DY.pinPrim_A.v[1].im;
 test_DY.idealTransformer1.pinP_Prim.v[1].re = test_DY.idealTransformer2.pinN_Prim.v[1].re;
 test_DY.idealTransformer2.pinN_Prim.v[1].re = test_DY.pinPrim_A.v[1].re;
 test_DY.idealTransformer1.pinP_Prim.v[2].im = test_DY.idealTransformer2.pinN_Prim.v[2].im;
 test_DY.idealTransformer2.pinN_Prim.v[2].im = test_DY.pinPrim_A.v[2].im;
 test_DY.idealTransformer1.pinP_Prim.v[2].re = test_DY.idealTransformer2.pinN_Prim.v[2].re;
 test_DY.idealTransformer2.pinN_Prim.v[2].re = test_DY.pinPrim_A.v[2].re;
 test_DY.idealTransformer1.pinP_Prim.v[3].im = test_DY.idealTransformer2.pinN_Prim.v[3].im;
 test_DY.idealTransformer2.pinN_Prim.v[3].im = test_DY.pinPrim_A.v[3].im;
 test_DY.idealTransformer1.pinP_Prim.v[3].re = test_DY.idealTransformer2.pinN_Prim.v[3].re;
 test_DY.idealTransformer2.pinN_Prim.v[3].re = test_DY.pinPrim_A.v[3].re;
 test_DY.idealTransformer1.pinP_Prim.v[4].im = test_DY.idealTransformer2.pinN_Prim.v[4].im;
 test_DY.idealTransformer2.pinN_Prim.v[4].im = test_DY.pinPrim_A.v[4].im;
 test_DY.idealTransformer1.pinP_Prim.v[4].re = test_DY.idealTransformer2.pinN_Prim.v[4].re;
 test_DY.idealTransformer2.pinN_Prim.v[4].re = test_DY.pinPrim_A.v[4].re;
 test_DY.idealTransformer1.pinP_Prim.v[5].im = test_DY.idealTransformer2.pinN_Prim.v[5].im;
 test_DY.idealTransformer2.pinN_Prim.v[5].im = test_DY.pinPrim_A.v[5].im;
 test_DY.idealTransformer1.pinP_Prim.v[5].re = test_DY.idealTransformer2.pinN_Prim.v[5].re;
 test_DY.idealTransformer2.pinN_Prim.v[5].re = test_DY.pinPrim_A.v[5].re;
 test_DY.idealTransformer1.pinP_Prim.v[6].im = test_DY.idealTransformer2.pinN_Prim.v[6].im;
 test_DY.idealTransformer2.pinN_Prim.v[6].im = test_DY.pinPrim_A.v[6].im;
 test_DY.idealTransformer1.pinP_Prim.v[6].re = test_DY.idealTransformer2.pinN_Prim.v[6].re;
 test_DY.idealTransformer2.pinN_Prim.v[6].re = test_DY.pinPrim_A.v[6].re;
 test_DY.idealTransformer1.pinP_Prim.v[7].im = test_DY.idealTransformer2.pinN_Prim.v[7].im;
 test_DY.idealTransformer2.pinN_Prim.v[7].im = test_DY.pinPrim_A.v[7].im;
 test_DY.idealTransformer1.pinP_Prim.v[7].re = test_DY.idealTransformer2.pinN_Prim.v[7].re;
 test_DY.idealTransformer2.pinN_Prim.v[7].re = test_DY.pinPrim_A.v[7].re;
 test_DY.idealTransformer1.pinP_Prim.v[8].im = test_DY.idealTransformer2.pinN_Prim.v[8].im;
 test_DY.idealTransformer2.pinN_Prim.v[8].im = test_DY.pinPrim_A.v[8].im;
 test_DY.idealTransformer1.pinP_Prim.v[8].re = test_DY.idealTransformer2.pinN_Prim.v[8].re;
 test_DY.idealTransformer2.pinN_Prim.v[8].re = test_DY.pinPrim_A.v[8].re;
 test_DY.idealTransformer1.pinN_Prim.iIm[1:8] + test_DY.idealTransformer3.pinP_Prim.iIm[1:8] - test_DY.pinPrim_C.iIm[1:8] = zeros(8);
 test_DY.idealTransformer1.pinN_Prim.iRe[1:8] + test_DY.idealTransformer3.pinP_Prim.iRe[1:8] - test_DY.pinPrim_C.iRe[1:8] = zeros(8);
 test_DY.idealTransformer1.pinN_Prim.v[1].im = test_DY.idealTransformer3.pinP_Prim.v[1].im;
 test_DY.idealTransformer3.pinP_Prim.v[1].im = test_DY.pinPrim_C.v[1].im;
 test_DY.idealTransformer1.pinN_Prim.v[1].re = test_DY.idealTransformer3.pinP_Prim.v[1].re;
 test_DY.idealTransformer3.pinP_Prim.v[1].re = test_DY.pinPrim_C.v[1].re;
 test_DY.idealTransformer1.pinN_Prim.v[2].im = test_DY.idealTransformer3.pinP_Prim.v[2].im;
 test_DY.idealTransformer3.pinP_Prim.v[2].im = test_DY.pinPrim_C.v[2].im;
 test_DY.idealTransformer1.pinN_Prim.v[2].re = test_DY.idealTransformer3.pinP_Prim.v[2].re;
 test_DY.idealTransformer3.pinP_Prim.v[2].re = test_DY.pinPrim_C.v[2].re;
 test_DY.idealTransformer1.pinN_Prim.v[3].im = test_DY.idealTransformer3.pinP_Prim.v[3].im;
 test_DY.idealTransformer3.pinP_Prim.v[3].im = test_DY.pinPrim_C.v[3].im;
 test_DY.idealTransformer1.pinN_Prim.v[3].re = test_DY.idealTransformer3.pinP_Prim.v[3].re;
 test_DY.idealTransformer3.pinP_Prim.v[3].re = test_DY.pinPrim_C.v[3].re;
 test_DY.idealTransformer1.pinN_Prim.v[4].im = test_DY.idealTransformer3.pinP_Prim.v[4].im;
 test_DY.idealTransformer3.pinP_Prim.v[4].im = test_DY.pinPrim_C.v[4].im;
 test_DY.idealTransformer1.pinN_Prim.v[4].re = test_DY.idealTransformer3.pinP_Prim.v[4].re;
 test_DY.idealTransformer3.pinP_Prim.v[4].re = test_DY.pinPrim_C.v[4].re;
 test_DY.idealTransformer1.pinN_Prim.v[5].im = test_DY.idealTransformer3.pinP_Prim.v[5].im;
 test_DY.idealTransformer3.pinP_Prim.v[5].im = test_DY.pinPrim_C.v[5].im;
 test_DY.idealTransformer1.pinN_Prim.v[5].re = test_DY.idealTransformer3.pinP_Prim.v[5].re;
 test_DY.idealTransformer3.pinP_Prim.v[5].re = test_DY.pinPrim_C.v[5].re;
 test_DY.idealTransformer1.pinN_Prim.v[6].im = test_DY.idealTransformer3.pinP_Prim.v[6].im;
 test_DY.idealTransformer3.pinP_Prim.v[6].im = test_DY.pinPrim_C.v[6].im;
 test_DY.idealTransformer1.pinN_Prim.v[6].re = test_DY.idealTransformer3.pinP_Prim.v[6].re;
 test_DY.idealTransformer3.pinP_Prim.v[6].re = test_DY.pinPrim_C.v[6].re;
 test_DY.idealTransformer1.pinN_Prim.v[7].im = test_DY.idealTransformer3.pinP_Prim.v[7].im;
 test_DY.idealTransformer3.pinP_Prim.v[7].im = test_DY.pinPrim_C.v[7].im;
 test_DY.idealTransformer1.pinN_Prim.v[7].re = test_DY.idealTransformer3.pinP_Prim.v[7].re;
 test_DY.idealTransformer3.pinP_Prim.v[7].re = test_DY.pinPrim_C.v[7].re;
 test_DY.idealTransformer1.pinN_Prim.v[8].im = test_DY.idealTransformer3.pinP_Prim.v[8].im;
 test_DY.idealTransformer3.pinP_Prim.v[8].im = test_DY.pinPrim_C.v[8].im;
 test_DY.idealTransformer1.pinN_Prim.v[8].re = test_DY.idealTransformer3.pinP_Prim.v[8].re;
 test_DY.idealTransformer3.pinP_Prim.v[8].re = test_DY.pinPrim_C.v[8].re;
 test_DY.idealTransformer2.pinP_Prim.iIm[1:8] + test_DY.idealTransformer3.pinN_Prim.iIm[1:8] - test_DY.pinPrim_B.iIm[1:8] = zeros(8);
 test_DY.idealTransformer2.pinP_Prim.iRe[1:8] + test_DY.idealTransformer3.pinN_Prim.iRe[1:8] - test_DY.pinPrim_B.iRe[1:8] = zeros(8);
 test_DY.idealTransformer2.pinP_Prim.v[1].im = test_DY.idealTransformer3.pinN_Prim.v[1].im;
 test_DY.idealTransformer3.pinN_Prim.v[1].im = test_DY.pinPrim_B.v[1].im;
 test_DY.idealTransformer2.pinP_Prim.v[1].re = test_DY.idealTransformer3.pinN_Prim.v[1].re;
 test_DY.idealTransformer3.pinN_Prim.v[1].re = test_DY.pinPrim_B.v[1].re;
 test_DY.idealTransformer2.pinP_Prim.v[2].im = test_DY.idealTransformer3.pinN_Prim.v[2].im;
 test_DY.idealTransformer3.pinN_Prim.v[2].im = test_DY.pinPrim_B.v[2].im;
 test_DY.idealTransformer2.pinP_Prim.v[2].re = test_DY.idealTransformer3.pinN_Prim.v[2].re;
 test_DY.idealTransformer3.pinN_Prim.v[2].re = test_DY.pinPrim_B.v[2].re;
 test_DY.idealTransformer2.pinP_Prim.v[3].im = test_DY.idealTransformer3.pinN_Prim.v[3].im;
 test_DY.idealTransformer3.pinN_Prim.v[3].im = test_DY.pinPrim_B.v[3].im;
 test_DY.idealTransformer2.pinP_Prim.v[3].re = test_DY.idealTransformer3.pinN_Prim.v[3].re;
 test_DY.idealTransformer3.pinN_Prim.v[3].re = test_DY.pinPrim_B.v[3].re;
 test_DY.idealTransformer2.pinP_Prim.v[4].im = test_DY.idealTransformer3.pinN_Prim.v[4].im;
 test_DY.idealTransformer3.pinN_Prim.v[4].im = test_DY.pinPrim_B.v[4].im;
 test_DY.idealTransformer2.pinP_Prim.v[4].re = test_DY.idealTransformer3.pinN_Prim.v[4].re;
 test_DY.idealTransformer3.pinN_Prim.v[4].re = test_DY.pinPrim_B.v[4].re;
 test_DY.idealTransformer2.pinP_Prim.v[5].im = test_DY.idealTransformer3.pinN_Prim.v[5].im;
 test_DY.idealTransformer3.pinN_Prim.v[5].im = test_DY.pinPrim_B.v[5].im;
 test_DY.idealTransformer2.pinP_Prim.v[5].re = test_DY.idealTransformer3.pinN_Prim.v[5].re;
 test_DY.idealTransformer3.pinN_Prim.v[5].re = test_DY.pinPrim_B.v[5].re;
 test_DY.idealTransformer2.pinP_Prim.v[6].im = test_DY.idealTransformer3.pinN_Prim.v[6].im;
 test_DY.idealTransformer3.pinN_Prim.v[6].im = test_DY.pinPrim_B.v[6].im;
 test_DY.idealTransformer2.pinP_Prim.v[6].re = test_DY.idealTransformer3.pinN_Prim.v[6].re;
 test_DY.idealTransformer3.pinN_Prim.v[6].re = test_DY.pinPrim_B.v[6].re;
 test_DY.idealTransformer2.pinP_Prim.v[7].im = test_DY.idealTransformer3.pinN_Prim.v[7].im;
 test_DY.idealTransformer3.pinN_Prim.v[7].im = test_DY.pinPrim_B.v[7].im;
 test_DY.idealTransformer2.pinP_Prim.v[7].re = test_DY.idealTransformer3.pinN_Prim.v[7].re;
 test_DY.idealTransformer3.pinN_Prim.v[7].re = test_DY.pinPrim_B.v[7].re;
 test_DY.idealTransformer2.pinP_Prim.v[8].im = test_DY.idealTransformer3.pinN_Prim.v[8].im;
 test_DY.idealTransformer3.pinN_Prim.v[8].im = test_DY.pinPrim_B.v[8].im;
 test_DY.idealTransformer2.pinP_Prim.v[8].re = test_DY.idealTransformer3.pinN_Prim.v[8].re;
 test_DY.idealTransformer3.pinN_Prim.v[8].re = test_DY.pinPrim_B.v[8].re;
 - test_DY.hPin_N.iIm[1:8] + test_DY.idealTransformer1.pinN_Sec.iIm[1:8] + test_DY.idealTransformer2.pinN_Sec.iIm[1:8] + test_DY.idealTransformer3.pinN_Sec.iIm[1:8] = zeros(8);
 - test_DY.hPin_N.iRe[1:8] + test_DY.idealTransformer1.pinN_Sec.iRe[1:8] + test_DY.idealTransformer2.pinN_Sec.iRe[1:8] + test_DY.idealTransformer3.pinN_Sec.iRe[1:8] = zeros(8);
 test_DY.hPin_N.v[1].im = test_DY.idealTransformer1.pinN_Sec.v[1].im;
 test_DY.idealTransformer1.pinN_Sec.v[1].im = test_DY.idealTransformer2.pinN_Sec.v[1].im;
 test_DY.idealTransformer2.pinN_Sec.v[1].im = test_DY.idealTransformer3.pinN_Sec.v[1].im;
 test_DY.hPin_N.v[1].re = test_DY.idealTransformer1.pinN_Sec.v[1].re;
 test_DY.idealTransformer1.pinN_Sec.v[1].re = test_DY.idealTransformer2.pinN_Sec.v[1].re;
 test_DY.idealTransformer2.pinN_Sec.v[1].re = test_DY.idealTransformer3.pinN_Sec.v[1].re;
 test_DY.hPin_N.v[2].im = test_DY.idealTransformer1.pinN_Sec.v[2].im;
 test_DY.idealTransformer1.pinN_Sec.v[2].im = test_DY.idealTransformer2.pinN_Sec.v[2].im;
 test_DY.idealTransformer2.pinN_Sec.v[2].im = test_DY.idealTransformer3.pinN_Sec.v[2].im;
 test_DY.hPin_N.v[2].re = test_DY.idealTransformer1.pinN_Sec.v[2].re;
 test_DY.idealTransformer1.pinN_Sec.v[2].re = test_DY.idealTransformer2.pinN_Sec.v[2].re;
 test_DY.idealTransformer2.pinN_Sec.v[2].re = test_DY.idealTransformer3.pinN_Sec.v[2].re;
 test_DY.hPin_N.v[3].im = test_DY.idealTransformer1.pinN_Sec.v[3].im;
 test_DY.idealTransformer1.pinN_Sec.v[3].im = test_DY.idealTransformer2.pinN_Sec.v[3].im;
 test_DY.idealTransformer2.pinN_Sec.v[3].im = test_DY.idealTransformer3.pinN_Sec.v[3].im;
 test_DY.hPin_N.v[3].re = test_DY.idealTransformer1.pinN_Sec.v[3].re;
 test_DY.idealTransformer1.pinN_Sec.v[3].re = test_DY.idealTransformer2.pinN_Sec.v[3].re;
 test_DY.idealTransformer2.pinN_Sec.v[3].re = test_DY.idealTransformer3.pinN_Sec.v[3].re;
 test_DY.hPin_N.v[4].im = test_DY.idealTransformer1.pinN_Sec.v[4].im;
 test_DY.idealTransformer1.pinN_Sec.v[4].im = test_DY.idealTransformer2.pinN_Sec.v[4].im;
 test_DY.idealTransformer2.pinN_Sec.v[4].im = test_DY.idealTransformer3.pinN_Sec.v[4].im;
 test_DY.hPin_N.v[4].re = test_DY.idealTransformer1.pinN_Sec.v[4].re;
 test_DY.idealTransformer1.pinN_Sec.v[4].re = test_DY.idealTransformer2.pinN_Sec.v[4].re;
 test_DY.idealTransformer2.pinN_Sec.v[4].re = test_DY.idealTransformer3.pinN_Sec.v[4].re;
 test_DY.hPin_N.v[5].im = test_DY.idealTransformer1.pinN_Sec.v[5].im;
 test_DY.idealTransformer1.pinN_Sec.v[5].im = test_DY.idealTransformer2.pinN_Sec.v[5].im;
 test_DY.idealTransformer2.pinN_Sec.v[5].im = test_DY.idealTransformer3.pinN_Sec.v[5].im;
 test_DY.hPin_N.v[5].re = test_DY.idealTransformer1.pinN_Sec.v[5].re;
 test_DY.idealTransformer1.pinN_Sec.v[5].re = test_DY.idealTransformer2.pinN_Sec.v[5].re;
 test_DY.idealTransformer2.pinN_Sec.v[5].re = test_DY.idealTransformer3.pinN_Sec.v[5].re;
 test_DY.hPin_N.v[6].im = test_DY.idealTransformer1.pinN_Sec.v[6].im;
 test_DY.idealTransformer1.pinN_Sec.v[6].im = test_DY.idealTransformer2.pinN_Sec.v[6].im;
 test_DY.idealTransformer2.pinN_Sec.v[6].im = test_DY.idealTransformer3.pinN_Sec.v[6].im;
 test_DY.hPin_N.v[6].re = test_DY.idealTransformer1.pinN_Sec.v[6].re;
 test_DY.idealTransformer1.pinN_Sec.v[6].re = test_DY.idealTransformer2.pinN_Sec.v[6].re;
 test_DY.idealTransformer2.pinN_Sec.v[6].re = test_DY.idealTransformer3.pinN_Sec.v[6].re;
 test_DY.hPin_N.v[7].im = test_DY.idealTransformer1.pinN_Sec.v[7].im;
 test_DY.idealTransformer1.pinN_Sec.v[7].im = test_DY.idealTransformer2.pinN_Sec.v[7].im;
 test_DY.idealTransformer2.pinN_Sec.v[7].im = test_DY.idealTransformer3.pinN_Sec.v[7].im;
 test_DY.hPin_N.v[7].re = test_DY.idealTransformer1.pinN_Sec.v[7].re;
 test_DY.idealTransformer1.pinN_Sec.v[7].re = test_DY.idealTransformer2.pinN_Sec.v[7].re;
 test_DY.idealTransformer2.pinN_Sec.v[7].re = test_DY.idealTransformer3.pinN_Sec.v[7].re;
 test_DY.hPin_N.v[8].im = test_DY.idealTransformer1.pinN_Sec.v[8].im;
 test_DY.idealTransformer1.pinN_Sec.v[8].im = test_DY.idealTransformer2.pinN_Sec.v[8].im;
 test_DY.idealTransformer2.pinN_Sec.v[8].im = test_DY.idealTransformer3.pinN_Sec.v[8].im;
 test_DY.hPin_N.v[8].re = test_DY.idealTransformer1.pinN_Sec.v[8].re;
 test_DY.idealTransformer1.pinN_Sec.v[8].re = test_DY.idealTransformer2.pinN_Sec.v[8].re;
 test_DY.idealTransformer2.pinN_Sec.v[8].re = test_DY.idealTransformer3.pinN_Sec.v[8].re;
 test_DY.idealTransformer1.pinP_Sec.iIm[1:8] - test_DY.pinSec_A.iIm[1:8] = zeros(8);
 test_DY.idealTransformer1.pinP_Sec.iRe[1:8] - test_DY.pinSec_A.iRe[1:8] = zeros(8);
 test_DY.idealTransformer1.pinP_Sec.v[1].im = test_DY.pinSec_A.v[1].im;
 test_DY.idealTransformer1.pinP_Sec.v[1].re = test_DY.pinSec_A.v[1].re;
 test_DY.idealTransformer1.pinP_Sec.v[2].im = test_DY.pinSec_A.v[2].im;
 test_DY.idealTransformer1.pinP_Sec.v[2].re = test_DY.pinSec_A.v[2].re;
 test_DY.idealTransformer1.pinP_Sec.v[3].im = test_DY.pinSec_A.v[3].im;
 test_DY.idealTransformer1.pinP_Sec.v[3].re = test_DY.pinSec_A.v[3].re;
 test_DY.idealTransformer1.pinP_Sec.v[4].im = test_DY.pinSec_A.v[4].im;
 test_DY.idealTransformer1.pinP_Sec.v[4].re = test_DY.pinSec_A.v[4].re;
 test_DY.idealTransformer1.pinP_Sec.v[5].im = test_DY.pinSec_A.v[5].im;
 test_DY.idealTransformer1.pinP_Sec.v[5].re = test_DY.pinSec_A.v[5].re;
 test_DY.idealTransformer1.pinP_Sec.v[6].im = test_DY.pinSec_A.v[6].im;
 test_DY.idealTransformer1.pinP_Sec.v[6].re = test_DY.pinSec_A.v[6].re;
 test_DY.idealTransformer1.pinP_Sec.v[7].im = test_DY.pinSec_A.v[7].im;
 test_DY.idealTransformer1.pinP_Sec.v[7].re = test_DY.pinSec_A.v[7].re;
 test_DY.idealTransformer1.pinP_Sec.v[8].im = test_DY.pinSec_A.v[8].im;
 test_DY.idealTransformer1.pinP_Sec.v[8].re = test_DY.pinSec_A.v[8].re;
 test_DY.idealTransformer2.pinP_Sec.iIm[1:8] - test_DY.pinSec_B.iIm[1:8] = zeros(8);
 test_DY.idealTransformer2.pinP_Sec.iRe[1:8] - test_DY.pinSec_B.iRe[1:8] = zeros(8);
 test_DY.idealTransformer2.pinP_Sec.v[1].im = test_DY.pinSec_B.v[1].im;
 test_DY.idealTransformer2.pinP_Sec.v[1].re = test_DY.pinSec_B.v[1].re;
 test_DY.idealTransformer2.pinP_Sec.v[2].im = test_DY.pinSec_B.v[2].im;
 test_DY.idealTransformer2.pinP_Sec.v[2].re = test_DY.pinSec_B.v[2].re;
 test_DY.idealTransformer2.pinP_Sec.v[3].im = test_DY.pinSec_B.v[3].im;
 test_DY.idealTransformer2.pinP_Sec.v[3].re = test_DY.pinSec_B.v[3].re;
 test_DY.idealTransformer2.pinP_Sec.v[4].im = test_DY.pinSec_B.v[4].im;
 test_DY.idealTransformer2.pinP_Sec.v[4].re = test_DY.pinSec_B.v[4].re;
 test_DY.idealTransformer2.pinP_Sec.v[5].im = test_DY.pinSec_B.v[5].im;
 test_DY.idealTransformer2.pinP_Sec.v[5].re = test_DY.pinSec_B.v[5].re;
 test_DY.idealTransformer2.pinP_Sec.v[6].im = test_DY.pinSec_B.v[6].im;
 test_DY.idealTransformer2.pinP_Sec.v[6].re = test_DY.pinSec_B.v[6].re;
 test_DY.idealTransformer2.pinP_Sec.v[7].im = test_DY.pinSec_B.v[7].im;
 test_DY.idealTransformer2.pinP_Sec.v[7].re = test_DY.pinSec_B.v[7].re;
 test_DY.idealTransformer2.pinP_Sec.v[8].im = test_DY.pinSec_B.v[8].im;
 test_DY.idealTransformer2.pinP_Sec.v[8].re = test_DY.pinSec_B.v[8].re;
 test_DY.idealTransformer3.pinP_Sec.iIm[1:8] - test_DY.pinSec_C.iIm[1:8] = zeros(8);
 test_DY.idealTransformer3.pinP_Sec.iRe[1:8] - test_DY.pinSec_C.iRe[1:8] = zeros(8);
 test_DY.idealTransformer3.pinP_Sec.v[1].im = test_DY.pinSec_C.v[1].im;
 test_DY.idealTransformer3.pinP_Sec.v[1].re = test_DY.pinSec_C.v[1].re;
 test_DY.idealTransformer3.pinP_Sec.v[2].im = test_DY.pinSec_C.v[2].im;
 test_DY.idealTransformer3.pinP_Sec.v[2].re = test_DY.pinSec_C.v[2].re;
 test_DY.idealTransformer3.pinP_Sec.v[3].im = test_DY.pinSec_C.v[3].im;
 test_DY.idealTransformer3.pinP_Sec.v[3].re = test_DY.pinSec_C.v[3].re;
 test_DY.idealTransformer3.pinP_Sec.v[4].im = test_DY.pinSec_C.v[4].im;
 test_DY.idealTransformer3.pinP_Sec.v[4].re = test_DY.pinSec_C.v[4].re;
 test_DY.idealTransformer3.pinP_Sec.v[5].im = test_DY.pinSec_C.v[5].im;
 test_DY.idealTransformer3.pinP_Sec.v[5].re = test_DY.pinSec_C.v[5].re;
 test_DY.idealTransformer3.pinP_Sec.v[6].im = test_DY.pinSec_C.v[6].im;
 test_DY.idealTransformer3.pinP_Sec.v[6].re = test_DY.pinSec_C.v[6].re;
 test_DY.idealTransformer3.pinP_Sec.v[7].im = test_DY.pinSec_C.v[7].im;
 test_DY.idealTransformer3.pinP_Sec.v[7].re = test_DY.pinSec_C.v[7].re;
 test_DY.idealTransformer3.pinP_Sec.v[8].im = test_DY.pinSec_C.v[8].im;
 test_DY.idealTransformer3.pinP_Sec.v[8].re = test_DY.pinSec_C.v[8].re;
 - laptop2.pin_p.i + laptop2.vDC.p.i = 0.0;
 laptop2.pin_p.v = laptop2.vDC.p.v;
 - laptop2.pin_n.i + laptop2.vDC.n.i = 0.0;
 laptop2.pin_n.v = laptop2.vDC.n.v;
 - laptop2.hPin_P.iIm[1:8] + laptop2.loadBase.pin_p.iIm[1:8] = zeros(8);
 - laptop2.hPin_P.iRe[1:8] + laptop2.loadBase.pin_p.iRe[1:8] = zeros(8);
 laptop2.hPin_P.v[1].im = laptop2.loadBase.pin_p.v[1].im;
 laptop2.hPin_P.v[1].re = laptop2.loadBase.pin_p.v[1].re;
 laptop2.hPin_P.v[2].im = laptop2.loadBase.pin_p.v[2].im;
 laptop2.hPin_P.v[2].re = laptop2.loadBase.pin_p.v[2].re;
 laptop2.hPin_P.v[3].im = laptop2.loadBase.pin_p.v[3].im;
 laptop2.hPin_P.v[3].re = laptop2.loadBase.pin_p.v[3].re;
 laptop2.hPin_P.v[4].im = laptop2.loadBase.pin_p.v[4].im;
 laptop2.hPin_P.v[4].re = laptop2.loadBase.pin_p.v[4].re;
 laptop2.hPin_P.v[5].im = laptop2.loadBase.pin_p.v[5].im;
 laptop2.hPin_P.v[5].re = laptop2.loadBase.pin_p.v[5].re;
 laptop2.hPin_P.v[6].im = laptop2.loadBase.pin_p.v[6].im;
 laptop2.hPin_P.v[6].re = laptop2.loadBase.pin_p.v[6].re;
 laptop2.hPin_P.v[7].im = laptop2.loadBase.pin_p.v[7].im;
 laptop2.hPin_P.v[7].re = laptop2.loadBase.pin_p.v[7].re;
 laptop2.hPin_P.v[8].im = laptop2.loadBase.pin_p.v[8].im;
 laptop2.hPin_P.v[8].re = laptop2.loadBase.pin_p.v[8].re;
 - laptop2.hPin_N.iIm[1:8] + laptop2.loadBase.pin_n.iIm[1:8] = zeros(8);
 - laptop2.hPin_N.iRe[1:8] + laptop2.loadBase.pin_n.iRe[1:8] = zeros(8);
 laptop2.hPin_N.v[1].im = laptop2.loadBase.pin_n.v[1].im;
 laptop2.hPin_N.v[1].re = laptop2.loadBase.pin_n.v[1].re;
 laptop2.hPin_N.v[2].im = laptop2.loadBase.pin_n.v[2].im;
 laptop2.hPin_N.v[2].re = laptop2.loadBase.pin_n.v[2].re;
 laptop2.hPin_N.v[3].im = laptop2.loadBase.pin_n.v[3].im;
 laptop2.hPin_N.v[3].re = laptop2.loadBase.pin_n.v[3].re;
 laptop2.hPin_N.v[4].im = laptop2.loadBase.pin_n.v[4].im;
 laptop2.hPin_N.v[4].re = laptop2.loadBase.pin_n.v[4].re;
 laptop2.hPin_N.v[5].im = laptop2.loadBase.pin_n.v[5].im;
 laptop2.hPin_N.v[5].re = laptop2.loadBase.pin_n.v[5].re;
 laptop2.hPin_N.v[6].im = laptop2.loadBase.pin_n.v[6].im;
 laptop2.hPin_N.v[6].re = laptop2.loadBase.pin_n.v[6].re;
 laptop2.hPin_N.v[7].im = laptop2.loadBase.pin_n.v[7].im;
 laptop2.hPin_N.v[7].re = laptop2.loadBase.pin_n.v[7].re;
 laptop2.hPin_N.v[8].im = laptop2.loadBase.pin_n.v[8].im;
 laptop2.hPin_N.v[8].re = laptop2.loadBase.pin_n.v[8].re;
 - led_driver.pin_p.i + led_driver.vDC.p.i = 0.0;
 led_driver.pin_p.v = led_driver.vDC.p.v;
 - led_driver.pin_n.i + led_driver.vDC.n.i = 0.0;
 led_driver.pin_n.v = led_driver.vDC.n.v;
 - led_driver.hPin_P.iIm[1:8] + led_driver.loadBase.pin_p.iIm[1:8] = zeros(8);
 - led_driver.hPin_P.iRe[1:8] + led_driver.loadBase.pin_p.iRe[1:8] = zeros(8);
 led_driver.hPin_P.v[1].im = led_driver.loadBase.pin_p.v[1].im;
 led_driver.hPin_P.v[1].re = led_driver.loadBase.pin_p.v[1].re;
 led_driver.hPin_P.v[2].im = led_driver.loadBase.pin_p.v[2].im;
 led_driver.hPin_P.v[2].re = led_driver.loadBase.pin_p.v[2].re;
 led_driver.hPin_P.v[3].im = led_driver.loadBase.pin_p.v[3].im;
 led_driver.hPin_P.v[3].re = led_driver.loadBase.pin_p.v[3].re;
 led_driver.hPin_P.v[4].im = led_driver.loadBase.pin_p.v[4].im;
 led_driver.hPin_P.v[4].re = led_driver.loadBase.pin_p.v[4].re;
 led_driver.hPin_P.v[5].im = led_driver.loadBase.pin_p.v[5].im;
 led_driver.hPin_P.v[5].re = led_driver.loadBase.pin_p.v[5].re;
 led_driver.hPin_P.v[6].im = led_driver.loadBase.pin_p.v[6].im;
 led_driver.hPin_P.v[6].re = led_driver.loadBase.pin_p.v[6].re;
 led_driver.hPin_P.v[7].im = led_driver.loadBase.pin_p.v[7].im;
 led_driver.hPin_P.v[7].re = led_driver.loadBase.pin_p.v[7].re;
 led_driver.hPin_P.v[8].im = led_driver.loadBase.pin_p.v[8].im;
 led_driver.hPin_P.v[8].re = led_driver.loadBase.pin_p.v[8].re;
 - led_driver.hPin_N.iIm[1:8] + led_driver.loadBase.pin_n.iIm[1:8] = zeros(8);
 - led_driver.hPin_N.iRe[1:8] + led_driver.loadBase.pin_n.iRe[1:8] = zeros(8);
 led_driver.hPin_N.v[1].im = led_driver.loadBase.pin_n.v[1].im;
 led_driver.hPin_N.v[1].re = led_driver.loadBase.pin_n.v[1].re;
 led_driver.hPin_N.v[2].im = led_driver.loadBase.pin_n.v[2].im;
 led_driver.hPin_N.v[2].re = led_driver.loadBase.pin_n.v[2].re;
 led_driver.hPin_N.v[3].im = led_driver.loadBase.pin_n.v[3].im;
 led_driver.hPin_N.v[3].re = led_driver.loadBase.pin_n.v[3].re;
 led_driver.hPin_N.v[4].im = led_driver.loadBase.pin_n.v[4].im;
 led_driver.hPin_N.v[4].re = led_driver.loadBase.pin_n.v[4].re;
 led_driver.hPin_N.v[5].im = led_driver.loadBase.pin_n.v[5].im;
 led_driver.hPin_N.v[5].re = led_driver.loadBase.pin_n.v[5].re;
 led_driver.hPin_N.v[6].im = led_driver.loadBase.pin_n.v[6].im;
 led_driver.hPin_N.v[6].re = led_driver.loadBase.pin_n.v[6].re;
 led_driver.hPin_N.v[7].im = led_driver.loadBase.pin_n.v[7].im;
 led_driver.hPin_N.v[7].re = led_driver.loadBase.pin_n.v[7].re;
 led_driver.hPin_N.v[8].im = led_driver.loadBase.pin_n.v[8].im;
 led_driver.hPin_N.v[8].re = led_driver.loadBase.pin_n.v[8].re;
 PhA.pin_p.reference.theta = test_DY.pinPrim_A.reference.theta;
 test_DY.idealTransformer1.pinP_Prim.reference.theta = test_DY.idealTransformer2.pinN_Prim.reference.theta;
 test_DY.idealTransformer2.pinN_Prim.reference.theta = test_DY.pinPrim_A.reference.theta;
 PhA.pin_n.reference.theta = ground.pin.reference.theta;
 test_DY.idealTransformer1.pinN_Prim.reference.theta = test_DY.idealTransformer3.pinP_Prim.reference.theta;
 test_DY.idealTransformer3.pinP_Prim.reference.theta = test_DY.pinPrim_C.reference.theta;
 test_DY.hPin_N.reference.theta = test_DY.idealTransformer1.pinN_Sec.reference.theta;
 test_DY.idealTransformer1.pinP_Sec.reference.theta = test_DY.pinSec_A.reference.theta;
 test_DY.idealTransformer2.pinP_Prim.reference.theta = test_DY.pinPrim_B.reference.theta;
 test_DY.idealTransformer2.pinP_Sec.reference.theta = test_DY.pinSec_B.reference.theta;
 test_DY.idealTransformer3.pinP_Sec.reference.theta = test_DY.pinSec_C.reference.theta;
 ground1.pin.reference.theta = laptop2.hPin_N.reference.theta;
 laptop2.hPin_N.reference.theta = led_driver.hPin_N.reference.theta;
 led_driver.hPin_N.reference.theta = test_DY.hPin_N.reference.theta;
 led_driver.hPin_P.reference.theta = test_DY.pinSec_A.reference.theta;
 laptop2.hPin_P.reference.theta = test_DY.pinSec_B.reference.theta;
 r.pin_p.reference.theta = test_DY.pinSec_C.reference.theta;
 led_driver.hPin_P.reference.theta = led_driver.loadBase.pin_p.reference.theta;
 laptop2.hPin_P.reference.theta = laptop2.loadBase.pin_p.reference.theta;
 HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(test_DY.idealTransformer2.pinN_Sec.reference, test_DY.idealTransformer1.pinN_Sec.reference);
 HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(test_DY.idealTransformer3.pinN_Sec.reference, test_DY.idealTransformer1.pinN_Sec.reference);
 HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(PhB.pin_n.reference, ground.pin.reference);
 HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(PhC.pin_n.reference, ground.pin.reference);
 HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(test_DY.idealTransformer3.pinN_Prim.reference, test_DY.idealTransformer2.pinP_Prim.reference);
 HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(PhB.pin_p.reference, test_DY.pinPrim_B.reference);
 HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(PhC.pin_p.reference, test_DY.pinPrim_C.reference);
 HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(r.pin_n.reference, ground1.pin.reference);
 HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(laptop2.loadBase.pin_n.reference, laptop2.hPin_N.reference);
 HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(led_driver.loadBase.pin_n.reference, led_driver.hPin_N.reference);

public
 function Modelica.Utilities.Streams.readMatrixSize
  input String fileName;
  input String matrixName;
  output Integer[:] dim;
 algorithm
  init dim as Integer[2];
  external "C" ModelicaIO_readMatrixSizes(fileName, matrixName, dim);
  return;
 end Modelica.Utilities.Streams.readMatrixSize;

 function Modelica.Utilities.Streams.readRealMatrix
  input String fileName;
  input String matrixName;
  input Integer nrow;
  input Integer ncol;
  input Boolean verboseRead;
  output Real[:,:] matrix;
 algorithm
  init matrix as Real[nrow, ncol];
  external "C" ModelicaIO_readRealMatrix(fileName, matrixName, matrix, size(matrix, 1), size(matrix, 2), verboseRead);
  return;
 end Modelica.Utilities.Streams.readRealMatrix;

 function Modelica.ComplexMath.'abs'
  input Complex c;
  output Real result;
 algorithm
  result := (c.re ^ 2 + c.im ^ 2) ^ 0.5;
  return;
 annotation(Inline = true);
 end Modelica.ComplexMath.'abs';

 function Modelica.ComplexMath.arg
  input Complex c;
  input Real phi0;
  output Real phi;
 algorithm
  phi := Modelica.Math.atan3(c.im, c.re, phi0);
  return;
 annotation(Inline = true);
 end Modelica.ComplexMath.arg;

 function Modelica.Math.atan3
  input Real u1;
  input Real u2;
  input Real y0;
  output Real y;
  Real w;
 algorithm
  w := atan2(u1, u2);
  if y0 == 0 then
   y := w;
  else
   y := w + 6.283185307179586 * integer((3.141592653589793 + y0 - w) / 6.283185307179586);
  end if;
  return;
 end Modelica.Math.atan3;

 function Complex.'-'.subtract
  input Complex c1;
  input Complex c2;
  output Complex c3;
 algorithm
  (c3) := Complex.'constructor'.fromReal(c1.re - c2.re, c1.im - c2.im);
  return;
 annotation(Inline = true);
 end Complex.'-'.subtract;

 function Complex.'constructor'.fromReal
  input Real re;
  input Real im;
  output Complex result;
 algorithm
  result.re := re;
  result.im := im;
  return;
 annotation(Inline = true);
 end Complex.'constructor'.fromReal;

 function Complex.'*'.multiply
  input Complex c1;
  input Complex c2;
  output Complex c3;
 algorithm
  (c3) := Complex.'constructor'.fromReal(c1.re * c2.re - c1.im * c2.im, c1.re * c2.im + c1.im * c2.re);
  return;
 annotation(Inline = true);
 end Complex.'*'.multiply;

 function Modelica.ComplexMath.conj
  input Complex c1;
  output Complex c2;
 algorithm
  (c2) := Complex.'constructor'.fromReal(c1.re, - c1.im);
  return;
 annotation(Inline = true);
 end Modelica.ComplexMath.conj;

 function HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint;

 function HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint;

 function HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint;

 function HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint;

 function HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint;

 function HPF.Examples.Demo.r.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.r.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint;

 record HPF.Utilities.ComponentProperties
  discrete String ComponentType "Type of the component";
 end HPF.Utilities.ComponentProperties;

 record Complex
  Real re "Real part of complex number";
  Real im "Imaginary part of complex number";
 end Complex;

 record HPF.Types.Reference
  Modelica.SIunits.Angle theta;
 end HPF.Types.Reference;

 type Modelica.SIunits.Angle = Real(final quantity = "Angle",final unit = "rad",displayUnit = "deg");
 type Modelica.SIunits.ElectricPotential = Real(final quantity = "ElectricPotential",final unit = "V");
 type Modelica.SIunits.ElectricCurrent = Real(final quantity = "ElectricCurrent",final unit = "A");
 type Modelica.Blocks.Interfaces.RealOutput = Real;
 type Modelica.Blocks.Interfaces.RealInput = Real;
end HPF.Examples.Demo;

Applying transformation: enableIfEquationElimination...
Applying transformation: genInitArrayStatements...
Applying transformation: scalarize...
Applying transformation: MakeReinitedVarsStates...
Applying transformation: enableIfEquationElimination...
Applying transformation: enableStreamsRewrite...
Applying transformation: ExtractEventGeneratingExpressions...
Applying transformation: GenerateEventIndicators...
Applying transformation: convertWhenToIf...
Applying transformation: FunctionInliningIfSet...
Applying transformation: setFDerivativeVariables...
Applying transformation: addFPreVariables...
Applying transformation: enableIfEquationRewrite...
Applying transformation: aliasEliminationIfSet...
Applying transformation: variabilityPropagationIfSet...
Applying transformation: aliasEliminationIfSet...
Applying transformation: eliminateLinearEquations...
Applying transformation: aliasEliminationIfSet...
Applying transformation: enableExpandedInStreamRewrite...
Applying transformation: evaluateAsserts...
Applying transformation: enableSemiLinearRewrite...
Applying transformation: eliminateEqualSwitches...
Applying transformation: genInitialEquations...
Applying transformation: setFDerivativeVariablesPreBLT...
Applying transformation: indexReduction...
Applying transformation: LateFunctionInliningIfSet...
Applying transformation: commonSubexpressionEliminationIfSet...
Applying transformation: addFPreVariables...
Applying transformation: aliasEliminationIfSet...
Applying transformation: eliminateLinearEquations...
Applying transformation: sortDependentParameters...
Applying transformation: addRuntimeOptionParameters...
Applying transformation: computeMatchingsAndBLT...
Flat tree before matching and BLT:
fclass HPF.Examples.Demo
 parameter Integer systemDef.hrms[1] = 1 "Harmonics to simulate" /* 1 */;
 parameter Integer systemDef.hrms[2] = 3 "Harmonics to simulate" /* 3 */;
 parameter Integer systemDef.hrms[3] = 5 "Harmonics to simulate" /* 5 */;
 parameter Integer systemDef.hrms[4] = 7 "Harmonics to simulate" /* 7 */;
 parameter Integer systemDef.hrms[5] = 9 "Harmonics to simulate" /* 9 */;
 parameter Integer systemDef.hrms[6] = 11 "Harmonics to simulate" /* 11 */;
 parameter Integer systemDef.hrms[7] = 13 "Harmonics to simulate" /* 13 */;
 parameter Integer systemDef.hrms[8] = 15 "Harmonics to simulate" /* 15 */;
 structural parameter Integer systemDef.numHrm = 8 "Number of harmonics. (Automatically generated from hrms.)" /* 8 */;
 parameter Real systemDef.fFund = 60 "Fundamental frequency (Hz)" /* 60 */;
 parameter Real systemDef.fs = 5000.0 "Sampling frequency (Hz)" /* 5000.0 */;
 parameter Integer temp_179[1];
 parameter Integer systemDef.numPh = 3 "Number of phases" /* 3 */;
 constant String PhA.properties.ComponentType = "VoltageSource" "Type of the component";
 structural (loadResource) parameter String PhA.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" */;
 structural parameter String PhA.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" */;
 structural parameter Integer PhA.matDim[1] = 32 /* 32 */;
 structural parameter Integer PhA.matDim[2] = 1 /* 1 */;
 structural parameter Real PhA.magDataMat[2,1] = 491.28990594667346 /* 491.28990594667346 */;
 structural parameter Real PhA.magDataMat[3,1] = 0.4635405644252304 /* 0.4635405644252304 */;
 structural parameter Real PhA.magDataMat[4,1] = 1.0463774223253857 /* 1.0463774223253857 */;
 structural parameter Real PhA.magDataMat[5,1] = 0.2331345715632324 /* 0.2331345715632324 */;
 structural parameter Real PhA.magDataMat[6,1] = 1.6598617132749682 /* 1.6598617132749682 */;
 structural parameter Real PhA.magDataMat[7,1] = 0.1518565411422124 /* 0.1518565411422124 */;
 structural parameter Real PhA.magDataMat[8,1] = 1.9105967094709126 /* 1.9105967094709126 */;
 structural parameter Real PhA.magDataMat[9,1] = 0.1386948308207945 /* 0.1386948308207945 */;
 structural parameter Real PhA.magDataMat[10,1] = 0.5251811665424375 /* 0.5251811665424375 */;
 structural parameter Real PhA.magDataMat[11,1] = 0.0877197456635834 /* 0.0877197456635834 */;
 structural parameter Real PhA.magDataMat[12,1] = 1.9262797730195742 /* 1.9262797730195742 */;
 structural parameter Real PhA.magDataMat[13,1] = 0.1184440683532766 /* 0.1184440683532766 */;
 structural parameter Real PhA.magDataMat[14,1] = 0.481422982261235 /* 0.481422982261235 */;
 structural parameter Real PhA.magDataMat[15,1] = 0.0544090284431237 /* 0.0544090284431237 */;
 structural parameter Real PhA.magDataMat[16,1] = 0.1451474507152328 /* 0.1451474507152328 */;
 structural parameter Real PhA.magDataMat[17,1] = 0.0258533576473125 /* 0.0258533576473125 */;
 structural parameter Real PhA.magDataMat[18,1] = 0.8951740935763725 /* 0.8951740935763725 */;
 structural parameter Real PhA.magDataMat[19,1] = 0.035779586777545 /* 0.035779586777545 */;
 structural parameter Real PhA.magDataMat[20,1] = 0.1306259620277833 /* 0.1306259620277833 */;
 structural parameter Real PhA.magDataMat[21,1] = 0.1030772087446648 /* 0.1030772087446648 */;
 structural parameter Real PhA.magDataMat[22,1] = 0.0294340894198748 /* 0.0294340894198748 */;
 structural parameter Real PhA.magDataMat[23,1] = 0.0944957041462652 /* 0.0944957041462652 */;
 structural parameter Real PhA.magDataMat[24,1] = 0.3245085302933516 /* 0.3245085302933516 */;
 structural parameter Real PhA.magDataMat[25,1] = 0.0390577054549229 /* 0.0390577054549229 */;
 structural parameter Real PhA.magDataMat[26,1] = 0.0340450317134204 /* 0.0340450317134204 */;
 structural parameter Real PhA.magDataMat[27,1] = 0.1097767013072763 /* 0.1097767013072763 */;
 structural parameter Real PhA.magDataMat[28,1] = 0.0470594525429294 /* 0.0470594525429294 */;
 structural parameter Real PhA.magDataMat[29,1] = 0.1228566379285578 /* 0.1228566379285578 */;
 structural parameter Real PhA.magDataMat[30,1] = 0.2164928463914955 /* 0.2164928463914955 */;
 structural parameter Real PhA.magDataMat[31,1] = 0.0342300079933074 /* 0.0342300079933074 */;
 structural parameter Real PhA.magDataMat[32,1] = 0.0348258926394183 /* 0.0348258926394183 */;
 structural parameter Real PhA.argDataMat[1,1] = 1.5707963267948966 /* 1.5707963267948966 */;
 structural parameter Real PhA.argDataMat[2,1] = 0.0077560921535743 /* 0.0077560921535743 */;
 structural parameter Real PhA.argDataMat[3,1] = -0.0852246972433012 /* -0.0852246972433012 */;
 structural parameter Real PhA.argDataMat[4,1] = 0.1337983605530348 /* 0.1337983605530348 */;
 structural parameter Real PhA.argDataMat[5,1] = -0.5679607507970243 /* -0.5679607507970243 */;
 structural parameter Real PhA.argDataMat[6,1] = 0.3371965305429522 /* 0.3371965305429522 */;
 structural parameter Real PhA.argDataMat[7,1] = -0.0199975129308559 /* -0.0199975129308559 */;
 structural parameter Real PhA.argDataMat[8,1] = -2.4142373069782015 /* -2.4142373069782015 */;
 structural parameter Real PhA.argDataMat[9,1] = 0.6504198353240805 /* 0.6504198353240805 */;
 structural parameter Real PhA.argDataMat[10,1] = -2.715056952812912 /* -2.715056952812912 */;
 structural parameter Real PhA.argDataMat[11,1] = 0.5102162003333609 /* 0.5102162003333609 */;
 structural parameter Real PhA.argDataMat[12,1] = -0.1108023593667606 /* -0.1108023593667606 */;
 structural parameter Real PhA.argDataMat[13,1] = -0.262421590602965 /* -0.262421590602965 */;
 structural parameter Real PhA.argDataMat[14,1] = 1.7236257613676265 /* 1.7236257613676265 */;
 structural parameter Real PhA.argDataMat[15,1] = 1.1515321243259355 /* 1.1515321243259355 */;
 structural parameter Real PhA.argDataMat[16,1] = -0.2477226727538361 /* -0.2477226727538361 */;
 structural parameter Real PhA.argDataMat[17,1] = -1.7754828141248986 /* -1.7754828141248986 */;
 structural parameter Real PhA.argDataMat[18,1] = 2.663073916674371 /* 2.663073916674371 */;
 structural parameter Real PhA.argDataMat[19,1] = -0.0318137713960557 /* -0.0318137713960557 */;
 structural parameter Real PhA.argDataMat[20,1] = 0.2993721368277082 /* 0.2993721368277082 */;
 structural parameter Real PhA.argDataMat[21,1] = 1.1393837225179722 /* 1.1393837225179722 */;
 structural parameter Real PhA.argDataMat[22,1] = 2.391777148898547 /* 2.391777148898547 */;
 structural parameter Real PhA.argDataMat[23,1] = 1.5648231015885503 /* 1.5648231015885503 */;
 structural parameter Real PhA.argDataMat[24,1] = -0.356629080481576 /* -0.356629080481576 */;
 structural parameter Real PhA.argDataMat[25,1] = 0.2671820434478699 /* 0.2671820434478699 */;
 structural parameter Real PhA.argDataMat[26,1] = 2.3096759301950636 /* 2.3096759301950636 */;
 structural parameter Real PhA.argDataMat[27,1] = 0.1696844071201723 /* 0.1696844071201723 */;
 structural parameter Real PhA.argDataMat[28,1] = -0.0763985737214103 /* -0.0763985737214103 */;
 structural parameter Real PhA.argDataMat[29,1] = 0.5594469031924515 /* 0.5594469031924515 */;
 structural parameter Real PhA.argDataMat[30,1] = -1.2997703855896772 /* -1.2997703855896772 */;
 structural parameter Real PhA.argDataMat[31,1] = 0.4481215218879092 /* 0.4481215218879092 */;
 structural parameter Real PhA.argDataMat[32,1] = 0.9517083118310508 /* 0.9517083118310508 */;
 Modelica.SIunits.Angle PhA.theta(start = 0);
 constant Real PhA.v[1].re(start = 0) = 1.0311400982534205E-18 "Real part of complex number";
 constant Real PhA.v[1].im(start = 0) = 0.016839795751254 "Imaginary part of complex number";
 constant Real PhA.v[2].re(start = 0) = 491.27512876579294 "Real part of complex number";
 constant Real PhA.v[2].im(start = 0) = 3.8104515801744143 "Imaginary part of complex number";
 constant Real PhA.v[3].re(start = 0) = 0.46185817781935556 "Real part of complex number";
 constant Real PhA.v[3].im(start = 0) = -0.03945729905918179 "Imaginary part of complex number";
 constant Real PhA.v[4].re(start = 0) = 1.0370252617081184 "Real part of complex number";
 constant Real PhA.v[4].im(start = 0) = 0.13958623331663875 "Imaginary part of complex number";
 constant Real PhA.v[5].re(start = 0) = 0.19653236644744274 "Real part of complex number";
 constant Real PhA.v[5].im(start = 0) = -0.12540636904296373 "Imaginary part of complex number";
 constant Real PhA.v[6].re(start = 0) = 1.566388062268859 "Real part of complex number";
 constant Real PhA.v[6].im(start = 0) = 0.5491532987952651 "Imaginary part of complex number";
 constant Real PhA.v[7].re(start = 0) = 0.15182617839892862 "Real part of complex number";
 constant Real PhA.v[7].im(start = 0) = -0.0030365507493113567 "Imaginary part of complex number";
 constant Real PhA.v[8].re(start = 0) = -1.4270923812109018 "Real part of complex number";
 constant Real PhA.v[8].im(start = 0) = -1.2703492125124007 "Imaginary part of complex number";
 Real PhA.i[1].re(start = 0) "Real part of complex number";
 Real PhA.i[1].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[2].re(start = 0) "Real part of complex number";
 Real PhA.i[2].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[3].re(start = 0) "Real part of complex number";
 Real PhA.i[3].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[4].re(start = 0) "Real part of complex number";
 Real PhA.i[4].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[5].re(start = 0) "Real part of complex number";
 Real PhA.i[5].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[6].re(start = 0) "Real part of complex number";
 Real PhA.i[6].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[7].re(start = 0) "Real part of complex number";
 Real PhA.i[7].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[8].re(start = 0) "Real part of complex number";
 Real PhA.i[8].im(start = 0) "Imaginary part of complex number";
 Real PhA.omega;
 constant Real PhA.pin_n.v[1].re = 0.0 "Real part of complex number";
 structural (loadResource) parameter String PhB.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" */;
 structural parameter String PhB.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" */;
 structural parameter Real PhB.magDataMat[2,1] = 492.3540794785275 /* 492.3540794785275 */;
 structural parameter Real PhB.magDataMat[3,1] = 0.208496948122041 /* 0.208496948122041 */;
 structural parameter Real PhB.magDataMat[4,1] = 1.1805408036097413 /* 1.1805408036097413 */;
 structural parameter Real PhB.magDataMat[5,1] = 0.1693263989961228 /* 0.1693263989961228 */;
 structural parameter Real PhB.magDataMat[6,1] = 0.9106214363027906 /* 0.9106214363027906 */;
 structural parameter Real PhB.magDataMat[7,1] = 0.1195391546137544 /* 0.1195391546137544 */;
 structural parameter Real PhB.magDataMat[8,1] = 1.6580541328073826 /* 1.6580541328073826 */;
 structural parameter Real PhB.magDataMat[9,1] = 0.1269101445860712 /* 0.1269101445860712 */;
 structural parameter Real PhB.magDataMat[10,1] = 0.3289985189761305 /* 0.3289985189761305 */;
 structural parameter Real PhB.magDataMat[11,1] = 0.0946942856942096 /* 0.0946942856942096 */;
 structural parameter Real PhB.magDataMat[12,1] = 2.0198413017769763 /* 2.0198413017769763 */;
 structural parameter Real PhB.magDataMat[13,1] = 0.0836821242552161 /* 0.0836821242552161 */;
 structural parameter Real PhB.magDataMat[14,1] = 0.4924159700118574 /* 0.4924159700118574 */;
 structural parameter Real PhB.magDataMat[15,1] = 0.0668687465332885 /* 0.0668687465332885 */;
 structural parameter Real PhB.magDataMat[16,1] = 0.1143872931492812 /* 0.1143872931492812 */;
 structural parameter Real PhB.magDataMat[17,1] = 0.076898954125649 /* 0.076898954125649 */;
 structural parameter Real PhB.magDataMat[18,1] = 0.9655752395607782 /* 0.9655752395607782 */;
 structural parameter Real PhB.magDataMat[19,1] = 0.0349853026484666 /* 0.0349853026484666 */;
 structural parameter Real PhB.magDataMat[20,1] = 0.226897033607389 /* 0.226897033607389 */;
 structural parameter Real PhB.magDataMat[21,1] = 0.098402544910626 /* 0.098402544910626 */;
 structural parameter Real PhB.magDataMat[22,1] = 0.0652517506228442 /* 0.0652517506228442 */;
 structural parameter Real PhB.magDataMat[23,1] = 0.08011082638466 /* 0.08011082638466 */;
 structural parameter Real PhB.magDataMat[24,1] = 0.1620678510443835 /* 0.1620678510443835 */;
 structural parameter Real PhB.magDataMat[25,1] = 0.0400637050971903 /* 0.0400637050971903 */;
 structural parameter Real PhB.magDataMat[26,1] = 0.0561736562706734 /* 0.0561736562706734 */;
 structural parameter Real PhB.magDataMat[27,1] = 0.1331380625697481 /* 0.1331380625697481 */;
 structural parameter Real PhB.magDataMat[28,1] = 0.0296172064955882 /* 0.0296172064955882 */;
 structural parameter Real PhB.magDataMat[29,1] = 0.094827068391166 /* 0.094827068391166 */;
 structural parameter Real PhB.magDataMat[30,1] = 0.2157544231279243 /* 0.2157544231279243 */;
 structural parameter Real PhB.magDataMat[31,1] = 0.0180623326640486 /* 0.0180623326640486 */;
 structural parameter Real PhB.magDataMat[32,1] = 0.0434623170353308 /* 0.0434623170353308 */;
 structural parameter Real PhB.argDataMat[2,1] = -2.086840476097504 /* -2.086840476097504 */;
 structural parameter Real PhB.argDataMat[3,1] = -2.5253242170980594 /* -2.5253242170980594 */;
 structural parameter Real PhB.argDataMat[4,1] = -1.8115418295128152 /* -1.8115418295128152 */;
 structural parameter Real PhB.argDataMat[5,1] = 2.8595229031828926 /* 2.8595229031828926 */;
 structural parameter Real PhB.argDataMat[6,1] = 2.8739733224576094 /* 2.8739733224576094 */;
 structural parameter Real PhB.argDataMat[7,1] = -2.8607178229132786 /* -2.8607178229132786 */;
 structural parameter Real PhB.argDataMat[8,1] = 2.073331261624584 /* 2.073331261624584 */;
 structural parameter Real PhB.argDataMat[9,1] = -2.9351292614081848 /* -2.9351292614081848 */;
 structural parameter Real PhB.argDataMat[10,1] = -0.1551377562798652 /* -0.1551377562798652 */;
 structural parameter Real PhB.argDataMat[11,1] = -1.6094031270218976 /* -1.6094031270218976 */;
 structural parameter Real PhB.argDataMat[12,1] = 2.1810033665310717 /* 2.1810033665310717 */;
 structural parameter Real PhB.argDataMat[13,1] = 2.8832395214114577 /* 2.8832395214114577 */;
 structural parameter Real PhB.argDataMat[14,1] = -0.0631873306821448 /* -0.0631873306821448 */;
 structural parameter Real PhB.argDataMat[15,1] = -2.133736341444569 /* -2.133736341444569 */;
 structural parameter Real PhB.argDataMat[16,1] = -2.9370100120292153 /* -2.9370100120292153 */;
 structural parameter Real PhB.argDataMat[17,1] = 1.5326277680479188 /* 1.5326277680479188 */;
 structural parameter Real PhB.argDataMat[18,1] = -1.4355335492083865 /* -1.4355335492083865 */;
 structural parameter Real PhB.argDataMat[19,1] = -2.7058834666324927 /* -2.7058834666324927 */;
 structural parameter Real PhB.argDataMat[20,1] = -1.82542395065559 /* -1.82542395065559 */;
 structural parameter Real PhB.argDataMat[21,1] = -2.9017038801663326 /* -2.9017038801663326 */;
 structural parameter Real PhB.argDataMat[22,1] = -1.6471531147838383 /* -1.6471531147838383 */;
 structural parameter Real PhB.argDataMat[23,1] = -0.2664005312148152 /* -0.2664005312148152 */;
 structural parameter Real PhB.argDataMat[24,1] = 2.233387596536119 /* 2.233387596536119 */;
 structural parameter Real PhB.argDataMat[25,1] = -2.373672554709982 /* -2.373672554709982 */;
 structural parameter Real PhB.argDataMat[26,1] = 0.8816266227593619 /* 0.8816266227593619 */;
 structural parameter Real PhB.argDataMat[27,1] = 2.17935104062631 /* 2.17935104062631 */;
 structural parameter Real PhB.argDataMat[28,1] = 2.36233434884658 /* 2.36233434884658 */;
 structural parameter Real PhB.argDataMat[29,1] = -1.275072088990568 /* -1.275072088990568 */;
 structural parameter Real PhB.argDataMat[30,1] = 0.9083106039150173 /* 0.9083106039150173 */;
 structural parameter Real PhB.argDataMat[31,1] = -2.5000963969047283 /* -2.5000963969047283 */;
 structural parameter Real PhB.argDataMat[32,1] = 2.7980169261979593 /* 2.7980169261979593 */;
 Modelica.SIunits.Angle PhB.theta(start = 0);
 constant Real PhB.v[1].re(start = 0) = 1.751221856265376E-17 "Real part of complex number";
 constant Real PhB.v[1].im(start = 0) = 0.2859962329521695 "Imaginary part of complex number";
 constant Real PhB.v[2].re(start = 0) = -242.94881973633827 "Real part of complex number";
 constant Real PhB.v[2].im(start = 0) = -428.2387308124621 "Imaginary part of complex number";
 constant Real PhB.v[3].re(start = 0) = -0.17014204861571908 "Real part of complex number";
 constant Real PhB.v[3].im(start = 0) = -0.12051000236101295 "Imaginary part of complex number";
 constant Real PhB.v[4].re(start = 0) = -0.2814724425964085 "Real part of complex number";
 constant Real PhB.v[4].im(start = 0) = -1.1464945935530377 "Imaginary part of complex number";
 constant Real PhB.v[5].re(start = 0) = -0.1626348555772872 "Real part of complex number";
 constant Real PhB.v[5].im(start = 0) = 0.04713102108324313 "Imaginary part of complex number";
 constant Real PhB.v[6].re(start = 0) = -0.8782061942567747 "Real part of complex number";
 constant Real PhB.v[6].im(start = 0) = 0.24080133019397804 "Imaginary part of complex number";
 constant Real PhB.v[7].re(start = 0) = -0.11485481036252071 "Real part of complex number";
 constant Real PhB.v[7].im(start = 0) = -0.033135811780617135 "Imaginary part of complex number";
 constant Real PhB.v[8].re(start = 0) = -0.7985994691268073 "Real part of complex number";
 constant Real PhB.v[8].im(start = 0) = 1.4530596667824838 "Imaginary part of complex number";
 Real PhB.i[1].re(start = 0) "Real part of complex number";
 Real PhB.i[1].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[2].re(start = 0) "Real part of complex number";
 Real PhB.i[2].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[3].re(start = 0) "Real part of complex number";
 Real PhB.i[3].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[4].re(start = 0) "Real part of complex number";
 Real PhB.i[4].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[5].re(start = 0) "Real part of complex number";
 Real PhB.i[5].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[6].re(start = 0) "Real part of complex number";
 Real PhB.i[6].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[7].re(start = 0) "Real part of complex number";
 Real PhB.i[7].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[8].re(start = 0) "Real part of complex number";
 Real PhB.i[8].im(start = 0) "Imaginary part of complex number";
 Real PhB.omega;
 structural (loadResource) parameter String PhC.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" */;
 structural parameter String PhC.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" */;
 structural parameter Real PhC.magDataMat[1,1] = 0.2719091281810751 /* 0.2719091281810751 */;
 structural parameter Real PhC.magDataMat[2,1] = 491.7835718293929 /* 491.7835718293929 */;
 structural parameter Real PhC.magDataMat[3,1] = 0.3388220554753613 /* 0.3388220554753613 */;
 structural parameter Real PhC.magDataMat[4,1] = 1.2560872424865368 /* 1.2560872424865368 */;
 structural parameter Real PhC.magDataMat[5,1] = 0.0837965376619556 /* 0.0837965376619556 */;
 structural parameter Real PhC.magDataMat[6,1] = 1.049579074569396 /* 1.049579074569396 */;
 structural parameter Real PhC.magDataMat[7,1] = 0.0479633900797327 /* 0.0479633900797327 */;
 structural parameter Real PhC.magDataMat[8,1] = 2.232243217516371 /* 2.232243217516371 */;
 structural parameter Real PhC.magDataMat[9,1] = 0.0613261670877852 /* 0.0613261670877852 */;
 structural parameter Real PhC.magDataMat[10,1] = 0.3085661753673511 /* 0.3085661753673511 */;
 structural parameter Real PhC.magDataMat[11,1] = 0.0894017215045658 /* 0.0894017215045658 */;
 structural parameter Real PhC.magDataMat[12,1] = 1.6340384052716668 /* 1.6340384052716668 */;
 structural parameter Real PhC.magDataMat[13,1] = 0.0360394590491708 /* 0.0360394590491708 */;
 structural parameter Real PhC.magDataMat[14,1] = 0.6080350350042865 /* 0.6080350350042865 */;
 structural parameter Real PhC.magDataMat[15,1] = 0.0144866764815914 /* 0.0144866764815914 */;
 structural parameter Real PhC.magDataMat[16,1] = 0.0616593186094572 /* 0.0616593186094572 */;
 structural parameter Real PhC.magDataMat[17,1] = 0.0526340810138655 /* 0.0526340810138655 */;
 structural parameter Real PhC.magDataMat[18,1] = 0.8610409933552359 /* 0.8610409933552359 */;
 structural parameter Real PhC.magDataMat[19,1] = 0.0223544380084765 /* 0.0223544380084765 */;
 structural parameter Real PhC.magDataMat[20,1] = 0.1965193072432281 /* 0.1965193072432281 */;
 structural parameter Real PhC.magDataMat[21,1] = 0.0820234182998287 /* 0.0820234182998287 */;
 structural parameter Real PhC.magDataMat[22,1] = 0.0475998645936773 /* 0.0475998645936773 */;
 structural parameter Real PhC.magDataMat[23,1] = 0.1031046389723781 /* 0.1031046389723781 */;
 structural parameter Real PhC.magDataMat[24,1] = 0.2083187534520808 /* 0.2083187534520808 */;
 structural parameter Real PhC.magDataMat[25,1] = 0.0208153705589776 /* 0.0208153705589776 */;
 structural parameter Real PhC.magDataMat[26,1] = 0.0678806501902422 /* 0.0678806501902422 */;
 structural parameter Real PhC.magDataMat[27,1] = 0.1312213892402629 /* 0.1312213892402629 */;
 structural parameter Real PhC.magDataMat[28,1] = 0.0355695042062854 /* 0.0355695042062854 */;
 structural parameter Real PhC.magDataMat[29,1] = 0.1405141155536664 /* 0.1405141155536664 */;
 structural parameter Real PhC.magDataMat[30,1] = 0.1917926361699222 /* 0.1917926361699222 */;
 structural parameter Real PhC.magDataMat[31,1] = 0.0151716866761024 /* 0.0151716866761024 */;
 structural parameter Real PhC.magDataMat[32,1] = 0.0441299911973412 /* 0.0441299911973412 */;
 structural parameter Real PhC.argDataMat[1,1] = -1.5707963267948966 /* -1.5707963267948966 */;
 structural parameter Real PhC.argDataMat[2,1] = 2.1002127315831656 /* 2.1002127315831656 */;
 structural parameter Real PhC.argDataMat[3,1] = 2.626463259293345 /* 2.626463259293345 */;
 structural parameter Real PhC.argDataMat[4,1] = 2.213433315249527 /* 2.213433315249527 */;
 structural parameter Real PhC.argDataMat[5,1] = 1.9305801732284436 /* 1.9305801732284436 */;
 structural parameter Real PhC.argDataMat[6,1] = -2.287526674673138 /* -2.287526674673138 */;
 structural parameter Real PhC.argDataMat[7,1] = 2.4365080165904245 /* 2.4365080165904245 */;
 structural parameter Real PhC.argDataMat[8,1] = -0.0814742736872363 /* -0.0814742736872363 */;
 structural parameter Real PhC.argDataMat[9,1] = -1.384994505036182 /* -1.384994505036182 */;
 structural parameter Real PhC.argDataMat[10,1] = 1.0470875569304956 /* 1.0470875569304956 */;
 structural parameter Real PhC.argDataMat[11,1] = 2.631009325075965 /* 2.631009325075965 */;
 structural parameter Real PhC.argDataMat[12,1] = -2.0524997537545646 /* -2.0524997537545646 */;
 structural parameter Real PhC.argDataMat[13,1] = 3.1325135086188496 /* 3.1325135086188496 */;
 structural parameter Real PhC.argDataMat[14,1] = -2.3307335874922797 /* -2.3307335874922797 */;
 structural parameter Real PhC.argDataMat[15,1] = 0.0369170525554631 /* 0.0369170525554631 */;
 structural parameter Real PhC.argDataMat[16,1] = 1.98109019446484 /* 1.98109019446484 */;
 structural parameter Real PhC.argDataMat[17,1] = -1.5401794110408888 /* -1.5401794110408888 */;
 structural parameter Real PhC.argDataMat[18,1] = 0.6878100982576986 /* 0.6878100982576986 */;
 structural parameter Real PhC.argDataMat[19,1] = 1.8960282037310516 /* 1.8960282037310516 */;
 structural parameter Real PhC.argDataMat[20,1] = 1.905818739906312 /* 1.905818739906312 */;
 structural parameter Real PhC.argDataMat[21,1] = -0.8685007111657533 /* -0.8685007111657533 */;
 structural parameter Real PhC.argDataMat[22,1] = 0.9586173036243184 /* 0.9586173036243184 */;
 structural parameter Real PhC.argDataMat[23,1] = -2.359173994218259 /* -2.359173994218259 */;
 structural parameter Real PhC.argDataMat[24,1] = -3.0830059554674554 /* -3.0830059554674554 */;
 structural parameter Real PhC.argDataMat[25,1] = 2.345527303073058 /* 2.345527303073058 */;
 structural parameter Real PhC.argDataMat[26,1] = -1.6859722132521102 /* -1.6859722132521102 */;
 structural parameter Real PhC.argDataMat[27,1] = -1.8371613968199139 /* -1.8371613968199139 */;
 structural parameter Real PhC.argDataMat[28,1] = -2.6180299851214954 /* -2.6180299851214954 */;
 structural parameter Real PhC.argDataMat[29,1] = 2.891302880891181 /* 2.891302880891181 */;
 structural parameter Real PhC.argDataMat[30,1] = 2.9641683759106843 /* 2.9641683759106843 */;
 structural parameter Real PhC.argDataMat[31,1] = 3.108553064967207 /* 3.108553064967207 */;
 structural parameter Real PhC.argDataMat[32,1] = -1.056675653397591 /* -1.056675653397591 */;
 Modelica.SIunits.Angle PhC.theta(start = 0);
 constant Real PhC.v[1].re(start = 0) = 1.664963217429505E-17 "Real part of complex number";
 constant Real PhC.v[1].im(start = 0) = -0.2719091281810751 "Imaginary part of complex number";
 constant Real PhC.v[2].re(start = 0) = -248.3653220750918 "Real part of complex number";
 constant Real PhC.v[2].im(start = 0) = 424.4593600237973 "Imaginary part of complex number";
 constant Real PhC.v[3].re(start = 0) = -0.29485277302954244 "Real part of complex number";
 constant Real PhC.v[3].im(start = 0) = 0.1669198236080363 "Imaginary part of complex number";
 constant Real PhC.v[4].re(start = 0) = -0.7527837357957233 "Real part of complex number";
 constant Real PhC.v[4].im(start = 0) = 1.0055206650580915 "Imaginary part of complex number";
 constant Real PhC.v[5].re(start = 0) = -0.029502408541760127 "Real part of complex number";
 constant Real PhC.v[5].im(start = 0) = 0.07843129231605599 "Imaginary part of complex number";
 constant Real PhC.v[6].re(start = 0) = -0.6894926433666458 "Real part of complex number";
 constant Real PhC.v[6].im(start = 0) = -0.7913381884613084 "Imaginary part of complex number";
 constant Real PhC.v[7].re(start = 0) = -0.0365268411368637 "Real part of complex number";
 constant Real PhC.v[7].im(start = 0) = 0.031084990984443336 "Imaginary part of complex number";
 constant Real PhC.v[8].re(start = 0) = 2.22483843582757 "Real part of complex number";
 constant Real PhC.v[8].im(start = 0) = -0.18166925059616615 "Imaginary part of complex number";
 Real PhC.i[1].re(start = 0) "Real part of complex number";
 Real PhC.i[1].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[2].re(start = 0) "Real part of complex number";
 Real PhC.i[2].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[3].re(start = 0) "Real part of complex number";
 Real PhC.i[3].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[4].re(start = 0) "Real part of complex number";
 Real PhC.i[4].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[5].re(start = 0) "Real part of complex number";
 Real PhC.i[5].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[6].re(start = 0) "Real part of complex number";
 Real PhC.i[6].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[7].re(start = 0) "Real part of complex number";
 Real PhC.i[7].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[8].re(start = 0) "Real part of complex number";
 Real PhC.i[8].im(start = 0) "Imaginary part of complex number";
 Real PhC.omega;
 constant String test_DY.properties.ComponentType = "MultiPhaseTransformer" "Type of the component";
 parameter Integer test_DY.N = 10 "Turns ration" /* 10 */;
 constant String test_DY.idealTransformer1.properties.ComponentType = "Transformer" "Type of the component";
 parameter Integer temp_179[2];
 constant Real test_DY.idealTransformer1.vPrim[1].re = -1.561849207604163E-17 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[1].im = 0.2887489239323291 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[2].re = 739.6404508408848 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[2].im = -420.6489084436229 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[3].re = 0.7567109508488981 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[3].im = -0.2063771226672181 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[4].re = 1.7898089975038416 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[4].im = -0.8659344317414527 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[5].re = 0.22603477498920285 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[5].im = -0.2038376613590197 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[6].re = 2.255880705635505 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[6].im = 1.3404914872565734 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[7].re = 0.1883530195357923 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[7].im = -0.034121541733754694 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[8].re = -3.6519308170384717 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[8].im = -1.0886799619162346 "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[1].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[1].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[2].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[2].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[3].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[3].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[4].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[4].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[5].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[5].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[6].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[6].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[7].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[7].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[8].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[8].im "Imaginary part of complex number";
 parameter Real temp_180[1,1];
 constant Real test_DY.idealTransformer2.vPrim[1].re = 1.648107846440034E-17 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[1].im = 0.26915643720091553 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[2].re = -734.2239485021312 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[2].im = -432.0491823926365 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[3].re = -0.6320002264350746 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[3].im = -0.08105270330183115 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[4].re = -1.318497704304527 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[4].im = -1.2860808268696764 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[5].re = -0.35916722202472995 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[5].im = 0.17253739012620686 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[6].re = -2.444594256525634 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[6].im = -0.30835196860128705 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[7].re = -0.2666809887614493 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[7].im = -0.03009926103130578 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[8].re = 0.6284929120840944 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[8].im = 2.7234088792948845 "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[1].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[1].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[2].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[2].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[3].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[3].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[4].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[4].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[5].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[5].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[6].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[6].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[7].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[7].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[8].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[8].im "Imaginary part of complex number";
 parameter Real temp_180[2,1];
 constant Real test_DY.idealTransformer3.vPrim[1].re = -8.625863883587114E-19 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[1].im = -0.5579053611332446 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[2].re = -5.416502338753531 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[2].im = 852.6980908362593 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[3].re = -0.12471072441382336 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[3].im = 0.28742982596904926 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[4].re = -0.4713112931993148 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[4].im = 2.1520152586111294 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[5].re = 0.1331324470355271 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[5].im = 0.03130027123281286 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[6].re = 0.18871355089012887 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[6].im = -1.0321395186552864 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[7].re = 0.07832796922565702 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[7].im = 0.06422080276506047 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[8].re = 3.0234379049543776 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[8].im = -1.63472891737865 "Imaginary part of complex number";
 parameter Real temp_180[3,1];
 parameter Real temp_180[4,1];
 parameter Real temp_180[5,1];
 parameter Real temp_180[6,1];
 parameter Real temp_180[7,1];
 parameter Real temp_180[8,1];
 parameter Real temp_180[9,1];
 parameter Real temp_180[10,1];
 parameter Real temp_180[11,1];
 parameter Real temp_180[12,1];
 parameter Real temp_180[13,1];
 parameter Real temp_180[14,1];
 parameter Real temp_180[15,1];
 parameter Real temp_180[16,1];
 parameter Real temp_180[17,1];
 parameter Real temp_180[18,1];
 Real test_DY.hPin_N.iIm[1];
 Real test_DY.hPin_N.iIm[2];
 Real test_DY.hPin_N.iIm[3];
 Real test_DY.hPin_N.iIm[4];
 Real test_DY.hPin_N.iIm[5];
 Real test_DY.hPin_N.iIm[6];
 Real test_DY.hPin_N.iIm[7];
 Real test_DY.hPin_N.iIm[8];
 Real test_DY.hPin_N.iRe[1];
 Real test_DY.hPin_N.iRe[2];
 Real test_DY.hPin_N.iRe[3];
 Real test_DY.hPin_N.iRe[4];
 Real test_DY.hPin_N.iRe[5];
 Real test_DY.hPin_N.iRe[6];
 Real test_DY.hPin_N.iRe[7];
 Real test_DY.hPin_N.iRe[8];
 constant String ground.properties.ComponentType = "Ground" "Type of the component";
 Real ground.pin.iIm[1];
 Real ground.pin.iIm[2];
 Real ground.pin.iIm[3];
 Real ground.pin.iIm[4];
 Real ground.pin.iIm[5];
 Real ground.pin.iIm[6];
 Real ground.pin.iIm[7];
 Real ground.pin.iIm[8];
 Real ground.pin.iRe[1];
 Real ground.pin.iRe[2];
 Real ground.pin.iRe[3];
 Real ground.pin.iRe[4];
 Real ground.pin.iRe[5];
 Real ground.pin.iRe[6];
 Real ground.pin.iRe[7];
 Real ground.pin.iRe[8];
 constant String laptop2.properties.ComponentType = "NonlinearLoad" "Type of the component";
 parameter Real laptop2.V_Rect(start = 0) = 19.5 "Rectifier DC output" /* 19.5 */;
 parameter Real laptop2.efficiency(start = 1) = 0.9 "Rectifier efficiency (replace with efficiency model or curve)" /* 0.9 */;
 parameter Real laptop2.rectifierModel = 0 "Rectifier model (Other model parameters passed as a record?)" /* 0 */;
 parameter Real temp_180[19,1];
 parameter Real temp_180[20,1];
 parameter Real temp_180[21,1];
 parameter Real temp_180[22,1];
 parameter Real temp_180[23,1];
 parameter Real temp_180[24,1];
 parameter Real temp_180[25,1];
 parameter Real temp_180[26,1];
 parameter Real temp_180[27,1];
 parameter Real temp_180[28,1];
 parameter Real temp_180[29,1];
 parameter Real temp_180[30,1];
 parameter Real temp_180[31,1];
 parameter Real temp_180[32,1];
 parameter Real temp_181[1,1];
 parameter Real temp_181[2,1];
 parameter Real temp_181[3,1];
 Real laptop2.loadBase.i[1].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[1].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[2].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[2].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[3].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[3].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[4].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[4].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[5].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[5].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[6].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[6].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[7].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[7].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[8].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[8].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.omega;
 parameter Real temp_181[4,1];
 Real laptop2.I_mag[1];
 Real laptop2.I_mag[2];
 Real laptop2.I_mag[3];
 Real laptop2.I_mag[4];
 Real laptop2.I_mag[5];
 Real laptop2.I_mag[6];
 Real laptop2.I_mag[7];
 Real laptop2.I_mag[8];
 Real laptop2.I_arg[1];
 Real laptop2.I_arg[2];
 Real laptop2.I_arg[3];
 Real laptop2.I_arg[4];
 Real laptop2.I_arg[5];
 Real laptop2.I_arg[6];
 Real laptop2.I_arg[7];
 Real laptop2.I_arg[8];
 parameter Real temp_181[5,1];
 parameter Real temp_181[6,1];
 parameter Real temp_181[7,1];
 parameter Real temp_181[8,1];
 parameter Real temp_181[9,1];
 parameter Real temp_181[10,1];
 parameter Real temp_181[11,1];
 parameter Real temp_181[12,1];
 parameter Real temp_181[13,1];
 parameter Real temp_181[14,1];
 parameter Real temp_181[15,1];
 parameter Real temp_181[16,1];
 parameter Real temp_181[17,1];
 parameter Real temp_181[18,1];
 parameter Real temp_181[19,1];
 parameter Real temp_181[20,1];
 parameter Real temp_181[21,1];
 parameter Real temp_181[22,1];
 structural (loadResource) parameter String laptop2.modelFileName = "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" "Rectifier harmonic model mat file" /* "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" */;
 structural parameter String laptop2.resourceRetValue = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" */;
 structural parameter Integer laptop2.matDim[1] = 16 /* 16 */;
 structural parameter Real laptop2.magDataMat[1,1] = 0.9999999999999999 /* 0.9999999999999999 */;
 structural parameter Real laptop2.magDataMat[2,1] = 0.9486974344201337 /* 0.9486974344201337 */;
 structural parameter Real laptop2.magDataMat[3,1] = 0.9221155376813399 /* 0.9221155376813399 */;
 structural parameter Real laptop2.magDataMat[4,1] = 0.8849332521469448 /* 0.8849332521469448 */;
 structural parameter Real laptop2.magDataMat[5,1] = 0.8475867045468796 /* 0.8475867045468796 */;
 structural parameter Real laptop2.magDataMat[6,1] = 0.7944241839808487 /* 0.7944241839808487 */;
 structural parameter Real laptop2.magDataMat[7,1] = 0.7230242274654483 /* 0.7230242274654483 */;
 structural parameter Real laptop2.magDataMat[8,1] = 0.6688914048386135 /* 0.6688914048386135 */;
 structural parameter Real laptop2.magDataMat[9,1] = 0.5939253865608557 /* 0.5939253865608557 */;
 structural parameter Real laptop2.magDataMat[10,1] = 0.5280196623121391 /* 0.5280196623121391 */;
 structural parameter Real laptop2.magDataMat[11,1] = 0.4568186887780485 /* 0.4568186887780485 */;
 structural parameter Real laptop2.magDataMat[12,1] = 0.3861474201640431 /* 0.3861474201640431 */;
 structural parameter Real laptop2.magDataMat[13,1] = 0.3163533253631282 /* 0.3163533253631282 */;
 structural parameter Real laptop2.magDataMat[14,1] = 0.2534864723066213 /* 0.2534864723066213 */;
 structural parameter Real laptop2.magDataMat[15,1] = 0.1920046370077911 /* 0.1920046370077911 */;
 structural parameter Real laptop2.magDataMat[16,1] = 0.1442126307974456 /* 0.1442126307974456 */;
 structural parameter Real laptop2.argDataMat[1,1] = 0.3053419323150846 /* 0.3053419323150846 */;
 structural parameter Real laptop2.argDataMat[2,1] = -2.8182357929499515 /* -2.8182357929499515 */;
 structural parameter Real laptop2.argDataMat[3,1] = 0.5364901833841553 /* 0.5364901833841553 */;
 structural parameter Real laptop2.argDataMat[4,1] = -2.381193752481799 /* -2.381193752481799 */;
 structural parameter Real laptop2.argDataMat[5,1] = 0.9688071004089418 /* 0.9688071004089418 */;
 structural parameter Real laptop2.argDataMat[6,1] = -1.959495555161772 /* -1.959495555161772 */;
 structural parameter Real laptop2.argDataMat[7,1] = 1.4013739855750704 /* 1.4013739855750704 */;
 structural parameter Real laptop2.argDataMat[8,1] = -1.5329775105321843 /* -1.5329775105321843 */;
 structural parameter Real laptop2.argDataMat[9,1] = 1.8276649690040103 /* 1.8276649690040103 */;
 structural parameter Real laptop2.argDataMat[10,1] = -1.1106883983886444 /* -1.1106883983886444 */;
 structural parameter Real laptop2.argDataMat[11,1] = 2.2426384598738585 /* 2.2426384598738585 */;
 structural parameter Real laptop2.argDataMat[12,1] = -0.6809000975704675 /* -0.6809000975704675 */;
 structural parameter Real laptop2.argDataMat[13,1] = 2.648460001811645 /* 2.648460001811645 */;
 structural parameter Real laptop2.argDataMat[14,1] = -0.2835615514742411 /* -0.2835615514742411 */;
 structural parameter Real laptop2.argDataMat[15,1] = 3.0642644296286683 /* 3.0642644296286683 */;
 structural parameter Real laptop2.argDataMat[16,1] = 0.0716470412434909 /* 0.0716470412434909 */;
 constant Real laptop2.argS = -0.3053419323150846 "Phase angle for fundamental apparent power";
 Real laptop2.magScale;
 parameter Real temp_181[23,1];
 parameter Real temp_181[24,1];
 parameter Real temp_181[25,1];
 parameter Real temp_181[26,1];
 parameter Real temp_181[27,1];
 parameter Real temp_181[28,1];
 parameter Real temp_181[29,1];
 parameter Real temp_181[30,1];
 parameter Real temp_181[31,1];
 parameter Real temp_181[32,1];
 parameter Integer temp_182[1];
 parameter Integer temp_182[2];
 parameter Real temp_183[1,1];
 parameter Real temp_183[2,1];
 parameter Real temp_183[3,1];
 parameter Real temp_183[4,1];
 parameter Real temp_183[5,1];
 parameter Real temp_183[6,1];
 parameter Real temp_183[7,1];
 parameter Real temp_183[8,1];
 parameter Real temp_183[9,1];
 Real laptop2.c[1];
 Real laptop2.c[2];
 Real laptop2.c[3];
 Real laptop2.c[4];
 Real laptop2.c[5];
 Real laptop2.c[6];
 Real laptop2.c[7];
 parameter Real led_driver.V_Rect(start = 0) = 24 "Rectifier DC output" /* 24 */;
 parameter Real led_driver.efficiency(start = 1) = 0.9 "Rectifier efficiency (replace with efficiency model or curve)" /* 0.9 */;
 parameter Real led_driver.rectifierModel = 0 "Rectifier model (Other model parameters passed as a record?)" /* 0 */;
 parameter Real temp_183[10,1];
 parameter Real temp_183[11,1];
 parameter Real temp_183[12,1];
 parameter Real temp_183[13,1];
 parameter Real temp_183[14,1];
 parameter Real temp_183[15,1];
 parameter Real temp_183[16,1];
 parameter Real temp_183[17,1];
 parameter Real temp_183[18,1];
 parameter Real temp_183[19,1];
 parameter Real temp_183[20,1];
 parameter Real temp_183[21,1];
 parameter Real temp_183[22,1];
 parameter Real temp_183[23,1];
 parameter Real temp_183[24,1];
 parameter Real temp_183[25,1];
 parameter Real temp_183[26,1];
 Real led_driver.loadBase.i[1].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[1].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[2].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[2].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[3].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[3].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[4].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[4].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[5].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[5].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[6].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[6].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[7].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[7].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[8].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[8].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.omega;
 parameter Real temp_183[27,1];
 Real led_driver.I_mag[1];
 Real led_driver.I_mag[2];
 Real led_driver.I_mag[3];
 Real led_driver.I_mag[4];
 Real led_driver.I_mag[5];
 Real led_driver.I_mag[6];
 Real led_driver.I_mag[7];
 Real led_driver.I_mag[8];
 Real led_driver.I_arg[1];
 Real led_driver.I_arg[2];
 Real led_driver.I_arg[3];
 Real led_driver.I_arg[4];
 Real led_driver.I_arg[5];
 Real led_driver.I_arg[6];
 Real led_driver.I_arg[7];
 Real led_driver.I_arg[8];
 parameter Real temp_183[28,1];
 parameter Real temp_183[29,1];
 parameter Real temp_183[30,1];
 parameter Real temp_183[31,1];
 parameter Real temp_183[32,1];
 parameter Real temp_184[1,1];
 parameter Real temp_184[2,1];
 parameter Real temp_184[3,1];
 parameter Real temp_184[4,1];
 parameter Real temp_184[5,1];
 parameter Real temp_184[6,1];
 parameter Real temp_184[7,1];
 parameter Real temp_184[8,1];
 parameter Real temp_184[9,1];
 parameter Real temp_184[10,1];
 parameter Real temp_184[11,1];
 parameter Real temp_184[12,1];
 parameter Real temp_184[13,1];
 structural (loadResource) parameter String led_driver.modelFileName = "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" "Rectifier harmonic model mat file" /* "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" */;
 structural parameter String led_driver.resourceRetValue = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" */;
 structural parameter Real led_driver.magDataMat[1,1] = 1.0 /* 1.0 */;
 structural parameter Real led_driver.magDataMat[2,1] = 0.890432111870432 /* 0.890432111870432 */;
 structural parameter Real led_driver.magDataMat[3,1] = 0.7418107134668804 /* 0.7418107134668804 */;
 structural parameter Real led_driver.magDataMat[4,1] = 0.567293049298617 /* 0.567293049298617 */;
 structural parameter Real led_driver.magDataMat[5,1] = 0.3936692199400683 /* 0.3936692199400683 */;
 structural parameter Real led_driver.magDataMat[6,1] = 0.2525656583874291 /* 0.2525656583874291 */;
 structural parameter Real led_driver.magDataMat[7,1] = 0.1565031895698116 /* 0.1565031895698116 */;
 structural parameter Real led_driver.magDataMat[8,1] = 0.1085784608235925 /* 0.1085784608235925 */;
 structural parameter Real led_driver.magDataMat[9,1] = 0.1028049066991282 /* 0.1028049066991282 */;
 structural parameter Real led_driver.magDataMat[10,1] = 0.1116701804666674 /* 0.1116701804666674 */;
 structural parameter Real led_driver.magDataMat[11,1] = 0.1074207968075735 /* 0.1074207968075735 */;
 structural parameter Real led_driver.magDataMat[12,1] = 0.0874748765804625 /* 0.0874748765804625 */;
 structural parameter Real led_driver.magDataMat[13,1] = 0.05783641101013 /* 0.05783641101013 */;
 structural parameter Real led_driver.magDataMat[14,1] = 0.0366390283673692 /* 0.0366390283673692 */;
 structural parameter Real led_driver.magDataMat[15,1] = 0.0289014631844665 /* 0.0289014631844665 */;
 structural parameter Real led_driver.magDataMat[16,1] = 0.0275187725558538 /* 0.0275187725558538 */;
 structural parameter Real led_driver.argDataMat[1,1] = 0.3875666016022497 /* 0.3875666016022497 */;
 structural parameter Real led_driver.argDataMat[2,1] = -2.1789648209071406 /* -2.1789648209071406 */;
 structural parameter Real led_driver.argDataMat[3,1] = 1.6302868785533633 /* 1.6302868785533633 */;
 structural parameter Real led_driver.argDataMat[4,1] = -0.7953249928799604 /* -0.7953249928799604 */;
 structural parameter Real led_driver.argDataMat[5,1] = 3.1273318832610917 /* 3.1273318832610917 */;
 structural parameter Real led_driver.argDataMat[6,1] = 0.8908122903345195 /* 0.8908122903345195 */;
 structural parameter Real led_driver.argDataMat[7,1] = -1.1864005972204819 /* -1.1864005972204819 */;
 structural parameter Real led_driver.argDataMat[8,1] = -2.999284764233698 /* -2.999284764233698 */;
 structural parameter Real led_driver.argDataMat[9,1] = 1.4699218316090397 /* 1.4699218316090397 */;
 structural parameter Real led_driver.argDataMat[10,1] = -0.606821589236838 /* -0.606821589236838 */;
 structural parameter Real led_driver.argDataMat[11,1] = -2.844685963688736 /* -2.844685963688736 */;
 structural parameter Real led_driver.argDataMat[12,1] = 1.1601646456077166 /* 1.1601646456077166 */;
 structural parameter Real led_driver.argDataMat[13,1] = -1.0323815181519134 /* -1.0323815181519134 */;
 structural parameter Real led_driver.argDataMat[14,1] = -2.9611753908140344 /* -2.9611753908140344 */;
 structural parameter Real led_driver.argDataMat[15,1] = 1.5581822303336441 /* 1.5581822303336441 */;
 structural parameter Real led_driver.argDataMat[16,1] = -0.353240856878104 /* -0.353240856878104 */;
 constant Real led_driver.argS = -0.3875666016022497 "Phase angle for fundamental apparent power";
 Real led_driver.magScale;
 parameter Real temp_184[14,1];
 parameter Real temp_184[15,1];
 parameter Real temp_184[16,1];
 parameter Real temp_184[17,1];
 parameter Real temp_184[18,1];
 parameter Real temp_184[19,1];
 parameter Real temp_184[20,1];
 parameter Real temp_184[21,1];
 parameter Real temp_184[22,1];
 parameter Real temp_184[23,1];
 parameter Real temp_184[24,1];
 parameter Real temp_184[25,1];
 parameter Real temp_184[26,1];
 parameter Real temp_184[27,1];
 parameter Real temp_184[28,1];
 parameter Real temp_184[29,1];
 parameter Real temp_184[30,1];
 parameter Real temp_184[31,1];
 parameter Real temp_184[32,1];
 parameter Integer temp_185[1];
 parameter Integer temp_185[2];
 Real led_driver.c[1];
 Real led_driver.c[2];
 Real led_driver.c[3];
 Real led_driver.c[4];
 Real led_driver.c[5];
 Real led_driver.c[6];
 Real led_driver.c[7];
 Real ground1.pin.iIm[1];
 Real ground1.pin.iIm[2];
 Real ground1.pin.iIm[3];
 Real ground1.pin.iIm[4];
 Real ground1.pin.iIm[5];
 Real ground1.pin.iIm[6];
 Real ground1.pin.iIm[7];
 Real ground1.pin.iIm[8];
 Real ground1.pin.iRe[1];
 Real ground1.pin.iRe[2];
 Real ground1.pin.iRe[3];
 Real ground1.pin.iRe[4];
 Real ground1.pin.iRe[5];
 Real ground1.pin.iRe[6];
 Real ground1.pin.iRe[7];
 Real ground1.pin.iRe[8];
 constant String r.properties.ComponentType = "Resistor" "Type of the component";
 parameter Real r.r(start = 1) = 1000000.0 "Resistance (ohm)" /* 1000000.0 */;
 parameter Real temp_186[1,1];
 parameter Real temp_186[2,1];
 parameter Real temp_186[3,1];
 parameter Real temp_186[4,1];
 parameter Real temp_186[5,1];
 parameter Real temp_186[6,1];
 parameter Real temp_186[7,1];
 parameter Real temp_186[8,1];
 parameter Real temp_186[9,1];
 parameter Real temp_186[10,1];
 parameter Real temp_186[11,1];
 parameter Real temp_186[12,1];
 parameter Real temp_186[13,1];
 parameter Real temp_186[14,1];
 parameter Real temp_186[15,1];
 parameter Real temp_186[16,1];
 parameter Real temp_186[17,1];
 parameter Real temp_186[18,1];
 parameter Real temp_186[19,1];
 parameter Real temp_186[20,1];
 parameter Real temp_186[21,1];
 parameter Real temp_186[22,1];
 parameter Real temp_186[23,1];
 parameter Real temp_186[24,1];
 parameter Real temp_186[25,1];
 parameter Real temp_186[26,1];
 parameter Real temp_186[27,1];
 parameter Real temp_186[28,1];
 parameter Real temp_186[29,1];
 parameter Real temp_186[30,1];
 parameter Real temp_186[31,1];
 parameter Real temp_186[32,1];
 parameter Real temp_187[1,1];
 parameter Real temp_187[2,1];
 parameter Real temp_187[3,1];
 parameter Real temp_187[4,1];
 Real r.omega;
 constant String led_load.properties.ComponentType = "DC_Load" "Type of the component";
 parameter Real led_load.pwr(start = 1) = 50 "Power (watts)" /* 50 */;
 parameter Real temp_187[5,1];
 constant Modelica.SIunits.ElectricPotential ground2.p.v = 0 "Potential at the pin";
 parameter Real temp_187[6,1];
 parameter Real temp_187[7,1];
 parameter Real laptop_load.pwr(start = 1) = 25 "Power (watts)" /* 25 */;
 parameter Real temp_187[8,1];
 constant String zone_1.properties.ComponentType = "ThermalZone" "Type of the component";
 parameter Real temp_187[9,1];
 parameter Real temp_187[10,1];
 parameter Real temp_187[11,1];
 parameter Real temp_187[12,1];
 parameter Real temp_187[13,1];
 parameter Real temp_187[14,1];
 parameter Real temp_187[15,1];
 parameter Real temp_187[16,1];
 parameter Real temp_187[17,1];
 parameter Real temp_187[18,1];
 parameter Real temp_187[19,1];
 parameter Real temp_187[20,1];
 parameter Real temp_187[21,1];
 parameter Real temp_187[22,1];
 parameter Real temp_187[23,1];
 parameter Real temp_187[24,1];
 parameter Real temp_187[25,1];
 parameter Real temp_187[26,1];
 parameter Real temp_187[27,1];
 parameter Real temp_187[28,1];
 parameter Real temp_187[29,1];
 parameter Real temp_187[30,1];
 parameter Real temp_187[31,1];
 parameter Real temp_187[32,1];
 parameter Integer temp_188[1];
 parameter Integer temp_188[2];
 parameter Real temp_189[1,1];
 parameter Real temp_189[2,1];
 parameter Real temp_189[3,1];
 parameter Real temp_189[4,1];
 parameter Real temp_189[5,1];
 parameter Real temp_189[6,1];
 parameter Real temp_189[7,1];
 parameter Real temp_189[8,1];
 parameter Real temp_189[9,1];
 parameter Real temp_189[10,1];
 parameter Real temp_189[11,1];
 parameter Real temp_189[12,1];
 parameter Real temp_189[13,1];
 parameter Real temp_189[14,1];
 parameter Real temp_189[15,1];
 parameter Real temp_189[16,1];
 parameter Real temp_190[1,1];
 parameter Real temp_190[2,1];
 parameter Real temp_190[3,1];
 parameter Real temp_190[4,1];
 parameter Real temp_190[5,1];
 parameter Real temp_190[6,1];
 parameter Real temp_190[7,1];
 parameter Real temp_190[8,1];
 parameter Real temp_190[9,1];
 parameter Real temp_190[10,1];
 parameter Real temp_190[11,1];
 parameter Real temp_190[12,1];
 parameter Real temp_190[13,1];
 parameter Real temp_190[14,1];
 parameter Real temp_190[15,1];
 parameter Real temp_190[16,1];
 parameter Integer temp_191[1];
 parameter Integer temp_191[2];
 parameter Real temp_192[1,1];
 parameter Real temp_192[2,1];
 parameter Real temp_192[3,1];
 parameter Real temp_192[4,1];
 parameter Real temp_192[5,1];
 parameter Real temp_192[6,1];
 parameter Real temp_192[7,1];
 parameter Real temp_192[8,1];
 parameter Real temp_192[9,1];
 parameter Real temp_192[10,1];
 parameter Real temp_192[11,1];
 parameter Real temp_192[12,1];
 parameter Real temp_192[13,1];
 parameter Real temp_192[14,1];
 parameter Real temp_192[15,1];
 parameter Real temp_192[16,1];
 parameter Real temp_193[1,1];
 parameter Real temp_193[2,1];
 parameter Real temp_193[3,1];
 parameter Real temp_193[4,1];
 parameter Real temp_193[5,1];
 parameter Real temp_193[6,1];
 parameter Real temp_193[7,1];
 parameter Real temp_193[8,1];
 parameter Real temp_193[9,1];
 parameter Real temp_193[10,1];
 parameter Real temp_193[11,1];
 parameter Real temp_193[12,1];
 parameter Real temp_193[13,1];
 parameter Real temp_193[14,1];
 parameter Real temp_193[15,1];
 parameter Real temp_193[16,1];
 parameter Integer systemDef.N "Size of FFT";
 parameter Real test_DY.idealTransformer1.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 parameter Real test_DY.idealTransformer2.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 parameter Real test_DY.idealTransformer3.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 parameter Modelica.SIunits.ElectricPotential laptop2.vDC.V(start = 1) "Value of constant voltage";
 parameter Modelica.SIunits.ElectricPotential led_driver.vDC.V(start = 1) "Value of constant voltage";
 parameter Real temp_457;
 parameter Real temp_472;
 parameter Real temp_487;
 parameter Real temp_502;
 parameter Real temp_517;
 parameter Real temp_532;
 parameter Real temp_547;
 parameter Real temp_562;
 parameter Real temp_857;
 parameter Real temp_872;
 parameter Real temp_887;
 parameter Real temp_902;
 parameter Real temp_917;
 parameter Real temp_932;
 parameter Real temp_947;
 parameter Real temp_962;
 parameter Real temp_1257;
 parameter Real temp_1272;
 parameter Real temp_1287;
 parameter Real temp_1302;
 parameter Real temp_1317;
 parameter Real temp_1332;
 parameter Real temp_1347;
 parameter Real temp_1362;
 parameter Modelica.SIunits.ElectricCurrent laptop_load.i "Current flowing from pin p to pin n";
 parameter Modelica.SIunits.ElectricCurrent led_load.i "Current flowing from pin p to pin n";
 parameter Real led_driver.loadBase.v[1].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[1].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[2].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[2].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[3].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[3].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[4].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[4].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[5].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[5].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[6].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[6].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[7].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[7].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[8].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[8].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[1].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[1].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[2].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[2].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[3].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[3].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[4].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[4].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[5].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[5].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[6].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[6].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[7].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[7].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[8].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[8].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[1].re(start = 0) "Real part of complex number";
 parameter Real r.v[1].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[2].re(start = 0) "Real part of complex number";
 parameter Real r.v[2].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[3].re(start = 0) "Real part of complex number";
 parameter Real r.v[3].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[4].re(start = 0) "Real part of complex number";
 parameter Real r.v[4].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[5].re(start = 0) "Real part of complex number";
 parameter Real r.v[5].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[6].re(start = 0) "Real part of complex number";
 parameter Real r.v[6].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[7].re(start = 0) "Real part of complex number";
 parameter Real r.v[7].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[8].re(start = 0) "Real part of complex number";
 parameter Real r.v[8].im(start = 0) "Imaginary part of complex number";
 parameter Modelica.SIunits.ElectricCurrent ground3.p.i "Current flowing into the pin";
 parameter Real laptop2.P;
 parameter Modelica.SIunits.ElectricCurrent ground2.p.i "Current flowing into the pin";
 parameter Real led_driver.P;
 parameter Real led_driver.V_mag[1];
 parameter Real led_driver.V_arg[1];
 parameter Real led_driver.argAdj[1];
 parameter Real led_driver.argAdj[2];
 parameter Real led_driver.argAdj[3];
 parameter Real led_driver.argAdj[4];
 parameter Real led_driver.argAdj[5];
 parameter Real led_driver.argAdj[6];
 parameter Real led_driver.argAdj[7];
 parameter Real led_driver.V_mag[2];
 parameter Real led_driver.V_arg[2];
 parameter Real led_driver.V_mag[3];
 parameter Real led_driver.V_arg[3];
 parameter Real led_driver.V_mag[4];
 parameter Real led_driver.V_arg[4];
 parameter Real led_driver.V_mag[5];
 parameter Real led_driver.V_arg[5];
 parameter Real led_driver.V_mag[6];
 parameter Real led_driver.V_arg[6];
 parameter Real led_driver.V_mag[7];
 parameter Real led_driver.V_arg[7];
 parameter Real led_driver.V_mag[8];
 parameter Real led_driver.V_arg[8];
 parameter Real laptop2.V_mag[1];
 parameter Real laptop2.V_arg[1];
 parameter Real laptop2.argAdj[1];
 parameter Real laptop2.argAdj[2];
 parameter Real laptop2.argAdj[3];
 parameter Real laptop2.argAdj[4];
 parameter Real laptop2.argAdj[5];
 parameter Real laptop2.argAdj[6];
 parameter Real laptop2.argAdj[7];
 parameter Real laptop2.V_mag[2];
 parameter Real laptop2.V_arg[2];
 parameter Real laptop2.V_mag[3];
 parameter Real laptop2.V_arg[3];
 parameter Real laptop2.V_mag[4];
 parameter Real laptop2.V_arg[4];
 parameter Real laptop2.V_mag[5];
 parameter Real laptop2.V_arg[5];
 parameter Real laptop2.V_mag[6];
 parameter Real laptop2.V_arg[6];
 parameter Real laptop2.V_mag[7];
 parameter Real laptop2.V_arg[7];
 parameter Real laptop2.V_mag[8];
 parameter Real laptop2.V_arg[8];
 parameter Real r.i[1].re(start = 0) "Real part of complex number";
 parameter Real r.vFundAbs;
 parameter Real r.vFundArg;
 parameter Real r.i[1].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[2].re(start = 0) "Real part of complex number";
 parameter Real r.i[2].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[3].re(start = 0) "Real part of complex number";
 parameter Real r.i[3].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[4].re(start = 0) "Real part of complex number";
 parameter Real r.i[4].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[5].re(start = 0) "Real part of complex number";
 parameter Real r.i[5].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[6].re(start = 0) "Real part of complex number";
 parameter Real r.i[6].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[7].re(start = 0) "Real part of complex number";
 parameter Real r.i[7].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[8].re(start = 0) "Real part of complex number";
 parameter Real r.i[8].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.S(start = 1) "Apparent power at fundamental";
 parameter Modelica.Blocks.Interfaces.RealInput zone_2.u;
 parameter Real led_driver.S(start = 1) "Apparent power at fundamental";
 parameter Modelica.Blocks.Interfaces.RealInput zone_1.u;
 parameter Real led_driver.a[1].re "Real part of complex number";
 parameter Real led_driver.a[1].im "Imaginary part of complex number";
 parameter Real led_driver.a[2].re "Real part of complex number";
 parameter Real led_driver.a[2].im "Imaginary part of complex number";
 parameter Real led_driver.a[3].re "Real part of complex number";
 parameter Real led_driver.a[3].im "Imaginary part of complex number";
 parameter Real led_driver.a[4].re "Real part of complex number";
 parameter Real led_driver.a[4].im "Imaginary part of complex number";
 parameter Real led_driver.a[5].re "Real part of complex number";
 parameter Real led_driver.a[5].im "Imaginary part of complex number";
 parameter Real led_driver.a[6].re "Real part of complex number";
 parameter Real led_driver.a[6].im "Imaginary part of complex number";
 parameter Real led_driver.a[7].re "Real part of complex number";
 parameter Real led_driver.a[7].im "Imaginary part of complex number";
 parameter Real laptop2.a[1].re "Real part of complex number";
 parameter Real laptop2.a[1].im "Imaginary part of complex number";
 parameter Real laptop2.a[2].re "Real part of complex number";
 parameter Real laptop2.a[2].im "Imaginary part of complex number";
 parameter Real laptop2.a[3].re "Real part of complex number";
 parameter Real laptop2.a[3].im "Imaginary part of complex number";
 parameter Real laptop2.a[4].re "Real part of complex number";
 parameter Real laptop2.a[4].im "Imaginary part of complex number";
 parameter Real laptop2.a[5].re "Real part of complex number";
 parameter Real laptop2.a[5].im "Imaginary part of complex number";
 parameter Real laptop2.a[6].re "Real part of complex number";
 parameter Real laptop2.a[6].im "Imaginary part of complex number";
 parameter Real laptop2.a[7].re "Real part of complex number";
 parameter Real laptop2.a[7].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[1].re "Real part of complex number";
 parameter Real r.iFundAbs;
 parameter Real r.iFundArg;
 parameter Real test_DY.idealTransformer3.iPrim[1].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[2].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[2].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[3].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[3].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[4].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[4].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[5].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[5].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[6].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[6].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[7].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[7].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[8].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[8].im "Imaginary part of complex number";
 parameter Real laptop2.Q(start = 1) "Imaginary power at fundamental";
 parameter Real led_driver.Q(start = 1) "Imaginary power at fundamental";
initial equation
 algorithm
;
parameter equation
 ({temp_179[1], temp_179[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "magV");
 ({{temp_180[1,1]}, {temp_180[2,1]}, {temp_180[3,1]}, {temp_180[4,1]}, {temp_180[5,1]}, {temp_180[6,1]}, {temp_180[7,1]}, {temp_180[8,1]}, {temp_180[9,1]}, {temp_180[10,1]}, {temp_180[11,1]}, {temp_180[12,1]}, {temp_180[13,1]}, {temp_180[14,1]}, {temp_180[15,1]}, {temp_180[16,1]}, {temp_180[17,1]}, {temp_180[18,1]}, {temp_180[19,1]}, {temp_180[20,1]}, {temp_180[21,1]}, {temp_180[22,1]}, {temp_180[23,1]}, {temp_180[24,1]}, {temp_180[25,1]}, {temp_180[26,1]}, {temp_180[27,1]}, {temp_180[28,1]}, {temp_180[29,1]}, {temp_180[30,1]}, {temp_180[31,1]}, {temp_180[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "magV", 32, 1, true);
 ({{temp_181[1,1]}, {temp_181[2,1]}, {temp_181[3,1]}, {temp_181[4,1]}, {temp_181[5,1]}, {temp_181[6,1]}, {temp_181[7,1]}, {temp_181[8,1]}, {temp_181[9,1]}, {temp_181[10,1]}, {temp_181[11,1]}, {temp_181[12,1]}, {temp_181[13,1]}, {temp_181[14,1]}, {temp_181[15,1]}, {temp_181[16,1]}, {temp_181[17,1]}, {temp_181[18,1]}, {temp_181[19,1]}, {temp_181[20,1]}, {temp_181[21,1]}, {temp_181[22,1]}, {temp_181[23,1]}, {temp_181[24,1]}, {temp_181[25,1]}, {temp_181[26,1]}, {temp_181[27,1]}, {temp_181[28,1]}, {temp_181[29,1]}, {temp_181[30,1]}, {temp_181[31,1]}, {temp_181[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "argV", 32, 1, true);
 ({temp_182[1], temp_182[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "magV");
 ({{temp_183[1,1]}, {temp_183[2,1]}, {temp_183[3,1]}, {temp_183[4,1]}, {temp_183[5,1]}, {temp_183[6,1]}, {temp_183[7,1]}, {temp_183[8,1]}, {temp_183[9,1]}, {temp_183[10,1]}, {temp_183[11,1]}, {temp_183[12,1]}, {temp_183[13,1]}, {temp_183[14,1]}, {temp_183[15,1]}, {temp_183[16,1]}, {temp_183[17,1]}, {temp_183[18,1]}, {temp_183[19,1]}, {temp_183[20,1]}, {temp_183[21,1]}, {temp_183[22,1]}, {temp_183[23,1]}, {temp_183[24,1]}, {temp_183[25,1]}, {temp_183[26,1]}, {temp_183[27,1]}, {temp_183[28,1]}, {temp_183[29,1]}, {temp_183[30,1]}, {temp_183[31,1]}, {temp_183[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "magV", 32, 1, true);
 ({{temp_184[1,1]}, {temp_184[2,1]}, {temp_184[3,1]}, {temp_184[4,1]}, {temp_184[5,1]}, {temp_184[6,1]}, {temp_184[7,1]}, {temp_184[8,1]}, {temp_184[9,1]}, {temp_184[10,1]}, {temp_184[11,1]}, {temp_184[12,1]}, {temp_184[13,1]}, {temp_184[14,1]}, {temp_184[15,1]}, {temp_184[16,1]}, {temp_184[17,1]}, {temp_184[18,1]}, {temp_184[19,1]}, {temp_184[20,1]}, {temp_184[21,1]}, {temp_184[22,1]}, {temp_184[23,1]}, {temp_184[24,1]}, {temp_184[25,1]}, {temp_184[26,1]}, {temp_184[27,1]}, {temp_184[28,1]}, {temp_184[29,1]}, {temp_184[30,1]}, {temp_184[31,1]}, {temp_184[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "argV", 32, 1, true);
 ({temp_185[1], temp_185[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "magV");
 ({{temp_186[1,1]}, {temp_186[2,1]}, {temp_186[3,1]}, {temp_186[4,1]}, {temp_186[5,1]}, {temp_186[6,1]}, {temp_186[7,1]}, {temp_186[8,1]}, {temp_186[9,1]}, {temp_186[10,1]}, {temp_186[11,1]}, {temp_186[12,1]}, {temp_186[13,1]}, {temp_186[14,1]}, {temp_186[15,1]}, {temp_186[16,1]}, {temp_186[17,1]}, {temp_186[18,1]}, {temp_186[19,1]}, {temp_186[20,1]}, {temp_186[21,1]}, {temp_186[22,1]}, {temp_186[23,1]}, {temp_186[24,1]}, {temp_186[25,1]}, {temp_186[26,1]}, {temp_186[27,1]}, {temp_186[28,1]}, {temp_186[29,1]}, {temp_186[30,1]}, {temp_186[31,1]}, {temp_186[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "magV", 32, 1, true);
 ({{temp_187[1,1]}, {temp_187[2,1]}, {temp_187[3,1]}, {temp_187[4,1]}, {temp_187[5,1]}, {temp_187[6,1]}, {temp_187[7,1]}, {temp_187[8,1]}, {temp_187[9,1]}, {temp_187[10,1]}, {temp_187[11,1]}, {temp_187[12,1]}, {temp_187[13,1]}, {temp_187[14,1]}, {temp_187[15,1]}, {temp_187[16,1]}, {temp_187[17,1]}, {temp_187[18,1]}, {temp_187[19,1]}, {temp_187[20,1]}, {temp_187[21,1]}, {temp_187[22,1]}, {temp_187[23,1]}, {temp_187[24,1]}, {temp_187[25,1]}, {temp_187[26,1]}, {temp_187[27,1]}, {temp_187[28,1]}, {temp_187[29,1]}, {temp_187[30,1]}, {temp_187[31,1]}, {temp_187[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "argV", 32, 1, true);
 ({temp_188[1], temp_188[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "mag");
 ({{temp_189[1,1]}, {temp_189[2,1]}, {temp_189[3,1]}, {temp_189[4,1]}, {temp_189[5,1]}, {temp_189[6,1]}, {temp_189[7,1]}, {temp_189[8,1]}, {temp_189[9,1]}, {temp_189[10,1]}, {temp_189[11,1]}, {temp_189[12,1]}, {temp_189[13,1]}, {temp_189[14,1]}, {temp_189[15,1]}, {temp_189[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "mag", 16, 1, true);
 ({{temp_190[1,1]}, {temp_190[2,1]}, {temp_190[3,1]}, {temp_190[4,1]}, {temp_190[5,1]}, {temp_190[6,1]}, {temp_190[7,1]}, {temp_190[8,1]}, {temp_190[9,1]}, {temp_190[10,1]}, {temp_190[11,1]}, {temp_190[12,1]}, {temp_190[13,1]}, {temp_190[14,1]}, {temp_190[15,1]}, {temp_190[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "arg", 16, 1, true);
 ({temp_191[1], temp_191[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "mag");
 ({{temp_192[1,1]}, {temp_192[2,1]}, {temp_192[3,1]}, {temp_192[4,1]}, {temp_192[5,1]}, {temp_192[6,1]}, {temp_192[7,1]}, {temp_192[8,1]}, {temp_192[9,1]}, {temp_192[10,1]}, {temp_192[11,1]}, {temp_192[12,1]}, {temp_192[13,1]}, {temp_192[14,1]}, {temp_192[15,1]}, {temp_192[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "mag", 16, 1, true);
 ({{temp_193[1,1]}, {temp_193[2,1]}, {temp_193[3,1]}, {temp_193[4,1]}, {temp_193[5,1]}, {temp_193[6,1]}, {temp_193[7,1]}, {temp_193[8,1]}, {temp_193[9,1]}, {temp_193[10,1]}, {temp_193[11,1]}, {temp_193[12,1]}, {temp_193[13,1]}, {temp_193[14,1]}, {temp_193[15,1]}, {temp_193[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "arg", 16, 1, true);
 systemDef.N = integer(floor(systemDef.fs / systemDef.fFund));
 test_DY.idealTransformer1.N = test_DY.N;
 test_DY.idealTransformer2.N = test_DY.N;
 test_DY.idealTransformer3.N = test_DY.N;
 laptop2.vDC.V = laptop2.V_Rect;
 led_driver.vDC.V = led_driver.V_Rect;
 assert(32 == temp_179[1], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_179[2], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.016839795751254 == temp_180[1,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(491.28990594667346 == temp_180[2,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4635405644252304 == temp_180[3,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.0463774223253857 == temp_180[4,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2331345715632324 == temp_180[5,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6598617132749682 == temp_180[6,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1518565411422124 == temp_180[7,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.9105967094709126 == temp_180[8,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1386948308207945 == temp_180[9,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5251811665424375 == temp_180[10,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0877197456635834 == temp_180[11,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.9262797730195742 == temp_180[12,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1184440683532766 == temp_180[13,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.481422982261235 == temp_180[14,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0544090284431237 == temp_180[15,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1451474507152328 == temp_180[16,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0258533576473125 == temp_180[17,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8951740935763725 == temp_180[18,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.035779586777545 == temp_180[19,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1306259620277833 == temp_180[20,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1030772087446648 == temp_180[21,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0294340894198748 == temp_180[22,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0944957041462652 == temp_180[23,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3245085302933516 == temp_180[24,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0390577054549229 == temp_180[25,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0340450317134204 == temp_180[26,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1097767013072763 == temp_180[27,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0470594525429294 == temp_180[28,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1228566379285578 == temp_180[29,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2164928463914955 == temp_180[30,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0342300079933074 == temp_180[31,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0348258926394183 == temp_180[32,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5707963267948966 == temp_181[1,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0077560921535743 == temp_181[2,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0852246972433012 == temp_181[3,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1337983605530348 == temp_181[4,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.5679607507970243 == temp_181[5,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3371965305429522 == temp_181[6,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0199975129308559 == temp_181[7,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.4142373069782015 == temp_181[8,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6504198353240805 == temp_181[9,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.715056952812912 == temp_181[10,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5102162003333609 == temp_181[11,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.1108023593667606 == temp_181[12,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.262421590602965 == temp_181[13,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.7236257613676265 == temp_181[14,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1515321243259355 == temp_181[15,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.2477226727538361 == temp_181[16,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.7754828141248986 == temp_181[17,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.663073916674371 == temp_181[18,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0318137713960557 == temp_181[19,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2993721368277082 == temp_181[20,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1393837225179722 == temp_181[21,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.391777148898547 == temp_181[22,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5648231015885503 == temp_181[23,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.356629080481576 == temp_181[24,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2671820434478699 == temp_181[25,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.3096759301950636 == temp_181[26,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1696844071201723 == temp_181[27,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0763985737214103 == temp_181[28,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5594469031924515 == temp_181[29,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.2997703855896772 == temp_181[30,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4481215218879092 == temp_181[31,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9517083118310508 == temp_181[32,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(32 == temp_182[1], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_182[2], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.2859962329521695 == temp_183[1,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(492.3540794785275 == temp_183[2,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.208496948122041 == temp_183[3,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1805408036097413 == temp_183[4,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1693263989961228 == temp_183[5,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9106214363027906 == temp_183[6,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1195391546137544 == temp_183[7,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6580541328073826 == temp_183[8,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1269101445860712 == temp_183[9,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3289985189761305 == temp_183[10,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0946942856942096 == temp_183[11,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.0198413017769763 == temp_183[12,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0836821242552161 == temp_183[13,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4924159700118574 == temp_183[14,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0668687465332885 == temp_183[15,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1143872931492812 == temp_183[16,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.076898954125649 == temp_183[17,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9655752395607782 == temp_183[18,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0349853026484666 == temp_183[19,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.226897033607389 == temp_183[20,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.098402544910626 == temp_183[21,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0652517506228442 == temp_183[22,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.08011082638466 == temp_183[23,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1620678510443835 == temp_183[24,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0400637050971903 == temp_183[25,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0561736562706734 == temp_183[26,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1331380625697481 == temp_183[27,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0296172064955882 == temp_183[28,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.094827068391166 == temp_183[29,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2157544231279243 == temp_183[30,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0180623326640486 == temp_183[31,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0434623170353308 == temp_183[32,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5707963267948966 == temp_184[1,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.086840476097504 == temp_184[2,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.5253242170980594 == temp_184[3,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.8115418295128152 == temp_184[4,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.8595229031828926 == temp_184[5,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.8739733224576094 == temp_184[6,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.8607178229132786 == temp_184[7,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.073331261624584 == temp_184[8,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9351292614081848 == temp_184[9,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.1551377562798652 == temp_184[10,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.6094031270218976 == temp_184[11,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.1810033665310717 == temp_184[12,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.8832395214114577 == temp_184[13,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0631873306821448 == temp_184[14,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.133736341444569 == temp_184[15,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9370100120292153 == temp_184[16,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5326277680479188 == temp_184[17,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.4355335492083865 == temp_184[18,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.7058834666324927 == temp_184[19,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.82542395065559 == temp_184[20,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9017038801663326 == temp_184[21,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.6471531147838383 == temp_184[22,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.2664005312148152 == temp_184[23,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.233387596536119 == temp_184[24,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.373672554709982 == temp_184[25,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8816266227593619 == temp_184[26,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.17935104062631 == temp_184[27,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.36233434884658 == temp_184[28,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.275072088990568 == temp_184[29,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9083106039150173 == temp_184[30,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.5000963969047283 == temp_184[31,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.7980169261979593 == temp_184[32,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(32 == temp_185[1], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_185[2], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.2719091281810751 == temp_186[1,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(491.7835718293929 == temp_186[2,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3388220554753613 == temp_186[3,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.2560872424865368 == temp_186[4,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0837965376619556 == temp_186[5,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.049579074569396 == temp_186[6,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0479633900797327 == temp_186[7,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.232243217516371 == temp_186[8,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0613261670877852 == temp_186[9,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3085661753673511 == temp_186[10,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0894017215045658 == temp_186[11,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6340384052716668 == temp_186[12,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0360394590491708 == temp_186[13,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6080350350042865 == temp_186[14,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0144866764815914 == temp_186[15,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0616593186094572 == temp_186[16,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0526340810138655 == temp_186[17,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8610409933552359 == temp_186[18,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0223544380084765 == temp_186[19,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1965193072432281 == temp_186[20,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0820234182998287 == temp_186[21,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0475998645936773 == temp_186[22,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1031046389723781 == temp_186[23,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2083187534520808 == temp_186[24,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0208153705589776 == temp_186[25,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0678806501902422 == temp_186[26,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1312213892402629 == temp_186[27,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0355695042062854 == temp_186[28,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1405141155536664 == temp_186[29,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1917926361699222 == temp_186[30,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0151716866761024 == temp_186[31,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0441299911973412 == temp_186[32,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.5707963267948966 == temp_187[1,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.1002127315831656 == temp_187[2,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.626463259293345 == temp_187[3,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.213433315249527 == temp_187[4,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.9305801732284436 == temp_187[5,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.287526674673138 == temp_187[6,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.4365080165904245 == temp_187[7,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0814742736872363 == temp_187[8,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.384994505036182 == temp_187[9,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.0470875569304956 == temp_187[10,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.631009325075965 == temp_187[11,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.0524997537545646 == temp_187[12,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.1325135086188496 == temp_187[13,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.3307335874922797 == temp_187[14,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0369170525554631 == temp_187[15,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.98109019446484 == temp_187[16,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.5401794110408888 == temp_187[17,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6878100982576986 == temp_187[18,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.8960282037310516 == temp_187[19,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.905818739906312 == temp_187[20,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.8685007111657533 == temp_187[21,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9586173036243184 == temp_187[22,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.359173994218259 == temp_187[23,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-3.0830059554674554 == temp_187[24,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.345527303073058 == temp_187[25,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.6859722132521102 == temp_187[26,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.8371613968199139 == temp_187[27,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.6180299851214954 == temp_187[28,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.891302880891181 == temp_187[29,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.9641683759106843 == temp_187[30,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.108553064967207 == temp_187[31,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.056675653397591 == temp_187[32,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(16 == temp_188[1], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_188[2], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.9999999999999999 == temp_189[1,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9486974344201337 == temp_189[2,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9221155376813399 == temp_189[3,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8849332521469448 == temp_189[4,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8475867045468796 == temp_189[5,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.7944241839808487 == temp_189[6,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.7230242274654483 == temp_189[7,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6688914048386135 == temp_189[8,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5939253865608557 == temp_189[9,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5280196623121391 == temp_189[10,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4568186887780485 == temp_189[11,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3861474201640431 == temp_189[12,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3163533253631282 == temp_189[13,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2534864723066213 == temp_189[14,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1920046370077911 == temp_189[15,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1442126307974456 == temp_189[16,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3053419323150846 == temp_190[1,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.8182357929499515 == temp_190[2,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5364901833841553 == temp_190[3,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.381193752481799 == temp_190[4,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9688071004089418 == temp_190[5,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.959495555161772 == temp_190[6,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.4013739855750704 == temp_190[7,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.5329775105321843 == temp_190[8,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.8276649690040103 == temp_190[9,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.1106883983886444 == temp_190[10,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.2426384598738585 == temp_190[11,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.6809000975704675 == temp_190[12,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.648460001811645 == temp_190[13,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.2835615514742411 == temp_190[14,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.0642644296286683 == temp_190[15,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0716470412434909 == temp_190[16,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(16 == temp_191[1], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_191[2], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1.0 == temp_192[1,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.890432111870432 == temp_192[2,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.7418107134668804 == temp_192[3,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.567293049298617 == temp_192[4,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3936692199400683 == temp_192[5,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2525656583874291 == temp_192[6,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1565031895698116 == temp_192[7,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1085784608235925 == temp_192[8,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1028049066991282 == temp_192[9,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1116701804666674 == temp_192[10,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1074207968075735 == temp_192[11,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0874748765804625 == temp_192[12,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.05783641101013 == temp_192[13,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0366390283673692 == temp_192[14,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0289014631844665 == temp_192[15,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0275187725558538 == temp_192[16,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3875666016022497 == temp_193[1,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.1789648209071406 == temp_193[2,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6302868785533633 == temp_193[3,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.7953249928799604 == temp_193[4,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.1273318832610917 == temp_193[5,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8908122903345195 == temp_193[6,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.1864005972204819 == temp_193[7,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.999284764233698 == temp_193[8,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.4699218316090397 == temp_193[9,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.606821589236838 == temp_193[10,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.844685963688736 == temp_193[11,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1601646456077166 == temp_193[12,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.0323815181519134 == temp_193[13,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9611753908140344 == temp_193[14,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5581822303336441 == temp_193[15,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.353240856878104 == temp_193[16,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 temp_457 = 1 / test_DY.idealTransformer1.N;
 temp_472 = 1 / test_DY.idealTransformer1.N;
 temp_487 = 1 / test_DY.idealTransformer1.N;
 temp_502 = 1 / test_DY.idealTransformer1.N;
 temp_517 = 1 / test_DY.idealTransformer1.N;
 temp_532 = 1 / test_DY.idealTransformer1.N;
 temp_547 = 1 / test_DY.idealTransformer1.N;
 temp_562 = 1 / test_DY.idealTransformer1.N;
 temp_857 = 1 / test_DY.idealTransformer2.N;
 temp_872 = 1 / test_DY.idealTransformer2.N;
 temp_887 = 1 / test_DY.idealTransformer2.N;
 temp_902 = 1 / test_DY.idealTransformer2.N;
 temp_917 = 1 / test_DY.idealTransformer2.N;
 temp_932 = 1 / test_DY.idealTransformer2.N;
 temp_947 = 1 / test_DY.idealTransformer2.N;
 temp_962 = 1 / test_DY.idealTransformer2.N;
 temp_1257 = 1 / test_DY.idealTransformer3.N;
 temp_1272 = 1 / test_DY.idealTransformer3.N;
 temp_1287 = 1 / test_DY.idealTransformer3.N;
 temp_1302 = 1 / test_DY.idealTransformer3.N;
 temp_1317 = 1 / test_DY.idealTransformer3.N;
 temp_1332 = 1 / test_DY.idealTransformer3.N;
 temp_1347 = 1 / test_DY.idealTransformer3.N;
 temp_1362 = 1 / test_DY.idealTransformer3.N;
 laptop_load.i = laptop_load.pwr / laptop2.vDC.V;
 led_load.i = led_load.pwr / led_driver.vDC.V;
 led_driver.loadBase.v[1].re = temp_457 * -1.561849207604163E-17;
 led_driver.loadBase.v[1].im = temp_457 * 0.2887489239323291;
 led_driver.loadBase.v[2].re = temp_472 * 739.6404508408848;
 led_driver.loadBase.v[2].im = temp_472 * -420.6489084436229;
 led_driver.loadBase.v[3].re = temp_487 * 0.7567109508488981;
 led_driver.loadBase.v[3].im = temp_487 * -0.2063771226672181;
 led_driver.loadBase.v[4].re = temp_502 * 1.7898089975038416;
 led_driver.loadBase.v[4].im = temp_502 * -0.8659344317414527;
 led_driver.loadBase.v[5].re = temp_517 * 0.22603477498920285;
 led_driver.loadBase.v[5].im = temp_517 * -0.2038376613590197;
 led_driver.loadBase.v[6].re = temp_532 * 2.255880705635505;
 led_driver.loadBase.v[6].im = temp_532 * 1.3404914872565734;
 led_driver.loadBase.v[7].re = temp_547 * 0.1883530195357923;
 led_driver.loadBase.v[7].im = temp_547 * -0.034121541733754694;
 led_driver.loadBase.v[8].re = temp_562 * -3.6519308170384717;
 led_driver.loadBase.v[8].im = temp_562 * -1.0886799619162346;
 laptop2.loadBase.v[1].re = temp_857 * 1.648107846440034E-17;
 laptop2.loadBase.v[1].im = temp_857 * 0.26915643720091553;
 laptop2.loadBase.v[2].re = temp_872 * -734.2239485021312;
 laptop2.loadBase.v[2].im = temp_872 * -432.0491823926365;
 laptop2.loadBase.v[3].re = temp_887 * -0.6320002264350746;
 laptop2.loadBase.v[3].im = temp_887 * -0.08105270330183115;
 laptop2.loadBase.v[4].re = temp_902 * -1.318497704304527;
 laptop2.loadBase.v[4].im = temp_902 * -1.2860808268696764;
 laptop2.loadBase.v[5].re = temp_917 * -0.35916722202472995;
 laptop2.loadBase.v[5].im = temp_917 * 0.17253739012620686;
 laptop2.loadBase.v[6].re = temp_932 * -2.444594256525634;
 laptop2.loadBase.v[6].im = temp_932 * -0.30835196860128705;
 laptop2.loadBase.v[7].re = temp_947 * -0.2666809887614493;
 laptop2.loadBase.v[7].im = temp_947 * -0.03009926103130578;
 laptop2.loadBase.v[8].re = temp_962 * 0.6284929120840944;
 laptop2.loadBase.v[8].im = temp_962 * 2.7234088792948845;
 r.v[1].re = temp_1257 * -8.625863883587114E-19;
 r.v[1].im = temp_1257 * -0.5579053611332446;
 r.v[2].re = temp_1272 * -5.416502338753531;
 r.v[2].im = temp_1272 * 852.6980908362593;
 r.v[3].re = temp_1287 * -0.12471072441382336;
 r.v[3].im = temp_1287 * 0.28742982596904926;
 r.v[4].re = temp_1302 * -0.4713112931993148;
 r.v[4].im = temp_1302 * 2.1520152586111294;
 r.v[5].re = temp_1317 * 0.1331324470355271;
 r.v[5].im = temp_1317 * 0.03130027123281286;
 r.v[6].re = temp_1332 * 0.18871355089012887;
 r.v[6].im = temp_1332 * -1.0321395186552864;
 r.v[7].re = temp_1347 * 0.07832796922565702;
 r.v[7].im = temp_1347 * 0.06422080276506047;
 r.v[8].re = temp_1362 * 3.0234379049543776;
 r.v[8].im = temp_1362 * -1.63472891737865;
 ground3.p.i = - laptop_load.i + laptop_load.i;
 laptop2.P = abs(laptop2.efficiency * (laptop2.vDC.V * (- laptop_load.i)));
 ground2.p.i = - led_load.i + led_load.i;
 led_driver.P = abs(led_driver.efficiency * (led_driver.vDC.V * (- led_load.i)));
 led_driver.V_mag[1] = (led_driver.loadBase.v[1].re ^ 2 + led_driver.loadBase.v[1].im ^ 2) ^ 0.5;
 led_driver.V_arg[1] = Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0);
 led_driver.argAdj[1] = -2.1789648209071406 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[2]);
 led_driver.argAdj[2] = 1.6302868785533633 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[3]);
 led_driver.argAdj[3] = -0.7953249928799604 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[4]);
 led_driver.argAdj[4] = 3.1273318832610917 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[5]);
 led_driver.argAdj[5] = 0.8908122903345195 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[6]);
 led_driver.argAdj[6] = -1.1864005972204819 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[7]);
 led_driver.argAdj[7] = -2.999284764233698 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[8]);
 led_driver.V_mag[2] = (led_driver.loadBase.v[2].re ^ 2 + led_driver.loadBase.v[2].im ^ 2) ^ 0.5;
 led_driver.V_arg[2] = Modelica.Math.atan3(led_driver.loadBase.v[2].im, led_driver.loadBase.v[2].re, 0);
 led_driver.V_mag[3] = (led_driver.loadBase.v[3].re ^ 2 + led_driver.loadBase.v[3].im ^ 2) ^ 0.5;
 led_driver.V_arg[3] = Modelica.Math.atan3(led_driver.loadBase.v[3].im, led_driver.loadBase.v[3].re, 0);
 led_driver.V_mag[4] = (led_driver.loadBase.v[4].re ^ 2 + led_driver.loadBase.v[4].im ^ 2) ^ 0.5;
 led_driver.V_arg[4] = Modelica.Math.atan3(led_driver.loadBase.v[4].im, led_driver.loadBase.v[4].re, 0);
 led_driver.V_mag[5] = (led_driver.loadBase.v[5].re ^ 2 + led_driver.loadBase.v[5].im ^ 2) ^ 0.5;
 led_driver.V_arg[5] = Modelica.Math.atan3(led_driver.loadBase.v[5].im, led_driver.loadBase.v[5].re, 0);
 led_driver.V_mag[6] = (led_driver.loadBase.v[6].re ^ 2 + led_driver.loadBase.v[6].im ^ 2) ^ 0.5;
 led_driver.V_arg[6] = Modelica.Math.atan3(led_driver.loadBase.v[6].im, led_driver.loadBase.v[6].re, 0);
 led_driver.V_mag[7] = (led_driver.loadBase.v[7].re ^ 2 + led_driver.loadBase.v[7].im ^ 2) ^ 0.5;
 led_driver.V_arg[7] = Modelica.Math.atan3(led_driver.loadBase.v[7].im, led_driver.loadBase.v[7].re, 0);
 led_driver.V_mag[8] = (led_driver.loadBase.v[8].re ^ 2 + led_driver.loadBase.v[8].im ^ 2) ^ 0.5;
 led_driver.V_arg[8] = Modelica.Math.atan3(led_driver.loadBase.v[8].im, led_driver.loadBase.v[8].re, 0);
 laptop2.V_mag[1] = (laptop2.loadBase.v[1].re ^ 2 + laptop2.loadBase.v[1].im ^ 2) ^ 0.5;
 laptop2.V_arg[1] = Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0);
 laptop2.argAdj[1] = -2.8182357929499515 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[2]);
 laptop2.argAdj[2] = 0.5364901833841553 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[3]);
 laptop2.argAdj[3] = -2.381193752481799 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[4]);
 laptop2.argAdj[4] = 0.9688071004089418 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[5]);
 laptop2.argAdj[5] = -1.959495555161772 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[6]);
 laptop2.argAdj[6] = 1.4013739855750704 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[7]);
 laptop2.argAdj[7] = -1.5329775105321843 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[8]);
 laptop2.V_mag[2] = (laptop2.loadBase.v[2].re ^ 2 + laptop2.loadBase.v[2].im ^ 2) ^ 0.5;
 laptop2.V_arg[2] = Modelica.Math.atan3(laptop2.loadBase.v[2].im, laptop2.loadBase.v[2].re, 0);
 laptop2.V_mag[3] = (laptop2.loadBase.v[3].re ^ 2 + laptop2.loadBase.v[3].im ^ 2) ^ 0.5;
 laptop2.V_arg[3] = Modelica.Math.atan3(laptop2.loadBase.v[3].im, laptop2.loadBase.v[3].re, 0);
 laptop2.V_mag[4] = (laptop2.loadBase.v[4].re ^ 2 + laptop2.loadBase.v[4].im ^ 2) ^ 0.5;
 laptop2.V_arg[4] = Modelica.Math.atan3(laptop2.loadBase.v[4].im, laptop2.loadBase.v[4].re, 0);
 laptop2.V_mag[5] = (laptop2.loadBase.v[5].re ^ 2 + laptop2.loadBase.v[5].im ^ 2) ^ 0.5;
 laptop2.V_arg[5] = Modelica.Math.atan3(laptop2.loadBase.v[5].im, laptop2.loadBase.v[5].re, 0);
 laptop2.V_mag[6] = (laptop2.loadBase.v[6].re ^ 2 + laptop2.loadBase.v[6].im ^ 2) ^ 0.5;
 laptop2.V_arg[6] = Modelica.Math.atan3(laptop2.loadBase.v[6].im, laptop2.loadBase.v[6].re, 0);
 laptop2.V_mag[7] = (laptop2.loadBase.v[7].re ^ 2 + laptop2.loadBase.v[7].im ^ 2) ^ 0.5;
 laptop2.V_arg[7] = Modelica.Math.atan3(laptop2.loadBase.v[7].im, laptop2.loadBase.v[7].re, 0);
 laptop2.V_mag[8] = (laptop2.loadBase.v[8].re ^ 2 + laptop2.loadBase.v[8].im ^ 2) ^ 0.5;
 laptop2.V_arg[8] = Modelica.Math.atan3(laptop2.loadBase.v[8].im, laptop2.loadBase.v[8].re, 0);
 r.i[1].re = (- r.v[1].re) / (- r.r);
 r.vFundAbs = (r.v[1].re ^ 2 + r.v[1].im ^ 2) ^ 0.5;
 r.vFundArg = Modelica.Math.atan3(r.v[1].im, r.v[1].re, 0);
 r.i[1].im = (- r.v[1].im) / (- r.r);
 r.i[2].re = (- r.v[2].re) / (- r.r);
 r.i[2].im = (- r.v[2].im) / (- r.r);
 r.i[3].re = (- r.v[3].re) / (- r.r);
 r.i[3].im = (- r.v[3].im) / (- r.r);
 r.i[4].re = (- r.v[4].re) / (- r.r);
 r.i[4].im = (- r.v[4].im) / (- r.r);
 r.i[5].re = (- r.v[5].re) / (- r.r);
 r.i[5].im = (- r.v[5].im) / (- r.r);
 r.i[6].re = (- r.v[6].re) / (- r.r);
 r.i[6].im = (- r.v[6].im) / (- r.r);
 r.i[7].re = (- r.v[7].re) / (- r.r);
 r.i[7].im = (- r.v[7].im) / (- r.r);
 r.i[8].re = (- r.v[8].re) / (- r.r);
 r.i[8].im = (- r.v[8].im) / (- r.r);
 laptop2.S = (- laptop2.P) / -0.9537442168683252;
 zone_2.u = laptop2.P * (1 - laptop2.efficiency) / laptop2.efficiency;
 led_driver.S = (- led_driver.P) / -0.9258314704347416;
 zone_1.u = led_driver.P * (1 - led_driver.efficiency) / led_driver.efficiency;
 led_driver.a[1].re = cos(led_driver.argAdj[1]);
 led_driver.a[1].im = sin(led_driver.argAdj[1]);
 led_driver.a[2].re = cos(led_driver.argAdj[2]);
 led_driver.a[2].im = sin(led_driver.argAdj[2]);
 led_driver.a[3].re = cos(led_driver.argAdj[3]);
 led_driver.a[3].im = sin(led_driver.argAdj[3]);
 led_driver.a[4].re = cos(led_driver.argAdj[4]);
 led_driver.a[4].im = sin(led_driver.argAdj[4]);
 led_driver.a[5].re = cos(led_driver.argAdj[5]);
 led_driver.a[5].im = sin(led_driver.argAdj[5]);
 led_driver.a[6].re = cos(led_driver.argAdj[6]);
 led_driver.a[6].im = sin(led_driver.argAdj[6]);
 led_driver.a[7].re = cos(led_driver.argAdj[7]);
 led_driver.a[7].im = sin(led_driver.argAdj[7]);
 laptop2.a[1].re = cos(laptop2.argAdj[1]);
 laptop2.a[1].im = sin(laptop2.argAdj[1]);
 laptop2.a[2].re = cos(laptop2.argAdj[2]);
 laptop2.a[2].im = sin(laptop2.argAdj[2]);
 laptop2.a[3].re = cos(laptop2.argAdj[3]);
 laptop2.a[3].im = sin(laptop2.argAdj[3]);
 laptop2.a[4].re = cos(laptop2.argAdj[4]);
 laptop2.a[4].im = sin(laptop2.argAdj[4]);
 laptop2.a[5].re = cos(laptop2.argAdj[5]);
 laptop2.a[5].im = sin(laptop2.argAdj[5]);
 laptop2.a[6].re = cos(laptop2.argAdj[6]);
 laptop2.a[6].im = sin(laptop2.argAdj[6]);
 laptop2.a[7].re = cos(laptop2.argAdj[7]);
 laptop2.a[7].im = sin(laptop2.argAdj[7]);
 test_DY.idealTransformer3.iPrim[1].re = r.i[1].re / (- test_DY.idealTransformer3.N);
 r.iFundAbs = (r.i[1].re ^ 2 + r.i[1].im ^ 2) ^ 0.5;
 r.iFundArg = Modelica.Math.atan3(r.i[1].im, r.i[1].re, 0);
 test_DY.idealTransformer3.iPrim[1].im = r.i[1].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[2].re = r.i[2].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[2].im = r.i[2].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[3].re = r.i[3].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[3].im = r.i[3].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[4].re = r.i[4].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[4].im = r.i[4].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[5].re = r.i[5].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[5].im = r.i[5].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[6].re = r.i[6].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[6].im = r.i[6].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[7].re = r.i[7].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[7].im = r.i[7].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[8].re = r.i[8].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[8].im = r.i[8].im / (- test_DY.idealTransformer3.N);
 laptop2.Q = laptop2.S * -0.3006193087448392;
 led_driver.Q = led_driver.S * -0.37793661949147545;
algorithm
equation
 der(PhA.theta) = 6.283185307179586 * systemDef.fFund;
 PhA.omega = der(PhA.theta);
 der(PhB.theta) = 6.283185307179586 * systemDef.fFund;
 PhB.omega = der(PhB.theta);
 der(PhC.theta) = 6.283185307179586 * systemDef.fFund;
 PhC.omega = der(PhC.theta);
 - led_driver.loadBase.i[1].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].re;
 - led_driver.loadBase.i[1].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].im;
 - led_driver.loadBase.i[2].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].re;
 - led_driver.loadBase.i[2].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].im;
 - led_driver.loadBase.i[3].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].re;
 - led_driver.loadBase.i[3].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].im;
 - led_driver.loadBase.i[4].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].re;
 - led_driver.loadBase.i[4].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].im;
 - led_driver.loadBase.i[5].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].re;
 - led_driver.loadBase.i[5].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].im;
 - led_driver.loadBase.i[6].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].re;
 - led_driver.loadBase.i[6].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].im;
 - led_driver.loadBase.i[7].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].re;
 - led_driver.loadBase.i[7].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].im;
 - led_driver.loadBase.i[8].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].re;
 - led_driver.loadBase.i[8].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].im;
 - laptop2.loadBase.i[1].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].re;
 - laptop2.loadBase.i[1].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].im;
 - laptop2.loadBase.i[2].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].re;
 - laptop2.loadBase.i[2].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].im;
 - laptop2.loadBase.i[3].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].re;
 - laptop2.loadBase.i[3].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].im;
 - laptop2.loadBase.i[4].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].re;
 - laptop2.loadBase.i[4].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].im;
 - laptop2.loadBase.i[5].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].re;
 - laptop2.loadBase.i[5].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].im;
 - laptop2.loadBase.i[6].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].re;
 - laptop2.loadBase.i[6].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].im;
 - laptop2.loadBase.i[7].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].re;
 - laptop2.loadBase.i[7].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].im;
 - laptop2.loadBase.i[8].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].re;
 - laptop2.loadBase.i[8].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].im;
 laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im);
 laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re;
 laptop2.loadBase.i[2].re = laptop2.c[1] * laptop2.a[1].re;
 laptop2.loadBase.i[2].im = laptop2.c[1] * laptop2.a[1].im;
 laptop2.loadBase.i[3].re = laptop2.c[2] * laptop2.a[2].re;
 laptop2.loadBase.i[3].im = laptop2.c[2] * laptop2.a[2].im;
 laptop2.loadBase.i[4].re = laptop2.c[3] * laptop2.a[3].re;
 laptop2.loadBase.i[4].im = laptop2.c[3] * laptop2.a[3].im;
 laptop2.loadBase.i[5].re = laptop2.c[4] * laptop2.a[4].re;
 laptop2.loadBase.i[5].im = laptop2.c[4] * laptop2.a[4].im;
 laptop2.loadBase.i[6].re = laptop2.c[5] * laptop2.a[5].re;
 laptop2.loadBase.i[6].im = laptop2.c[5] * laptop2.a[5].im;
 laptop2.loadBase.i[7].re = laptop2.c[6] * laptop2.a[6].re;
 laptop2.loadBase.i[7].im = laptop2.c[6] * laptop2.a[6].im;
 laptop2.loadBase.i[8].re = laptop2.c[7] * laptop2.a[7].re;
 laptop2.loadBase.i[8].im = laptop2.c[7] * laptop2.a[7].im;
algorithm
equation
 laptop2.loadBase.omega = der(PhA.theta);
 led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im);
 led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re;
 led_driver.loadBase.i[2].re = led_driver.c[1] * led_driver.a[1].re;
 led_driver.loadBase.i[2].im = led_driver.c[1] * led_driver.a[1].im;
 led_driver.loadBase.i[3].re = led_driver.c[2] * led_driver.a[2].re;
 led_driver.loadBase.i[3].im = led_driver.c[2] * led_driver.a[2].im;
 led_driver.loadBase.i[4].re = led_driver.c[3] * led_driver.a[3].re;
 led_driver.loadBase.i[4].im = led_driver.c[3] * led_driver.a[3].im;
 led_driver.loadBase.i[5].re = led_driver.c[4] * led_driver.a[4].re;
 led_driver.loadBase.i[5].im = led_driver.c[4] * led_driver.a[4].im;
 led_driver.loadBase.i[6].re = led_driver.c[5] * led_driver.a[5].re;
 led_driver.loadBase.i[6].im = led_driver.c[5] * led_driver.a[5].im;
 led_driver.loadBase.i[7].re = led_driver.c[6] * led_driver.a[6].re;
 led_driver.loadBase.i[7].im = led_driver.c[6] * led_driver.a[6].im;
 led_driver.loadBase.i[8].re = led_driver.c[7] * led_driver.a[7].re;
 led_driver.loadBase.i[8].im = led_driver.c[7] * led_driver.a[7].im;
algorithm
equation
 led_driver.loadBase.omega = der(PhA.theta);
 r.omega = der(PhA.theta);
 - PhA.i[1].im + (- PhB.i[1].im) + (- PhC.i[1].im) + ground.pin.iIm[1] = 0;
 - PhA.i[2].im + (- PhB.i[2].im) + (- PhC.i[2].im) + ground.pin.iIm[2] = 0;
 - PhA.i[3].im + (- PhB.i[3].im) + (- PhC.i[3].im) + ground.pin.iIm[3] = 0;
 - PhA.i[4].im + (- PhB.i[4].im) + (- PhC.i[4].im) + ground.pin.iIm[4] = 0;
 - PhA.i[5].im + (- PhB.i[5].im) + (- PhC.i[5].im) + ground.pin.iIm[5] = 0;
 - PhA.i[6].im + (- PhB.i[6].im) + (- PhC.i[6].im) + ground.pin.iIm[6] = 0;
 - PhA.i[7].im + (- PhB.i[7].im) + (- PhC.i[7].im) + ground.pin.iIm[7] = 0;
 - PhA.i[8].im + (- PhB.i[8].im) + (- PhC.i[8].im) + ground.pin.iIm[8] = 0;
 - PhA.i[1].re + (- PhB.i[1].re) + (- PhC.i[1].re) + ground.pin.iRe[1] = 0;
 - PhA.i[2].re + (- PhB.i[2].re) + (- PhC.i[2].re) + ground.pin.iRe[2] = 0;
 - PhA.i[3].re + (- PhB.i[3].re) + (- PhC.i[3].re) + ground.pin.iRe[3] = 0;
 - PhA.i[4].re + (- PhB.i[4].re) + (- PhC.i[4].re) + ground.pin.iRe[4] = 0;
 - PhA.i[5].re + (- PhB.i[5].re) + (- PhC.i[5].re) + ground.pin.iRe[5] = 0;
 - PhA.i[6].re + (- PhB.i[6].re) + (- PhC.i[6].re) + ground.pin.iRe[6] = 0;
 - PhA.i[7].re + (- PhB.i[7].re) + (- PhC.i[7].re) + ground.pin.iRe[7] = 0;
 - PhA.i[8].re + (- PhB.i[8].re) + (- PhC.i[8].re) + ground.pin.iRe[8] = 0;
 ground1.pin.iIm[1] + (- laptop2.loadBase.i[1].im) + (- led_driver.loadBase.i[1].im) + (- r.i[1].im) + test_DY.hPin_N.iIm[1] = 0;
 ground1.pin.iIm[2] + (- laptop2.loadBase.i[2].im) + (- led_driver.loadBase.i[2].im) + (- r.i[2].im) + test_DY.hPin_N.iIm[2] = 0;
 ground1.pin.iIm[3] + (- laptop2.loadBase.i[3].im) + (- led_driver.loadBase.i[3].im) + (- r.i[3].im) + test_DY.hPin_N.iIm[3] = 0;
 ground1.pin.iIm[4] + (- laptop2.loadBase.i[4].im) + (- led_driver.loadBase.i[4].im) + (- r.i[4].im) + test_DY.hPin_N.iIm[4] = 0;
 ground1.pin.iIm[5] + (- laptop2.loadBase.i[5].im) + (- led_driver.loadBase.i[5].im) + (- r.i[5].im) + test_DY.hPin_N.iIm[5] = 0;
 ground1.pin.iIm[6] + (- laptop2.loadBase.i[6].im) + (- led_driver.loadBase.i[6].im) + (- r.i[6].im) + test_DY.hPin_N.iIm[6] = 0;
 ground1.pin.iIm[7] + (- laptop2.loadBase.i[7].im) + (- led_driver.loadBase.i[7].im) + (- r.i[7].im) + test_DY.hPin_N.iIm[7] = 0;
 ground1.pin.iIm[8] + (- laptop2.loadBase.i[8].im) + (- led_driver.loadBase.i[8].im) + (- r.i[8].im) + test_DY.hPin_N.iIm[8] = 0;
 ground1.pin.iRe[1] + (- laptop2.loadBase.i[1].re) + (- led_driver.loadBase.i[1].re) + (- r.i[1].re) + test_DY.hPin_N.iRe[1] = 0;
 ground1.pin.iRe[2] + (- laptop2.loadBase.i[2].re) + (- led_driver.loadBase.i[2].re) + (- r.i[2].re) + test_DY.hPin_N.iRe[2] = 0;
 ground1.pin.iRe[3] + (- laptop2.loadBase.i[3].re) + (- led_driver.loadBase.i[3].re) + (- r.i[3].re) + test_DY.hPin_N.iRe[3] = 0;
 ground1.pin.iRe[4] + (- laptop2.loadBase.i[4].re) + (- led_driver.loadBase.i[4].re) + (- r.i[4].re) + test_DY.hPin_N.iRe[4] = 0;
 ground1.pin.iRe[5] + (- laptop2.loadBase.i[5].re) + (- led_driver.loadBase.i[5].re) + (- r.i[5].re) + test_DY.hPin_N.iRe[5] = 0;
 ground1.pin.iRe[6] + (- laptop2.loadBase.i[6].re) + (- led_driver.loadBase.i[6].re) + (- r.i[6].re) + test_DY.hPin_N.iRe[6] = 0;
 ground1.pin.iRe[7] + (- laptop2.loadBase.i[7].re) + (- led_driver.loadBase.i[7].re) + (- r.i[7].re) + test_DY.hPin_N.iRe[7] = 0;
 ground1.pin.iRe[8] + (- laptop2.loadBase.i[8].re) + (- led_driver.loadBase.i[8].re) + (- r.i[8].re) + test_DY.hPin_N.iRe[8] = 0;
 test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer2.iPrim[1].im) + PhA.i[1].im = 0;
 test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer2.iPrim[2].im) + PhA.i[2].im = 0;
 test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer2.iPrim[3].im) + PhA.i[3].im = 0;
 test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer2.iPrim[4].im) + PhA.i[4].im = 0;
 test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer2.iPrim[5].im) + PhA.i[5].im = 0;
 test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer2.iPrim[6].im) + PhA.i[6].im = 0;
 test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer2.iPrim[7].im) + PhA.i[7].im = 0;
 test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer2.iPrim[8].im) + PhA.i[8].im = 0;
 test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer2.iPrim[1].re) + PhA.i[1].re = 0;
 test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer2.iPrim[2].re) + PhA.i[2].re = 0;
 test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer2.iPrim[3].re) + PhA.i[3].re = 0;
 test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer2.iPrim[4].re) + PhA.i[4].re = 0;
 test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer2.iPrim[5].re) + PhA.i[5].re = 0;
 test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer2.iPrim[6].re) + PhA.i[6].re = 0;
 test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer2.iPrim[7].re) + PhA.i[7].re = 0;
 test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer2.iPrim[8].re) + PhA.i[8].re = 0;
 - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im + PhC.i[1].im = 0;
 - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im + PhC.i[2].im = 0;
 - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im + PhC.i[3].im = 0;
 - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im + PhC.i[4].im = 0;
 - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im + PhC.i[5].im = 0;
 - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im + PhC.i[6].im = 0;
 - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im + PhC.i[7].im = 0;
 - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im + PhC.i[8].im = 0;
 - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re + PhC.i[1].re = 0;
 - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re + PhC.i[2].re = 0;
 - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re + PhC.i[3].re = 0;
 - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re + PhC.i[4].re = 0;
 - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re + PhC.i[5].re = 0;
 - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re + PhC.i[6].re = 0;
 - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re + PhC.i[7].re = 0;
 - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re + PhC.i[8].re = 0;
 test_DY.idealTransformer2.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im) + PhB.i[1].im = 0;
 test_DY.idealTransformer2.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im) + PhB.i[2].im = 0;
 test_DY.idealTransformer2.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im) + PhB.i[3].im = 0;
 test_DY.idealTransformer2.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im) + PhB.i[4].im = 0;
 test_DY.idealTransformer2.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im) + PhB.i[5].im = 0;
 test_DY.idealTransformer2.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im) + PhB.i[6].im = 0;
 test_DY.idealTransformer2.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im) + PhB.i[7].im = 0;
 test_DY.idealTransformer2.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im) + PhB.i[8].im = 0;
 test_DY.idealTransformer2.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re) + PhB.i[1].re = 0;
 test_DY.idealTransformer2.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re) + PhB.i[2].re = 0;
 test_DY.idealTransformer2.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re) + PhB.i[3].re = 0;
 test_DY.idealTransformer2.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re) + PhB.i[4].re = 0;
 test_DY.idealTransformer2.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re) + PhB.i[5].re = 0;
 test_DY.idealTransformer2.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re) + PhB.i[6].re = 0;
 test_DY.idealTransformer2.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re) + PhB.i[7].re = 0;
 test_DY.idealTransformer2.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re) + PhB.i[8].re = 0;
 0 = ground1.pin.iIm[1];
 0 = ground1.pin.iIm[2];
 0 = ground1.pin.iIm[3];
 0 = ground1.pin.iIm[4];
 0 = ground1.pin.iIm[5];
 0 = ground1.pin.iIm[6];
 0 = ground1.pin.iIm[7];
 0 = ground1.pin.iIm[8];
 0 = ground1.pin.iRe[1];
 0 = ground1.pin.iRe[2];
 0 = ground1.pin.iRe[3];
 0 = ground1.pin.iRe[4];
 0 = ground1.pin.iRe[5];
 0 = ground1.pin.iRe[6];
 0 = ground1.pin.iRe[7];
 0 = ground1.pin.iRe[8];
 HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 laptop2.I_mag[1] = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5;
 laptop2.I_mag[2] = (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5;
 laptop2.I_mag[3] = (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5;
 laptop2.I_mag[4] = (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5;
 laptop2.I_mag[5] = (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5;
 laptop2.I_mag[6] = (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5;
 laptop2.I_mag[7] = (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5;
 laptop2.I_mag[8] = (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5;
 laptop2.I_arg[1] = Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0);
 laptop2.I_arg[2] = Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0);
 laptop2.I_arg[3] = Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0);
 laptop2.I_arg[4] = Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0);
 laptop2.I_arg[5] = Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0);
 laptop2.I_arg[6] = Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0);
 laptop2.I_arg[7] = Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0);
 laptop2.I_arg[8] = Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0);
 laptop2.magScale = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5;
 laptop2.c[1] = laptop2.magScale * 0.9486974344201337;
 laptop2.c[2] = laptop2.magScale * 0.9221155376813399;
 laptop2.c[3] = laptop2.magScale * 0.8849332521469448;
 laptop2.c[4] = laptop2.magScale * 0.8475867045468796;
 laptop2.c[5] = laptop2.magScale * 0.7944241839808487;
 laptop2.c[6] = laptop2.magScale * 0.7230242274654483;
 laptop2.c[7] = laptop2.magScale * 0.6688914048386135;
 led_driver.I_mag[1] = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5;
 led_driver.I_mag[2] = (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5;
 led_driver.I_mag[3] = (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5;
 led_driver.I_mag[4] = (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5;
 led_driver.I_mag[5] = (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5;
 led_driver.I_mag[6] = (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5;
 led_driver.I_mag[7] = (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5;
 led_driver.I_mag[8] = (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5;
 led_driver.I_arg[1] = Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0);
 led_driver.I_arg[2] = Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0);
 led_driver.I_arg[3] = Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0);
 led_driver.I_arg[4] = Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0);
 led_driver.I_arg[5] = Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0);
 led_driver.I_arg[6] = Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0);
 led_driver.I_arg[7] = Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0);
 led_driver.I_arg[8] = Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0);
 led_driver.magScale = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5;
 led_driver.c[1] = led_driver.magScale * 0.890432111870432;
 led_driver.c[2] = led_driver.magScale * 0.7418107134668804;
 led_driver.c[3] = led_driver.magScale * 0.567293049298617;
 led_driver.c[4] = led_driver.magScale * 0.3936692199400683;
 led_driver.c[5] = led_driver.magScale * 0.2525656583874291;
 led_driver.c[6] = led_driver.magScale * 0.1565031895698116;
 led_driver.c[7] = led_driver.magScale * 0.1085784608235925;

public
 function Modelica.Utilities.Streams.readMatrixSize
  input String fileName;
  input String matrixName;
  output Integer[:] dim;
 algorithm
  init dim as Integer[2];
  external "C" ModelicaIO_readMatrixSizes(fileName, matrixName, dim);
  return;
 end Modelica.Utilities.Streams.readMatrixSize;

 function Modelica.Utilities.Streams.readRealMatrix
  input String fileName;
  input String matrixName;
  input Integer nrow;
  input Integer ncol;
  input Boolean verboseRead;
  output Real[:,:] matrix;
 algorithm
  init matrix as Real[nrow, ncol];
  external "C" ModelicaIO_readRealMatrix(fileName, matrixName, matrix, size(matrix, 1), size(matrix, 2), verboseRead);
  return;
 end Modelica.Utilities.Streams.readRealMatrix;

 function Modelica.ComplexMath.'abs'
  input Complex c;
  output Real result;
 algorithm
  result := (c.re ^ 2 + c.im ^ 2) ^ 0.5;
  return;
 annotation(Inline = true);
 end Modelica.ComplexMath.'abs';

 function Modelica.ComplexMath.arg
  input Complex c;
  input Real phi0;
  output Real phi;
 algorithm
  phi := Modelica.Math.atan3(c.im, c.re, phi0);
  return;
 annotation(Inline = true);
 end Modelica.ComplexMath.arg;

 function Modelica.Math.atan3
  input Real u1;
  input Real u2;
  input Real y0;
  output Real y;
  Real w;
 algorithm
  w := atan2(u1, u2);
  if y0 == 0 then
   y := w;
  else
   y := w + 6.283185307179586 * integer((3.141592653589793 + y0 - w) / 6.283185307179586);
  end if;
  return;
 end Modelica.Math.atan3;

 function Complex.'-'.subtract
  input Complex c1;
  input Complex c2;
  output Complex c3;
 algorithm
  (c3) := Complex.'constructor'.fromReal(c1.re - c2.re, c1.im - c2.im);
  return;
 annotation(Inline = true);
 end Complex.'-'.subtract;

 function Complex.'constructor'.fromReal
  input Real re;
  input Real im;
  output Complex result;
 algorithm
  result.re := re;
  result.im := im;
  return;
 annotation(Inline = true);
 end Complex.'constructor'.fromReal;

 function Complex.'*'.multiply
  input Complex c1;
  input Complex c2;
  output Complex c3;
 algorithm
  (c3) := Complex.'constructor'.fromReal(c1.re * c2.re - c1.im * c2.im, c1.re * c2.im + c1.im * c2.re);
  return;
 annotation(Inline = true);
 end Complex.'*'.multiply;

 function Modelica.ComplexMath.conj
  input Complex c1;
  output Complex c2;
 algorithm
  (c2) := Complex.'constructor'.fromReal(c1.re, - c1.im);
  return;
 annotation(Inline = true);
 end Modelica.ComplexMath.conj;

 function HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint;

 function HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint;

 function HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint;

 function HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint;

 function HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint;

 function HPF.Examples.Demo.r.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.r.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint;

 record HPF.Utilities.ComponentProperties
  discrete String ComponentType "Type of the component";
 end HPF.Utilities.ComponentProperties;

 record Complex
  Real re "Real part of complex number";
  Real im "Imaginary part of complex number";
 end Complex;

 record HPF.Types.Reference
  Modelica.SIunits.Angle theta;
 end HPF.Types.Reference;

 type Modelica.SIunits.Angle = Real(final quantity = "Angle",final unit = "rad",displayUnit = "deg");
 type Modelica.SIunits.ElectricPotential = Real(final quantity = "ElectricPotential",final unit = "V");
 type Modelica.SIunits.ElectricCurrent = Real(final quantity = "ElectricCurrent",final unit = "A");
 type Modelica.Blocks.Interfaces.RealOutput = Real;
 type Modelica.Blocks.Interfaces.RealInput = Real;
end HPF.Examples.Demo;

DAE BiPGraph
BiPGraph (230 equations, 217 variables)
Variables: {der(PhA.theta) der(PhB.theta) der(PhC.theta) PhA.i[1].re PhA.i[1].im PhA.i[2].re PhA.i[2].im PhA.i[3].re PhA.i[3].im PhA.i[4].re PhA.i[4].im PhA.i[5].re PhA.i[5].im PhA.i[6].re PhA.i[6].im PhA.i[7].re PhA.i[7].im PhA.i[8].re PhA.i[8].im PhA.omega PhB.i[1].re PhB.i[1].im PhB.i[2].re PhB.i[2].im PhB.i[3].re PhB.i[3].im PhB.i[4].re PhB.i[4].im PhB.i[5].re PhB.i[5].im PhB.i[6].re PhB.i[6].im PhB.i[7].re PhB.i[7].im PhB.i[8].re PhB.i[8].im PhB.omega PhC.i[1].re PhC.i[1].im PhC.i[2].re PhC.i[2].im PhC.i[3].re PhC.i[3].im PhC.i[4].re PhC.i[4].im PhC.i[5].re PhC.i[5].im PhC.i[6].re PhC.i[6].im PhC.i[7].re PhC.i[7].im PhC.i[8].re PhC.i[8].im PhC.omega test_DY.idealTransformer1.iPrim[1].re test_DY.idealTransformer1.iPrim[1].im test_DY.idealTransformer1.iPrim[2].re test_DY.idealTransformer1.iPrim[2].im test_DY.idealTransformer1.iPrim[3].re test_DY.idealTransformer1.iPrim[3].im test_DY.idealTransformer1.iPrim[4].re test_DY.idealTransformer1.iPrim[4].im test_DY.idealTransformer1.iPrim[5].re test_DY.idealTransformer1.iPrim[5].im test_DY.idealTransformer1.iPrim[6].re test_DY.idealTransformer1.iPrim[6].im test_DY.idealTransformer1.iPrim[7].re test_DY.idealTransformer1.iPrim[7].im test_DY.idealTransformer1.iPrim[8].re test_DY.idealTransformer1.iPrim[8].im test_DY.idealTransformer2.iPrim[1].re test_DY.idealTransformer2.iPrim[1].im test_DY.idealTransformer2.iPrim[2].re test_DY.idealTransformer2.iPrim[2].im test_DY.idealTransformer2.iPrim[3].re test_DY.idealTransformer2.iPrim[3].im test_DY.idealTransformer2.iPrim[4].re test_DY.idealTransformer2.iPrim[4].im test_DY.idealTransformer2.iPrim[5].re test_DY.idealTransformer2.iPrim[5].im test_DY.idealTransformer2.iPrim[6].re test_DY.idealTransformer2.iPrim[6].im test_DY.idealTransformer2.iPrim[7].re test_DY.idealTransformer2.iPrim[7].im test_DY.idealTransformer2.iPrim[8].re test_DY.idealTransformer2.iPrim[8].im test_DY.hPin_N.iIm[1] test_DY.hPin_N.iIm[2] test_DY.hPin_N.iIm[3] test_DY.hPin_N.iIm[4] test_DY.hPin_N.iIm[5] test_DY.hPin_N.iIm[6] test_DY.hPin_N.iIm[7] test_DY.hPin_N.iIm[8] test_DY.hPin_N.iRe[1] test_DY.hPin_N.iRe[2] test_DY.hPin_N.iRe[3] test_DY.hPin_N.iRe[4] test_DY.hPin_N.iRe[5] test_DY.hPin_N.iRe[6] test_DY.hPin_N.iRe[7] test_DY.hPin_N.iRe[8] ground.pin.iIm[1] ground.pin.iIm[2] ground.pin.iIm[3] ground.pin.iIm[4] ground.pin.iIm[5] ground.pin.iIm[6] ground.pin.iIm[7] ground.pin.iIm[8] ground.pin.iRe[1] ground.pin.iRe[2] ground.pin.iRe[3] ground.pin.iRe[4] ground.pin.iRe[5] ground.pin.iRe[6] ground.pin.iRe[7] ground.pin.iRe[8] laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im laptop2.loadBase.i[2].re laptop2.loadBase.i[2].im laptop2.loadBase.i[3].re laptop2.loadBase.i[3].im laptop2.loadBase.i[4].re laptop2.loadBase.i[4].im laptop2.loadBase.i[5].re laptop2.loadBase.i[5].im laptop2.loadBase.i[6].re laptop2.loadBase.i[6].im laptop2.loadBase.i[7].re laptop2.loadBase.i[7].im laptop2.loadBase.i[8].re laptop2.loadBase.i[8].im laptop2.loadBase.omega laptop2.I_mag[1] laptop2.I_mag[2] laptop2.I_mag[3] laptop2.I_mag[4] laptop2.I_mag[5] laptop2.I_mag[6] laptop2.I_mag[7] laptop2.I_mag[8] laptop2.I_arg[1] laptop2.I_arg[2] laptop2.I_arg[3] laptop2.I_arg[4] laptop2.I_arg[5] laptop2.I_arg[6] laptop2.I_arg[7] laptop2.I_arg[8] laptop2.magScale laptop2.c[1] laptop2.c[2] laptop2.c[3] laptop2.c[4] laptop2.c[5] laptop2.c[6] laptop2.c[7] led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im led_driver.loadBase.i[2].re led_driver.loadBase.i[2].im led_driver.loadBase.i[3].re led_driver.loadBase.i[3].im led_driver.loadBase.i[4].re led_driver.loadBase.i[4].im led_driver.loadBase.i[5].re led_driver.loadBase.i[5].im led_driver.loadBase.i[6].re led_driver.loadBase.i[6].im led_driver.loadBase.i[7].re led_driver.loadBase.i[7].im led_driver.loadBase.i[8].re led_driver.loadBase.i[8].im led_driver.loadBase.omega led_driver.I_mag[1] led_driver.I_mag[2] led_driver.I_mag[3] led_driver.I_mag[4] led_driver.I_mag[5] led_driver.I_mag[6] led_driver.I_mag[7] led_driver.I_mag[8] led_driver.I_arg[1] led_driver.I_arg[2] led_driver.I_arg[3] led_driver.I_arg[4] led_driver.I_arg[5] led_driver.I_arg[6] led_driver.I_arg[7] led_driver.I_arg[8] led_driver.magScale led_driver.c[1] led_driver.c[2] led_driver.c[3] led_driver.c[4] led_driver.c[5] led_driver.c[6] led_driver.c[7] ground1.pin.iIm[1] ground1.pin.iIm[2] ground1.pin.iIm[3] ground1.pin.iIm[4] ground1.pin.iIm[5] ground1.pin.iIm[6] ground1.pin.iIm[7] ground1.pin.iIm[8] ground1.pin.iRe[1] ground1.pin.iRe[2] ground1.pin.iRe[3] ground1.pin.iRe[4] ground1.pin.iRe[5] ground1.pin.iRe[6] ground1.pin.iRe[7] ground1.pin.iRe[8] r.omega }
eq_1 : // algorithm

eq_2 : der(PhA.theta)@M // der(PhA.theta) = 6.283185307179586 * systemDef.fFund
eq_3 : PhA.omega@M der(PhA.theta)@ // PhA.omega = der(PhA.theta)
eq_4 : der(PhB.theta)@M // der(PhB.theta) = 6.283185307179586 * systemDef.fFund
eq_5 : PhB.omega@M der(PhB.theta)@ // PhB.omega = der(PhB.theta)
eq_6 : der(PhC.theta)@M // der(PhC.theta) = 6.283185307179586 * systemDef.fFund
eq_7 : PhC.omega@M der(PhC.theta)@ // PhC.omega = der(PhC.theta)
eq_8 : led_driver.loadBase.i[1].re@ test_DY.idealTransformer1.iPrim[1].re@M // - led_driver.loadBase.i[1].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].re
eq_9 : led_driver.loadBase.i[1].im@ test_DY.idealTransformer1.iPrim[1].im@M // - led_driver.loadBase.i[1].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].im
eq_10 : led_driver.loadBase.i[2].re@ test_DY.idealTransformer1.iPrim[2].re@M // - led_driver.loadBase.i[2].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].re
eq_11 : led_driver.loadBase.i[2].im@ test_DY.idealTransformer1.iPrim[2].im@M // - led_driver.loadBase.i[2].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].im
eq_12 : led_driver.loadBase.i[3].re@ test_DY.idealTransformer1.iPrim[3].re@M // - led_driver.loadBase.i[3].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].re
eq_13 : led_driver.loadBase.i[3].im@ test_DY.idealTransformer1.iPrim[3].im@M // - led_driver.loadBase.i[3].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].im
eq_14 : led_driver.loadBase.i[4].re@ test_DY.idealTransformer1.iPrim[4].re@M // - led_driver.loadBase.i[4].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].re
eq_15 : led_driver.loadBase.i[4].im@ test_DY.idealTransformer1.iPrim[4].im@M // - led_driver.loadBase.i[4].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].im
eq_16 : led_driver.loadBase.i[5].re@ test_DY.idealTransformer1.iPrim[5].re@M // - led_driver.loadBase.i[5].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].re
eq_17 : led_driver.loadBase.i[5].im@ test_DY.idealTransformer1.iPrim[5].im@M // - led_driver.loadBase.i[5].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].im
eq_18 : led_driver.loadBase.i[6].re@ test_DY.idealTransformer1.iPrim[6].re@M // - led_driver.loadBase.i[6].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].re
eq_19 : led_driver.loadBase.i[6].im@ test_DY.idealTransformer1.iPrim[6].im@M // - led_driver.loadBase.i[6].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].im
eq_20 : led_driver.loadBase.i[7].re@ test_DY.idealTransformer1.iPrim[7].re@M // - led_driver.loadBase.i[7].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].re
eq_21 : led_driver.loadBase.i[7].im@ test_DY.idealTransformer1.iPrim[7].im@M // - led_driver.loadBase.i[7].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].im
eq_22 : led_driver.loadBase.i[8].re@ test_DY.idealTransformer1.iPrim[8].re@M // - led_driver.loadBase.i[8].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].re
eq_23 : led_driver.loadBase.i[8].im@ test_DY.idealTransformer1.iPrim[8].im@M // - led_driver.loadBase.i[8].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].im
eq_24 : laptop2.loadBase.i[1].re@ test_DY.idealTransformer2.iPrim[1].re@M // - laptop2.loadBase.i[1].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].re
eq_25 : laptop2.loadBase.i[1].im@ test_DY.idealTransformer2.iPrim[1].im@M // - laptop2.loadBase.i[1].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].im
eq_26 : laptop2.loadBase.i[2].re@ test_DY.idealTransformer2.iPrim[2].re@M // - laptop2.loadBase.i[2].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].re
eq_27 : laptop2.loadBase.i[2].im@ test_DY.idealTransformer2.iPrim[2].im@M // - laptop2.loadBase.i[2].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].im
eq_28 : laptop2.loadBase.i[3].re@ test_DY.idealTransformer2.iPrim[3].re@M // - laptop2.loadBase.i[3].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].re
eq_29 : laptop2.loadBase.i[3].im@ test_DY.idealTransformer2.iPrim[3].im@M // - laptop2.loadBase.i[3].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].im
eq_30 : laptop2.loadBase.i[4].re@ test_DY.idealTransformer2.iPrim[4].re@M // - laptop2.loadBase.i[4].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].re
eq_31 : laptop2.loadBase.i[4].im@ test_DY.idealTransformer2.iPrim[4].im@M // - laptop2.loadBase.i[4].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].im
eq_32 : laptop2.loadBase.i[5].re@ test_DY.idealTransformer2.iPrim[5].re@M // - laptop2.loadBase.i[5].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].re
eq_33 : laptop2.loadBase.i[5].im@ test_DY.idealTransformer2.iPrim[5].im@M // - laptop2.loadBase.i[5].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].im
eq_34 : laptop2.loadBase.i[6].re@ test_DY.idealTransformer2.iPrim[6].re@M // - laptop2.loadBase.i[6].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].re
eq_35 : laptop2.loadBase.i[6].im@ test_DY.idealTransformer2.iPrim[6].im@M // - laptop2.loadBase.i[6].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].im
eq_36 : laptop2.loadBase.i[7].re@ test_DY.idealTransformer2.iPrim[7].re@M // - laptop2.loadBase.i[7].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].re
eq_37 : laptop2.loadBase.i[7].im@ test_DY.idealTransformer2.iPrim[7].im@M // - laptop2.loadBase.i[7].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].im
eq_38 : laptop2.loadBase.i[8].re@ test_DY.idealTransformer2.iPrim[8].re@M // - laptop2.loadBase.i[8].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].re
eq_39 : laptop2.loadBase.i[8].im@ test_DY.idealTransformer2.iPrim[8].im@M // - laptop2.loadBase.i[8].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@M // laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
eq_41 : laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@M // laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re@M laptop2.c[1]@ // laptop2.loadBase.i[2].re = laptop2.c[1] * laptop2.a[1].re
eq_43 : laptop2.loadBase.i[2].im@M laptop2.c[1]@ // laptop2.loadBase.i[2].im = laptop2.c[1] * laptop2.a[1].im
eq_44 : laptop2.loadBase.i[3].re@M laptop2.c[2]@ // laptop2.loadBase.i[3].re = laptop2.c[2] * laptop2.a[2].re
eq_45 : laptop2.loadBase.i[3].im@M laptop2.c[2]@ // laptop2.loadBase.i[3].im = laptop2.c[2] * laptop2.a[2].im
eq_46 : laptop2.loadBase.i[4].re@M laptop2.c[3]@ // laptop2.loadBase.i[4].re = laptop2.c[3] * laptop2.a[3].re
eq_47 : laptop2.loadBase.i[4].im@M laptop2.c[3]@ // laptop2.loadBase.i[4].im = laptop2.c[3] * laptop2.a[3].im
eq_48 : laptop2.loadBase.i[5].re@M laptop2.c[4]@ // laptop2.loadBase.i[5].re = laptop2.c[4] * laptop2.a[4].re
eq_49 : laptop2.loadBase.i[5].im@M laptop2.c[4]@ // laptop2.loadBase.i[5].im = laptop2.c[4] * laptop2.a[4].im
eq_50 : laptop2.loadBase.i[6].re@M laptop2.c[5]@ // laptop2.loadBase.i[6].re = laptop2.c[5] * laptop2.a[5].re
eq_51 : laptop2.loadBase.i[6].im@M laptop2.c[5]@ // laptop2.loadBase.i[6].im = laptop2.c[5] * laptop2.a[5].im
eq_52 : laptop2.loadBase.i[7].re@M laptop2.c[6]@ // laptop2.loadBase.i[7].re = laptop2.c[6] * laptop2.a[6].re
eq_53 : laptop2.loadBase.i[7].im@M laptop2.c[6]@ // laptop2.loadBase.i[7].im = laptop2.c[6] * laptop2.a[6].im
eq_54 : laptop2.loadBase.i[8].re@M laptop2.c[7]@ // laptop2.loadBase.i[8].re = laptop2.c[7] * laptop2.a[7].re
eq_55 : laptop2.loadBase.i[8].im@M laptop2.c[7]@ // laptop2.loadBase.i[8].im = laptop2.c[7] * laptop2.a[7].im
eq_56 : // algorithm

eq_57 : laptop2.loadBase.omega@M der(PhA.theta)@ // laptop2.loadBase.omega = der(PhA.theta)
eq_58 : led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@M // led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
eq_59 : led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@M // led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re@M led_driver.c[1]@ // led_driver.loadBase.i[2].re = led_driver.c[1] * led_driver.a[1].re
eq_61 : led_driver.loadBase.i[2].im@M led_driver.c[1]@ // led_driver.loadBase.i[2].im = led_driver.c[1] * led_driver.a[1].im
eq_62 : led_driver.loadBase.i[3].re@M led_driver.c[2]@ // led_driver.loadBase.i[3].re = led_driver.c[2] * led_driver.a[2].re
eq_63 : led_driver.loadBase.i[3].im@M led_driver.c[2]@ // led_driver.loadBase.i[3].im = led_driver.c[2] * led_driver.a[2].im
eq_64 : led_driver.loadBase.i[4].re@M led_driver.c[3]@ // led_driver.loadBase.i[4].re = led_driver.c[3] * led_driver.a[3].re
eq_65 : led_driver.loadBase.i[4].im@M led_driver.c[3]@ // led_driver.loadBase.i[4].im = led_driver.c[3] * led_driver.a[3].im
eq_66 : led_driver.loadBase.i[5].re@M led_driver.c[4]@ // led_driver.loadBase.i[5].re = led_driver.c[4] * led_driver.a[4].re
eq_67 : led_driver.loadBase.i[5].im@M led_driver.c[4]@ // led_driver.loadBase.i[5].im = led_driver.c[4] * led_driver.a[4].im
eq_68 : led_driver.loadBase.i[6].re@M led_driver.c[5]@ // led_driver.loadBase.i[6].re = led_driver.c[5] * led_driver.a[5].re
eq_69 : led_driver.loadBase.i[6].im@M led_driver.c[5]@ // led_driver.loadBase.i[6].im = led_driver.c[5] * led_driver.a[5].im
eq_70 : led_driver.loadBase.i[7].re@M led_driver.c[6]@ // led_driver.loadBase.i[7].re = led_driver.c[6] * led_driver.a[6].re
eq_71 : led_driver.loadBase.i[7].im@M led_driver.c[6]@ // led_driver.loadBase.i[7].im = led_driver.c[6] * led_driver.a[6].im
eq_72 : led_driver.loadBase.i[8].re@M led_driver.c[7]@ // led_driver.loadBase.i[8].re = led_driver.c[7] * led_driver.a[7].re
eq_73 : led_driver.loadBase.i[8].im@M led_driver.c[7]@ // led_driver.loadBase.i[8].im = led_driver.c[7] * led_driver.a[7].im
eq_74 : // algorithm

eq_75 : led_driver.loadBase.omega@M der(PhA.theta)@ // led_driver.loadBase.omega = der(PhA.theta)
eq_76 : r.omega@M der(PhA.theta)@ // r.omega = der(PhA.theta)
eq_77 : PhA.i[1].im@ PhB.i[1].im@ PhC.i[1].im@ ground.pin.iIm[1]@M // - PhA.i[1].im + (- PhB.i[1].im) + (- PhC.i[1].im) + ground.pin.iIm[1] = 0
eq_78 : PhA.i[2].im@ PhB.i[2].im@ PhC.i[2].im@ ground.pin.iIm[2]@M // - PhA.i[2].im + (- PhB.i[2].im) + (- PhC.i[2].im) + ground.pin.iIm[2] = 0
eq_79 : PhA.i[3].im@ PhB.i[3].im@ PhC.i[3].im@ ground.pin.iIm[3]@M // - PhA.i[3].im + (- PhB.i[3].im) + (- PhC.i[3].im) + ground.pin.iIm[3] = 0
eq_80 : PhA.i[4].im@ PhB.i[4].im@ PhC.i[4].im@ ground.pin.iIm[4]@M // - PhA.i[4].im + (- PhB.i[4].im) + (- PhC.i[4].im) + ground.pin.iIm[4] = 0
eq_81 : PhA.i[5].im@ PhB.i[5].im@ PhC.i[5].im@ ground.pin.iIm[5]@M // - PhA.i[5].im + (- PhB.i[5].im) + (- PhC.i[5].im) + ground.pin.iIm[5] = 0
eq_82 : PhA.i[6].im@ PhB.i[6].im@ PhC.i[6].im@ ground.pin.iIm[6]@M // - PhA.i[6].im + (- PhB.i[6].im) + (- PhC.i[6].im) + ground.pin.iIm[6] = 0
eq_83 : PhA.i[7].im@ PhB.i[7].im@ PhC.i[7].im@ ground.pin.iIm[7]@M // - PhA.i[7].im + (- PhB.i[7].im) + (- PhC.i[7].im) + ground.pin.iIm[7] = 0
eq_84 : PhA.i[8].im@ PhB.i[8].im@ PhC.i[8].im@ ground.pin.iIm[8]@M // - PhA.i[8].im + (- PhB.i[8].im) + (- PhC.i[8].im) + ground.pin.iIm[8] = 0
eq_85 : PhA.i[1].re@ PhB.i[1].re@ PhC.i[1].re@ ground.pin.iRe[1]@M // - PhA.i[1].re + (- PhB.i[1].re) + (- PhC.i[1].re) + ground.pin.iRe[1] = 0
eq_86 : PhA.i[2].re@ PhB.i[2].re@ PhC.i[2].re@ ground.pin.iRe[2]@M // - PhA.i[2].re + (- PhB.i[2].re) + (- PhC.i[2].re) + ground.pin.iRe[2] = 0
eq_87 : PhA.i[3].re@ PhB.i[3].re@ PhC.i[3].re@ ground.pin.iRe[3]@M // - PhA.i[3].re + (- PhB.i[3].re) + (- PhC.i[3].re) + ground.pin.iRe[3] = 0
eq_88 : PhA.i[4].re@ PhB.i[4].re@ PhC.i[4].re@ ground.pin.iRe[4]@M // - PhA.i[4].re + (- PhB.i[4].re) + (- PhC.i[4].re) + ground.pin.iRe[4] = 0
eq_89 : PhA.i[5].re@ PhB.i[5].re@ PhC.i[5].re@ ground.pin.iRe[5]@M // - PhA.i[5].re + (- PhB.i[5].re) + (- PhC.i[5].re) + ground.pin.iRe[5] = 0
eq_90 : PhA.i[6].re@ PhB.i[6].re@ PhC.i[6].re@ ground.pin.iRe[6]@M // - PhA.i[6].re + (- PhB.i[6].re) + (- PhC.i[6].re) + ground.pin.iRe[6] = 0
eq_91 : PhA.i[7].re@ PhB.i[7].re@ PhC.i[7].re@ ground.pin.iRe[7]@M // - PhA.i[7].re + (- PhB.i[7].re) + (- PhC.i[7].re) + ground.pin.iRe[7] = 0
eq_92 : PhA.i[8].re@ PhB.i[8].re@ PhC.i[8].re@ ground.pin.iRe[8]@M // - PhA.i[8].re + (- PhB.i[8].re) + (- PhC.i[8].re) + ground.pin.iRe[8] = 0
eq_93 : ground1.pin.iIm[1]@ laptop2.loadBase.i[1].im@ led_driver.loadBase.i[1].im@ test_DY.hPin_N.iIm[1]@M // ground1.pin.iIm[1] + (- laptop2.loadBase.i[1].im) + (- led_driver.loadBase.i[1].im) + (- r.i[1].im) + test_DY.hPin_N.iIm[1] = 0
eq_94 : ground1.pin.iIm[2]@ laptop2.loadBase.i[2].im@ led_driver.loadBase.i[2].im@ test_DY.hPin_N.iIm[2]@M // ground1.pin.iIm[2] + (- laptop2.loadBase.i[2].im) + (- led_driver.loadBase.i[2].im) + (- r.i[2].im) + test_DY.hPin_N.iIm[2] = 0
eq_95 : ground1.pin.iIm[3]@ laptop2.loadBase.i[3].im@ led_driver.loadBase.i[3].im@ test_DY.hPin_N.iIm[3]@M // ground1.pin.iIm[3] + (- laptop2.loadBase.i[3].im) + (- led_driver.loadBase.i[3].im) + (- r.i[3].im) + test_DY.hPin_N.iIm[3] = 0
eq_96 : ground1.pin.iIm[4]@ laptop2.loadBase.i[4].im@ led_driver.loadBase.i[4].im@ test_DY.hPin_N.iIm[4]@M // ground1.pin.iIm[4] + (- laptop2.loadBase.i[4].im) + (- led_driver.loadBase.i[4].im) + (- r.i[4].im) + test_DY.hPin_N.iIm[4] = 0
eq_97 : ground1.pin.iIm[5]@ laptop2.loadBase.i[5].im@ led_driver.loadBase.i[5].im@ test_DY.hPin_N.iIm[5]@M // ground1.pin.iIm[5] + (- laptop2.loadBase.i[5].im) + (- led_driver.loadBase.i[5].im) + (- r.i[5].im) + test_DY.hPin_N.iIm[5] = 0
eq_98 : ground1.pin.iIm[6]@ laptop2.loadBase.i[6].im@ led_driver.loadBase.i[6].im@ test_DY.hPin_N.iIm[6]@M // ground1.pin.iIm[6] + (- laptop2.loadBase.i[6].im) + (- led_driver.loadBase.i[6].im) + (- r.i[6].im) + test_DY.hPin_N.iIm[6] = 0
eq_99 : ground1.pin.iIm[7]@ laptop2.loadBase.i[7].im@ led_driver.loadBase.i[7].im@ test_DY.hPin_N.iIm[7]@M // ground1.pin.iIm[7] + (- laptop2.loadBase.i[7].im) + (- led_driver.loadBase.i[7].im) + (- r.i[7].im) + test_DY.hPin_N.iIm[7] = 0
eq_100 : ground1.pin.iIm[8]@ laptop2.loadBase.i[8].im@ led_driver.loadBase.i[8].im@ test_DY.hPin_N.iIm[8]@M // ground1.pin.iIm[8] + (- laptop2.loadBase.i[8].im) + (- led_driver.loadBase.i[8].im) + (- r.i[8].im) + test_DY.hPin_N.iIm[8] = 0
eq_101 : ground1.pin.iRe[1]@ laptop2.loadBase.i[1].re@ led_driver.loadBase.i[1].re@ test_DY.hPin_N.iRe[1]@M // ground1.pin.iRe[1] + (- laptop2.loadBase.i[1].re) + (- led_driver.loadBase.i[1].re) + (- r.i[1].re) + test_DY.hPin_N.iRe[1] = 0
eq_102 : ground1.pin.iRe[2]@ laptop2.loadBase.i[2].re@ led_driver.loadBase.i[2].re@ test_DY.hPin_N.iRe[2]@M // ground1.pin.iRe[2] + (- laptop2.loadBase.i[2].re) + (- led_driver.loadBase.i[2].re) + (- r.i[2].re) + test_DY.hPin_N.iRe[2] = 0
eq_103 : ground1.pin.iRe[3]@ laptop2.loadBase.i[3].re@ led_driver.loadBase.i[3].re@ test_DY.hPin_N.iRe[3]@M // ground1.pin.iRe[3] + (- laptop2.loadBase.i[3].re) + (- led_driver.loadBase.i[3].re) + (- r.i[3].re) + test_DY.hPin_N.iRe[3] = 0
eq_104 : ground1.pin.iRe[4]@ laptop2.loadBase.i[4].re@ led_driver.loadBase.i[4].re@ test_DY.hPin_N.iRe[4]@M // ground1.pin.iRe[4] + (- laptop2.loadBase.i[4].re) + (- led_driver.loadBase.i[4].re) + (- r.i[4].re) + test_DY.hPin_N.iRe[4] = 0
eq_105 : ground1.pin.iRe[5]@ laptop2.loadBase.i[5].re@ led_driver.loadBase.i[5].re@ test_DY.hPin_N.iRe[5]@M // ground1.pin.iRe[5] + (- laptop2.loadBase.i[5].re) + (- led_driver.loadBase.i[5].re) + (- r.i[5].re) + test_DY.hPin_N.iRe[5] = 0
eq_106 : ground1.pin.iRe[6]@ laptop2.loadBase.i[6].re@ led_driver.loadBase.i[6].re@ test_DY.hPin_N.iRe[6]@M // ground1.pin.iRe[6] + (- laptop2.loadBase.i[6].re) + (- led_driver.loadBase.i[6].re) + (- r.i[6].re) + test_DY.hPin_N.iRe[6] = 0
eq_107 : ground1.pin.iRe[7]@ laptop2.loadBase.i[7].re@ led_driver.loadBase.i[7].re@ test_DY.hPin_N.iRe[7]@M // ground1.pin.iRe[7] + (- laptop2.loadBase.i[7].re) + (- led_driver.loadBase.i[7].re) + (- r.i[7].re) + test_DY.hPin_N.iRe[7] = 0
eq_108 : ground1.pin.iRe[8]@ laptop2.loadBase.i[8].re@ led_driver.loadBase.i[8].re@ test_DY.hPin_N.iRe[8]@M // ground1.pin.iRe[8] + (- laptop2.loadBase.i[8].re) + (- led_driver.loadBase.i[8].re) + (- r.i[8].re) + test_DY.hPin_N.iRe[8] = 0
eq_109 : test_DY.idealTransformer1.iPrim[1].im@ test_DY.idealTransformer2.iPrim[1].im@ PhA.i[1].im@M // test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer2.iPrim[1].im) + PhA.i[1].im = 0
eq_110 : test_DY.idealTransformer1.iPrim[2].im@ test_DY.idealTransformer2.iPrim[2].im@ PhA.i[2].im@M // test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer2.iPrim[2].im) + PhA.i[2].im = 0
eq_111 : test_DY.idealTransformer1.iPrim[3].im@ test_DY.idealTransformer2.iPrim[3].im@ PhA.i[3].im@M // test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer2.iPrim[3].im) + PhA.i[3].im = 0
eq_112 : test_DY.idealTransformer1.iPrim[4].im@ test_DY.idealTransformer2.iPrim[4].im@ PhA.i[4].im@M // test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer2.iPrim[4].im) + PhA.i[4].im = 0
eq_113 : test_DY.idealTransformer1.iPrim[5].im@ test_DY.idealTransformer2.iPrim[5].im@ PhA.i[5].im@M // test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer2.iPrim[5].im) + PhA.i[5].im = 0
eq_114 : test_DY.idealTransformer1.iPrim[6].im@ test_DY.idealTransformer2.iPrim[6].im@ PhA.i[6].im@M // test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer2.iPrim[6].im) + PhA.i[6].im = 0
eq_115 : test_DY.idealTransformer1.iPrim[7].im@ test_DY.idealTransformer2.iPrim[7].im@ PhA.i[7].im@M // test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer2.iPrim[7].im) + PhA.i[7].im = 0
eq_116 : test_DY.idealTransformer1.iPrim[8].im@ test_DY.idealTransformer2.iPrim[8].im@ PhA.i[8].im@M // test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer2.iPrim[8].im) + PhA.i[8].im = 0
eq_117 : test_DY.idealTransformer1.iPrim[1].re@ test_DY.idealTransformer2.iPrim[1].re@ PhA.i[1].re@M // test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer2.iPrim[1].re) + PhA.i[1].re = 0
eq_118 : test_DY.idealTransformer1.iPrim[2].re@ test_DY.idealTransformer2.iPrim[2].re@ PhA.i[2].re@M // test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer2.iPrim[2].re) + PhA.i[2].re = 0
eq_119 : test_DY.idealTransformer1.iPrim[3].re@ test_DY.idealTransformer2.iPrim[3].re@ PhA.i[3].re@M // test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer2.iPrim[3].re) + PhA.i[3].re = 0
eq_120 : test_DY.idealTransformer1.iPrim[4].re@ test_DY.idealTransformer2.iPrim[4].re@ PhA.i[4].re@M // test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer2.iPrim[4].re) + PhA.i[4].re = 0
eq_121 : test_DY.idealTransformer1.iPrim[5].re@ test_DY.idealTransformer2.iPrim[5].re@ PhA.i[5].re@M // test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer2.iPrim[5].re) + PhA.i[5].re = 0
eq_122 : test_DY.idealTransformer1.iPrim[6].re@ test_DY.idealTransformer2.iPrim[6].re@ PhA.i[6].re@M // test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer2.iPrim[6].re) + PhA.i[6].re = 0
eq_123 : test_DY.idealTransformer1.iPrim[7].re@ test_DY.idealTransformer2.iPrim[7].re@ PhA.i[7].re@M // test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer2.iPrim[7].re) + PhA.i[7].re = 0
eq_124 : test_DY.idealTransformer1.iPrim[8].re@ test_DY.idealTransformer2.iPrim[8].re@ PhA.i[8].re@M // test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer2.iPrim[8].re) + PhA.i[8].re = 0
eq_125 : test_DY.idealTransformer1.iPrim[1].im@ PhC.i[1].im@M // - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im + PhC.i[1].im = 0
eq_126 : test_DY.idealTransformer1.iPrim[2].im@ PhC.i[2].im@M // - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im + PhC.i[2].im = 0
eq_127 : test_DY.idealTransformer1.iPrim[3].im@ PhC.i[3].im@M // - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im + PhC.i[3].im = 0
eq_128 : test_DY.idealTransformer1.iPrim[4].im@ PhC.i[4].im@M // - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im + PhC.i[4].im = 0
eq_129 : test_DY.idealTransformer1.iPrim[5].im@ PhC.i[5].im@M // - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im + PhC.i[5].im = 0
eq_130 : test_DY.idealTransformer1.iPrim[6].im@ PhC.i[6].im@M // - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im + PhC.i[6].im = 0
eq_131 : test_DY.idealTransformer1.iPrim[7].im@ PhC.i[7].im@M // - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im + PhC.i[7].im = 0
eq_132 : test_DY.idealTransformer1.iPrim[8].im@ PhC.i[8].im@M // - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im + PhC.i[8].im = 0
eq_133 : test_DY.idealTransformer1.iPrim[1].re@ PhC.i[1].re@M // - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re + PhC.i[1].re = 0
eq_134 : test_DY.idealTransformer1.iPrim[2].re@ PhC.i[2].re@M // - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re + PhC.i[2].re = 0
eq_135 : test_DY.idealTransformer1.iPrim[3].re@ PhC.i[3].re@M // - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re + PhC.i[3].re = 0
eq_136 : test_DY.idealTransformer1.iPrim[4].re@ PhC.i[4].re@M // - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re + PhC.i[4].re = 0
eq_137 : test_DY.idealTransformer1.iPrim[5].re@ PhC.i[5].re@M // - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re + PhC.i[5].re = 0
eq_138 : test_DY.idealTransformer1.iPrim[6].re@ PhC.i[6].re@M // - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re + PhC.i[6].re = 0
eq_139 : test_DY.idealTransformer1.iPrim[7].re@ PhC.i[7].re@M // - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re + PhC.i[7].re = 0
eq_140 : test_DY.idealTransformer1.iPrim[8].re@ PhC.i[8].re@M // - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re + PhC.i[8].re = 0
eq_141 : test_DY.idealTransformer2.iPrim[1].im@ PhB.i[1].im@M // test_DY.idealTransformer2.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im) + PhB.i[1].im = 0
eq_142 : test_DY.idealTransformer2.iPrim[2].im@ PhB.i[2].im@M // test_DY.idealTransformer2.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im) + PhB.i[2].im = 0
eq_143 : test_DY.idealTransformer2.iPrim[3].im@ PhB.i[3].im@M // test_DY.idealTransformer2.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im) + PhB.i[3].im = 0
eq_144 : test_DY.idealTransformer2.iPrim[4].im@ PhB.i[4].im@M // test_DY.idealTransformer2.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im) + PhB.i[4].im = 0
eq_145 : test_DY.idealTransformer2.iPrim[5].im@ PhB.i[5].im@M // test_DY.idealTransformer2.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im) + PhB.i[5].im = 0
eq_146 : test_DY.idealTransformer2.iPrim[6].im@ PhB.i[6].im@M // test_DY.idealTransformer2.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im) + PhB.i[6].im = 0
eq_147 : test_DY.idealTransformer2.iPrim[7].im@ PhB.i[7].im@M // test_DY.idealTransformer2.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im) + PhB.i[7].im = 0
eq_148 : test_DY.idealTransformer2.iPrim[8].im@ PhB.i[8].im@M // test_DY.idealTransformer2.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im) + PhB.i[8].im = 0
eq_149 : test_DY.idealTransformer2.iPrim[1].re@ PhB.i[1].re@M // test_DY.idealTransformer2.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re) + PhB.i[1].re = 0
eq_150 : test_DY.idealTransformer2.iPrim[2].re@ PhB.i[2].re@M // test_DY.idealTransformer2.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re) + PhB.i[2].re = 0
eq_151 : test_DY.idealTransformer2.iPrim[3].re@ PhB.i[3].re@M // test_DY.idealTransformer2.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re) + PhB.i[3].re = 0
eq_152 : test_DY.idealTransformer2.iPrim[4].re@ PhB.i[4].re@M // test_DY.idealTransformer2.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re) + PhB.i[4].re = 0
eq_153 : test_DY.idealTransformer2.iPrim[5].re@ PhB.i[5].re@M // test_DY.idealTransformer2.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re) + PhB.i[5].re = 0
eq_154 : test_DY.idealTransformer2.iPrim[6].re@ PhB.i[6].re@M // test_DY.idealTransformer2.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re) + PhB.i[6].re = 0
eq_155 : test_DY.idealTransformer2.iPrim[7].re@ PhB.i[7].re@M // test_DY.idealTransformer2.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re) + PhB.i[7].re = 0
eq_156 : test_DY.idealTransformer2.iPrim[8].re@ PhB.i[8].re@M // test_DY.idealTransformer2.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re) + PhB.i[8].re = 0
eq_157 : ground1.pin.iIm[1]@M // 0 = ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]@M // 0 = ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]@M // 0 = ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]@M // 0 = ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]@M // 0 = ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]@M // 0 = ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]@M // 0 = ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]@M // 0 = ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]@M // 0 = ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]@M // 0 = ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]@M // 0 = ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]@M // 0 = ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]@M // 0 = ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]@M // 0 = ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]@M // 0 = ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]@M // 0 = ground1.pin.iRe[8]
eq_173 : // HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_174 : // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_175 : // HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_176 : // HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_177 : // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_178 : // HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_179 : // HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_180 : // HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_181 : // HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_182 : // HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_183 : laptop2.I_mag[1]@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.I_mag[1] = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_184 : laptop2.I_mag[2]@M laptop2.loadBase.i[2].re@ laptop2.loadBase.i[2].im@ // laptop2.I_mag[2] = (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5
eq_185 : laptop2.I_mag[3]@M laptop2.loadBase.i[3].re@ laptop2.loadBase.i[3].im@ // laptop2.I_mag[3] = (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5
eq_186 : laptop2.I_mag[4]@M laptop2.loadBase.i[4].re@ laptop2.loadBase.i[4].im@ // laptop2.I_mag[4] = (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5
eq_187 : laptop2.I_mag[5]@M laptop2.loadBase.i[5].re@ laptop2.loadBase.i[5].im@ // laptop2.I_mag[5] = (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5
eq_188 : laptop2.I_mag[6]@M laptop2.loadBase.i[6].re@ laptop2.loadBase.i[6].im@ // laptop2.I_mag[6] = (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5
eq_189 : laptop2.I_mag[7]@M laptop2.loadBase.i[7].re@ laptop2.loadBase.i[7].im@ // laptop2.I_mag[7] = (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5
eq_190 : laptop2.I_mag[8]@M laptop2.loadBase.i[8].re@ laptop2.loadBase.i[8].im@ // laptop2.I_mag[8] = (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5
eq_191 : laptop2.I_arg[1]@M laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@ // laptop2.I_arg[1] = Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)
eq_192 : laptop2.I_arg[2]@M laptop2.loadBase.i[2].im@ laptop2.loadBase.i[2].re@ // laptop2.I_arg[2] = Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)
eq_193 : laptop2.I_arg[3]@M laptop2.loadBase.i[3].im@ laptop2.loadBase.i[3].re@ // laptop2.I_arg[3] = Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)
eq_194 : laptop2.I_arg[4]@M laptop2.loadBase.i[4].im@ laptop2.loadBase.i[4].re@ // laptop2.I_arg[4] = Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)
eq_195 : laptop2.I_arg[5]@M laptop2.loadBase.i[5].im@ laptop2.loadBase.i[5].re@ // laptop2.I_arg[5] = Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)
eq_196 : laptop2.I_arg[6]@M laptop2.loadBase.i[6].im@ laptop2.loadBase.i[6].re@ // laptop2.I_arg[6] = Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)
eq_197 : laptop2.I_arg[7]@M laptop2.loadBase.i[7].im@ laptop2.loadBase.i[7].re@ // laptop2.I_arg[7] = Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)
eq_198 : laptop2.I_arg[8]@M laptop2.loadBase.i[8].im@ laptop2.loadBase.i[8].re@ // laptop2.I_arg[8] = Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)
eq_199 : laptop2.magScale@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.magScale = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_200 : laptop2.c[1]@M laptop2.magScale@ // laptop2.c[1] = laptop2.magScale * 0.9486974344201337
eq_201 : laptop2.c[2]@M laptop2.magScale@ // laptop2.c[2] = laptop2.magScale * 0.9221155376813399
eq_202 : laptop2.c[3]@M laptop2.magScale@ // laptop2.c[3] = laptop2.magScale * 0.8849332521469448
eq_203 : laptop2.c[4]@M laptop2.magScale@ // laptop2.c[4] = laptop2.magScale * 0.8475867045468796
eq_204 : laptop2.c[5]@M laptop2.magScale@ // laptop2.c[5] = laptop2.magScale * 0.7944241839808487
eq_205 : laptop2.c[6]@M laptop2.magScale@ // laptop2.c[6] = laptop2.magScale * 0.7230242274654483
eq_206 : laptop2.c[7]@M laptop2.magScale@ // laptop2.c[7] = laptop2.magScale * 0.6688914048386135
eq_207 : led_driver.I_mag[1]@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.I_mag[1] = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_208 : led_driver.I_mag[2]@M led_driver.loadBase.i[2].re@ led_driver.loadBase.i[2].im@ // led_driver.I_mag[2] = (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5
eq_209 : led_driver.I_mag[3]@M led_driver.loadBase.i[3].re@ led_driver.loadBase.i[3].im@ // led_driver.I_mag[3] = (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5
eq_210 : led_driver.I_mag[4]@M led_driver.loadBase.i[4].re@ led_driver.loadBase.i[4].im@ // led_driver.I_mag[4] = (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5
eq_211 : led_driver.I_mag[5]@M led_driver.loadBase.i[5].re@ led_driver.loadBase.i[5].im@ // led_driver.I_mag[5] = (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5
eq_212 : led_driver.I_mag[6]@M led_driver.loadBase.i[6].re@ led_driver.loadBase.i[6].im@ // led_driver.I_mag[6] = (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5
eq_213 : led_driver.I_mag[7]@M led_driver.loadBase.i[7].re@ led_driver.loadBase.i[7].im@ // led_driver.I_mag[7] = (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5
eq_214 : led_driver.I_mag[8]@M led_driver.loadBase.i[8].re@ led_driver.loadBase.i[8].im@ // led_driver.I_mag[8] = (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5
eq_215 : led_driver.I_arg[1]@M led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@ // led_driver.I_arg[1] = Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)
eq_216 : led_driver.I_arg[2]@M led_driver.loadBase.i[2].im@ led_driver.loadBase.i[2].re@ // led_driver.I_arg[2] = Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)
eq_217 : led_driver.I_arg[3]@M led_driver.loadBase.i[3].im@ led_driver.loadBase.i[3].re@ // led_driver.I_arg[3] = Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)
eq_218 : led_driver.I_arg[4]@M led_driver.loadBase.i[4].im@ led_driver.loadBase.i[4].re@ // led_driver.I_arg[4] = Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)
eq_219 : led_driver.I_arg[5]@M led_driver.loadBase.i[5].im@ led_driver.loadBase.i[5].re@ // led_driver.I_arg[5] = Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)
eq_220 : led_driver.I_arg[6]@M led_driver.loadBase.i[6].im@ led_driver.loadBase.i[6].re@ // led_driver.I_arg[6] = Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)
eq_221 : led_driver.I_arg[7]@M led_driver.loadBase.i[7].im@ led_driver.loadBase.i[7].re@ // led_driver.I_arg[7] = Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)
eq_222 : led_driver.I_arg[8]@M led_driver.loadBase.i[8].im@ led_driver.loadBase.i[8].re@ // led_driver.I_arg[8] = Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)
eq_223 : led_driver.magScale@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.magScale = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_224 : led_driver.c[1]@M led_driver.magScale@ // led_driver.c[1] = led_driver.magScale * 0.890432111870432
eq_225 : led_driver.c[2]@M led_driver.magScale@ // led_driver.c[2] = led_driver.magScale * 0.7418107134668804
eq_226 : led_driver.c[3]@M led_driver.magScale@ // led_driver.c[3] = led_driver.magScale * 0.567293049298617
eq_227 : led_driver.c[4]@M led_driver.magScale@ // led_driver.c[4] = led_driver.magScale * 0.3936692199400683
eq_228 : led_driver.c[5]@M led_driver.magScale@ // led_driver.c[5] = led_driver.magScale * 0.2525656583874291
eq_229 : led_driver.c[6]@M led_driver.magScale@ // led_driver.c[6] = led_driver.magScale * 0.1565031895698116
eq_230 : led_driver.c[7]@M led_driver.magScale@ // led_driver.c[7] = led_driver.magScale * 0.1085784608235925

DAE BiPGraph matching
----------------------------------------
BiPGraph matching:
eq_2 : der(PhA.theta)
eq_3 : PhA.omega
eq_4 : der(PhB.theta)
eq_5 : PhB.omega
eq_6 : der(PhC.theta)
eq_7 : PhC.omega
eq_8 : test_DY.idealTransformer1.iPrim[1].re
eq_9 : test_DY.idealTransformer1.iPrim[1].im
eq_10 : test_DY.idealTransformer1.iPrim[2].re
eq_11 : test_DY.idealTransformer1.iPrim[2].im
eq_12 : test_DY.idealTransformer1.iPrim[3].re
eq_13 : test_DY.idealTransformer1.iPrim[3].im
eq_14 : test_DY.idealTransformer1.iPrim[4].re
eq_15 : test_DY.idealTransformer1.iPrim[4].im
eq_16 : test_DY.idealTransformer1.iPrim[5].re
eq_17 : test_DY.idealTransformer1.iPrim[5].im
eq_18 : test_DY.idealTransformer1.iPrim[6].re
eq_19 : test_DY.idealTransformer1.iPrim[6].im
eq_20 : test_DY.idealTransformer1.iPrim[7].re
eq_21 : test_DY.idealTransformer1.iPrim[7].im
eq_22 : test_DY.idealTransformer1.iPrim[8].re
eq_23 : test_DY.idealTransformer1.iPrim[8].im
eq_24 : test_DY.idealTransformer2.iPrim[1].re
eq_25 : test_DY.idealTransformer2.iPrim[1].im
eq_26 : test_DY.idealTransformer2.iPrim[2].re
eq_27 : test_DY.idealTransformer2.iPrim[2].im
eq_28 : test_DY.idealTransformer2.iPrim[3].re
eq_29 : test_DY.idealTransformer2.iPrim[3].im
eq_30 : test_DY.idealTransformer2.iPrim[4].re
eq_31 : test_DY.idealTransformer2.iPrim[4].im
eq_32 : test_DY.idealTransformer2.iPrim[5].re
eq_33 : test_DY.idealTransformer2.iPrim[5].im
eq_34 : test_DY.idealTransformer2.iPrim[6].re
eq_35 : test_DY.idealTransformer2.iPrim[6].im
eq_36 : test_DY.idealTransformer2.iPrim[7].re
eq_37 : test_DY.idealTransformer2.iPrim[7].im
eq_38 : test_DY.idealTransformer2.iPrim[8].re
eq_39 : test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].im
eq_41 : laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re
eq_43 : laptop2.loadBase.i[2].im
eq_44 : laptop2.loadBase.i[3].re
eq_45 : laptop2.loadBase.i[3].im
eq_46 : laptop2.loadBase.i[4].re
eq_47 : laptop2.loadBase.i[4].im
eq_48 : laptop2.loadBase.i[5].re
eq_49 : laptop2.loadBase.i[5].im
eq_50 : laptop2.loadBase.i[6].re
eq_51 : laptop2.loadBase.i[6].im
eq_52 : laptop2.loadBase.i[7].re
eq_53 : laptop2.loadBase.i[7].im
eq_54 : laptop2.loadBase.i[8].re
eq_55 : laptop2.loadBase.i[8].im
eq_57 : laptop2.loadBase.omega
eq_58 : led_driver.loadBase.i[1].im
eq_59 : led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re
eq_61 : led_driver.loadBase.i[2].im
eq_62 : led_driver.loadBase.i[3].re
eq_63 : led_driver.loadBase.i[3].im
eq_64 : led_driver.loadBase.i[4].re
eq_65 : led_driver.loadBase.i[4].im
eq_66 : led_driver.loadBase.i[5].re
eq_67 : led_driver.loadBase.i[5].im
eq_68 : led_driver.loadBase.i[6].re
eq_69 : led_driver.loadBase.i[6].im
eq_70 : led_driver.loadBase.i[7].re
eq_71 : led_driver.loadBase.i[7].im
eq_72 : led_driver.loadBase.i[8].re
eq_73 : led_driver.loadBase.i[8].im
eq_75 : led_driver.loadBase.omega
eq_76 : r.omega
eq_77 : ground.pin.iIm[1]
eq_78 : ground.pin.iIm[2]
eq_79 : ground.pin.iIm[3]
eq_80 : ground.pin.iIm[4]
eq_81 : ground.pin.iIm[5]
eq_82 : ground.pin.iIm[6]
eq_83 : ground.pin.iIm[7]
eq_84 : ground.pin.iIm[8]
eq_85 : ground.pin.iRe[1]
eq_86 : ground.pin.iRe[2]
eq_87 : ground.pin.iRe[3]
eq_88 : ground.pin.iRe[4]
eq_89 : ground.pin.iRe[5]
eq_90 : ground.pin.iRe[6]
eq_91 : ground.pin.iRe[7]
eq_92 : ground.pin.iRe[8]
eq_93 : test_DY.hPin_N.iIm[1]
eq_94 : test_DY.hPin_N.iIm[2]
eq_95 : test_DY.hPin_N.iIm[3]
eq_96 : test_DY.hPin_N.iIm[4]
eq_97 : test_DY.hPin_N.iIm[5]
eq_98 : test_DY.hPin_N.iIm[6]
eq_99 : test_DY.hPin_N.iIm[7]
eq_100 : test_DY.hPin_N.iIm[8]
eq_101 : test_DY.hPin_N.iRe[1]
eq_102 : test_DY.hPin_N.iRe[2]
eq_103 : test_DY.hPin_N.iRe[3]
eq_104 : test_DY.hPin_N.iRe[4]
eq_105 : test_DY.hPin_N.iRe[5]
eq_106 : test_DY.hPin_N.iRe[6]
eq_107 : test_DY.hPin_N.iRe[7]
eq_108 : test_DY.hPin_N.iRe[8]
eq_109 : PhA.i[1].im
eq_110 : PhA.i[2].im
eq_111 : PhA.i[3].im
eq_112 : PhA.i[4].im
eq_113 : PhA.i[5].im
eq_114 : PhA.i[6].im
eq_115 : PhA.i[7].im
eq_116 : PhA.i[8].im
eq_117 : PhA.i[1].re
eq_118 : PhA.i[2].re
eq_119 : PhA.i[3].re
eq_120 : PhA.i[4].re
eq_121 : PhA.i[5].re
eq_122 : PhA.i[6].re
eq_123 : PhA.i[7].re
eq_124 : PhA.i[8].re
eq_125 : PhC.i[1].im
eq_126 : PhC.i[2].im
eq_127 : PhC.i[3].im
eq_128 : PhC.i[4].im
eq_129 : PhC.i[5].im
eq_130 : PhC.i[6].im
eq_131 : PhC.i[7].im
eq_132 : PhC.i[8].im
eq_133 : PhC.i[1].re
eq_134 : PhC.i[2].re
eq_135 : PhC.i[3].re
eq_136 : PhC.i[4].re
eq_137 : PhC.i[5].re
eq_138 : PhC.i[6].re
eq_139 : PhC.i[7].re
eq_140 : PhC.i[8].re
eq_141 : PhB.i[1].im
eq_142 : PhB.i[2].im
eq_143 : PhB.i[3].im
eq_144 : PhB.i[4].im
eq_145 : PhB.i[5].im
eq_146 : PhB.i[6].im
eq_147 : PhB.i[7].im
eq_148 : PhB.i[8].im
eq_149 : PhB.i[1].re
eq_150 : PhB.i[2].re
eq_151 : PhB.i[3].re
eq_152 : PhB.i[4].re
eq_153 : PhB.i[5].re
eq_154 : PhB.i[6].re
eq_155 : PhB.i[7].re
eq_156 : PhB.i[8].re
eq_157 : ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]
eq_183 : laptop2.I_mag[1]
eq_184 : laptop2.I_mag[2]
eq_185 : laptop2.I_mag[3]
eq_186 : laptop2.I_mag[4]
eq_187 : laptop2.I_mag[5]
eq_188 : laptop2.I_mag[6]
eq_189 : laptop2.I_mag[7]
eq_190 : laptop2.I_mag[8]
eq_191 : laptop2.I_arg[1]
eq_192 : laptop2.I_arg[2]
eq_193 : laptop2.I_arg[3]
eq_194 : laptop2.I_arg[4]
eq_195 : laptop2.I_arg[5]
eq_196 : laptop2.I_arg[6]
eq_197 : laptop2.I_arg[7]
eq_198 : laptop2.I_arg[8]
eq_199 : laptop2.magScale
eq_200 : laptop2.c[1]
eq_201 : laptop2.c[2]
eq_202 : laptop2.c[3]
eq_203 : laptop2.c[4]
eq_204 : laptop2.c[5]
eq_205 : laptop2.c[6]
eq_206 : laptop2.c[7]
eq_207 : led_driver.I_mag[1]
eq_208 : led_driver.I_mag[2]
eq_209 : led_driver.I_mag[3]
eq_210 : led_driver.I_mag[4]
eq_211 : led_driver.I_mag[5]
eq_212 : led_driver.I_mag[6]
eq_213 : led_driver.I_mag[7]
eq_214 : led_driver.I_mag[8]
eq_215 : led_driver.I_arg[1]
eq_216 : led_driver.I_arg[2]
eq_217 : led_driver.I_arg[3]
eq_218 : led_driver.I_arg[4]
eq_219 : led_driver.I_arg[5]
eq_220 : led_driver.I_arg[6]
eq_221 : led_driver.I_arg[7]
eq_222 : led_driver.I_arg[8]
eq_223 : led_driver.magScale
eq_224 : led_driver.c[1]
eq_225 : led_driver.c[2]
eq_226 : led_driver.c[3]
eq_227 : led_driver.c[4]
eq_228 : led_driver.c[5]
eq_229 : led_driver.c[6]
eq_230 : led_driver.c[7]
Unmatched equations: {}
Unmatched variables: {}
----------------------------------------

BiPGraph (230 equations, 217 variables)
Variables: {der(PhA.theta) der(PhB.theta) der(PhC.theta) PhA.i[1].re PhA.i[1].im PhA.i[2].re PhA.i[2].im PhA.i[3].re PhA.i[3].im PhA.i[4].re PhA.i[4].im PhA.i[5].re PhA.i[5].im PhA.i[6].re PhA.i[6].im PhA.i[7].re PhA.i[7].im PhA.i[8].re PhA.i[8].im PhA.omega PhB.i[1].re PhB.i[1].im PhB.i[2].re PhB.i[2].im PhB.i[3].re PhB.i[3].im PhB.i[4].re PhB.i[4].im PhB.i[5].re PhB.i[5].im PhB.i[6].re PhB.i[6].im PhB.i[7].re PhB.i[7].im PhB.i[8].re PhB.i[8].im PhB.omega PhC.i[1].re PhC.i[1].im PhC.i[2].re PhC.i[2].im PhC.i[3].re PhC.i[3].im PhC.i[4].re PhC.i[4].im PhC.i[5].re PhC.i[5].im PhC.i[6].re PhC.i[6].im PhC.i[7].re PhC.i[7].im PhC.i[8].re PhC.i[8].im PhC.omega test_DY.idealTransformer1.iPrim[1].re test_DY.idealTransformer1.iPrim[1].im test_DY.idealTransformer1.iPrim[2].re test_DY.idealTransformer1.iPrim[2].im test_DY.idealTransformer1.iPrim[3].re test_DY.idealTransformer1.iPrim[3].im test_DY.idealTransformer1.iPrim[4].re test_DY.idealTransformer1.iPrim[4].im test_DY.idealTransformer1.iPrim[5].re test_DY.idealTransformer1.iPrim[5].im test_DY.idealTransformer1.iPrim[6].re test_DY.idealTransformer1.iPrim[6].im test_DY.idealTransformer1.iPrim[7].re test_DY.idealTransformer1.iPrim[7].im test_DY.idealTransformer1.iPrim[8].re test_DY.idealTransformer1.iPrim[8].im test_DY.idealTransformer2.iPrim[1].re test_DY.idealTransformer2.iPrim[1].im test_DY.idealTransformer2.iPrim[2].re test_DY.idealTransformer2.iPrim[2].im test_DY.idealTransformer2.iPrim[3].re test_DY.idealTransformer2.iPrim[3].im test_DY.idealTransformer2.iPrim[4].re test_DY.idealTransformer2.iPrim[4].im test_DY.idealTransformer2.iPrim[5].re test_DY.idealTransformer2.iPrim[5].im test_DY.idealTransformer2.iPrim[6].re test_DY.idealTransformer2.iPrim[6].im test_DY.idealTransformer2.iPrim[7].re test_DY.idealTransformer2.iPrim[7].im test_DY.idealTransformer2.iPrim[8].re test_DY.idealTransformer2.iPrim[8].im test_DY.hPin_N.iIm[1] test_DY.hPin_N.iIm[2] test_DY.hPin_N.iIm[3] test_DY.hPin_N.iIm[4] test_DY.hPin_N.iIm[5] test_DY.hPin_N.iIm[6] test_DY.hPin_N.iIm[7] test_DY.hPin_N.iIm[8] test_DY.hPin_N.iRe[1] test_DY.hPin_N.iRe[2] test_DY.hPin_N.iRe[3] test_DY.hPin_N.iRe[4] test_DY.hPin_N.iRe[5] test_DY.hPin_N.iRe[6] test_DY.hPin_N.iRe[7] test_DY.hPin_N.iRe[8] ground.pin.iIm[1] ground.pin.iIm[2] ground.pin.iIm[3] ground.pin.iIm[4] ground.pin.iIm[5] ground.pin.iIm[6] ground.pin.iIm[7] ground.pin.iIm[8] ground.pin.iRe[1] ground.pin.iRe[2] ground.pin.iRe[3] ground.pin.iRe[4] ground.pin.iRe[5] ground.pin.iRe[6] ground.pin.iRe[7] ground.pin.iRe[8] laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im laptop2.loadBase.i[2].re laptop2.loadBase.i[2].im laptop2.loadBase.i[3].re laptop2.loadBase.i[3].im laptop2.loadBase.i[4].re laptop2.loadBase.i[4].im laptop2.loadBase.i[5].re laptop2.loadBase.i[5].im laptop2.loadBase.i[6].re laptop2.loadBase.i[6].im laptop2.loadBase.i[7].re laptop2.loadBase.i[7].im laptop2.loadBase.i[8].re laptop2.loadBase.i[8].im laptop2.loadBase.omega laptop2.I_mag[1] laptop2.I_mag[2] laptop2.I_mag[3] laptop2.I_mag[4] laptop2.I_mag[5] laptop2.I_mag[6] laptop2.I_mag[7] laptop2.I_mag[8] laptop2.I_arg[1] laptop2.I_arg[2] laptop2.I_arg[3] laptop2.I_arg[4] laptop2.I_arg[5] laptop2.I_arg[6] laptop2.I_arg[7] laptop2.I_arg[8] laptop2.magScale laptop2.c[1] laptop2.c[2] laptop2.c[3] laptop2.c[4] laptop2.c[5] laptop2.c[6] laptop2.c[7] led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im led_driver.loadBase.i[2].re led_driver.loadBase.i[2].im led_driver.loadBase.i[3].re led_driver.loadBase.i[3].im led_driver.loadBase.i[4].re led_driver.loadBase.i[4].im led_driver.loadBase.i[5].re led_driver.loadBase.i[5].im led_driver.loadBase.i[6].re led_driver.loadBase.i[6].im led_driver.loadBase.i[7].re led_driver.loadBase.i[7].im led_driver.loadBase.i[8].re led_driver.loadBase.i[8].im led_driver.loadBase.omega led_driver.I_mag[1] led_driver.I_mag[2] led_driver.I_mag[3] led_driver.I_mag[4] led_driver.I_mag[5] led_driver.I_mag[6] led_driver.I_mag[7] led_driver.I_mag[8] led_driver.I_arg[1] led_driver.I_arg[2] led_driver.I_arg[3] led_driver.I_arg[4] led_driver.I_arg[5] led_driver.I_arg[6] led_driver.I_arg[7] led_driver.I_arg[8] led_driver.magScale led_driver.c[1] led_driver.c[2] led_driver.c[3] led_driver.c[4] led_driver.c[5] led_driver.c[6] led_driver.c[7] ground1.pin.iIm[1] ground1.pin.iIm[2] ground1.pin.iIm[3] ground1.pin.iIm[4] ground1.pin.iIm[5] ground1.pin.iIm[6] ground1.pin.iIm[7] ground1.pin.iIm[8] ground1.pin.iRe[1] ground1.pin.iRe[2] ground1.pin.iRe[3] ground1.pin.iRe[4] ground1.pin.iRe[5] ground1.pin.iRe[6] ground1.pin.iRe[7] ground1.pin.iRe[8] r.omega }
eq_1 : // algorithm

eq_2 : der(PhA.theta)@M // der(PhA.theta) = 6.283185307179586 * systemDef.fFund
eq_3 : PhA.omega@M der(PhA.theta)@ // PhA.omega = der(PhA.theta)
eq_4 : der(PhB.theta)@M // der(PhB.theta) = 6.283185307179586 * systemDef.fFund
eq_5 : PhB.omega@M der(PhB.theta)@ // PhB.omega = der(PhB.theta)
eq_6 : der(PhC.theta)@M // der(PhC.theta) = 6.283185307179586 * systemDef.fFund
eq_7 : PhC.omega@M der(PhC.theta)@ // PhC.omega = der(PhC.theta)
eq_8 : led_driver.loadBase.i[1].re@ test_DY.idealTransformer1.iPrim[1].re@M // - led_driver.loadBase.i[1].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].re
eq_9 : led_driver.loadBase.i[1].im@ test_DY.idealTransformer1.iPrim[1].im@M // - led_driver.loadBase.i[1].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].im
eq_10 : led_driver.loadBase.i[2].re@ test_DY.idealTransformer1.iPrim[2].re@M // - led_driver.loadBase.i[2].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].re
eq_11 : led_driver.loadBase.i[2].im@ test_DY.idealTransformer1.iPrim[2].im@M // - led_driver.loadBase.i[2].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].im
eq_12 : led_driver.loadBase.i[3].re@ test_DY.idealTransformer1.iPrim[3].re@M // - led_driver.loadBase.i[3].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].re
eq_13 : led_driver.loadBase.i[3].im@ test_DY.idealTransformer1.iPrim[3].im@M // - led_driver.loadBase.i[3].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].im
eq_14 : led_driver.loadBase.i[4].re@ test_DY.idealTransformer1.iPrim[4].re@M // - led_driver.loadBase.i[4].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].re
eq_15 : led_driver.loadBase.i[4].im@ test_DY.idealTransformer1.iPrim[4].im@M // - led_driver.loadBase.i[4].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].im
eq_16 : led_driver.loadBase.i[5].re@ test_DY.idealTransformer1.iPrim[5].re@M // - led_driver.loadBase.i[5].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].re
eq_17 : led_driver.loadBase.i[5].im@ test_DY.idealTransformer1.iPrim[5].im@M // - led_driver.loadBase.i[5].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].im
eq_18 : led_driver.loadBase.i[6].re@ test_DY.idealTransformer1.iPrim[6].re@M // - led_driver.loadBase.i[6].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].re
eq_19 : led_driver.loadBase.i[6].im@ test_DY.idealTransformer1.iPrim[6].im@M // - led_driver.loadBase.i[6].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].im
eq_20 : led_driver.loadBase.i[7].re@ test_DY.idealTransformer1.iPrim[7].re@M // - led_driver.loadBase.i[7].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].re
eq_21 : led_driver.loadBase.i[7].im@ test_DY.idealTransformer1.iPrim[7].im@M // - led_driver.loadBase.i[7].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].im
eq_22 : led_driver.loadBase.i[8].re@ test_DY.idealTransformer1.iPrim[8].re@M // - led_driver.loadBase.i[8].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].re
eq_23 : led_driver.loadBase.i[8].im@ test_DY.idealTransformer1.iPrim[8].im@M // - led_driver.loadBase.i[8].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].im
eq_24 : laptop2.loadBase.i[1].re@ test_DY.idealTransformer2.iPrim[1].re@M // - laptop2.loadBase.i[1].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].re
eq_25 : laptop2.loadBase.i[1].im@ test_DY.idealTransformer2.iPrim[1].im@M // - laptop2.loadBase.i[1].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].im
eq_26 : laptop2.loadBase.i[2].re@ test_DY.idealTransformer2.iPrim[2].re@M // - laptop2.loadBase.i[2].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].re
eq_27 : laptop2.loadBase.i[2].im@ test_DY.idealTransformer2.iPrim[2].im@M // - laptop2.loadBase.i[2].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].im
eq_28 : laptop2.loadBase.i[3].re@ test_DY.idealTransformer2.iPrim[3].re@M // - laptop2.loadBase.i[3].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].re
eq_29 : laptop2.loadBase.i[3].im@ test_DY.idealTransformer2.iPrim[3].im@M // - laptop2.loadBase.i[3].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].im
eq_30 : laptop2.loadBase.i[4].re@ test_DY.idealTransformer2.iPrim[4].re@M // - laptop2.loadBase.i[4].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].re
eq_31 : laptop2.loadBase.i[4].im@ test_DY.idealTransformer2.iPrim[4].im@M // - laptop2.loadBase.i[4].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].im
eq_32 : laptop2.loadBase.i[5].re@ test_DY.idealTransformer2.iPrim[5].re@M // - laptop2.loadBase.i[5].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].re
eq_33 : laptop2.loadBase.i[5].im@ test_DY.idealTransformer2.iPrim[5].im@M // - laptop2.loadBase.i[5].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].im
eq_34 : laptop2.loadBase.i[6].re@ test_DY.idealTransformer2.iPrim[6].re@M // - laptop2.loadBase.i[6].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].re
eq_35 : laptop2.loadBase.i[6].im@ test_DY.idealTransformer2.iPrim[6].im@M // - laptop2.loadBase.i[6].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].im
eq_36 : laptop2.loadBase.i[7].re@ test_DY.idealTransformer2.iPrim[7].re@M // - laptop2.loadBase.i[7].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].re
eq_37 : laptop2.loadBase.i[7].im@ test_DY.idealTransformer2.iPrim[7].im@M // - laptop2.loadBase.i[7].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].im
eq_38 : laptop2.loadBase.i[8].re@ test_DY.idealTransformer2.iPrim[8].re@M // - laptop2.loadBase.i[8].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].re
eq_39 : laptop2.loadBase.i[8].im@ test_DY.idealTransformer2.iPrim[8].im@M // - laptop2.loadBase.i[8].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@M // laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
eq_41 : laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@M // laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re@M laptop2.c[1]@ // laptop2.loadBase.i[2].re = laptop2.c[1] * laptop2.a[1].re
eq_43 : laptop2.loadBase.i[2].im@M laptop2.c[1]@ // laptop2.loadBase.i[2].im = laptop2.c[1] * laptop2.a[1].im
eq_44 : laptop2.loadBase.i[3].re@M laptop2.c[2]@ // laptop2.loadBase.i[3].re = laptop2.c[2] * laptop2.a[2].re
eq_45 : laptop2.loadBase.i[3].im@M laptop2.c[2]@ // laptop2.loadBase.i[3].im = laptop2.c[2] * laptop2.a[2].im
eq_46 : laptop2.loadBase.i[4].re@M laptop2.c[3]@ // laptop2.loadBase.i[4].re = laptop2.c[3] * laptop2.a[3].re
eq_47 : laptop2.loadBase.i[4].im@M laptop2.c[3]@ // laptop2.loadBase.i[4].im = laptop2.c[3] * laptop2.a[3].im
eq_48 : laptop2.loadBase.i[5].re@M laptop2.c[4]@ // laptop2.loadBase.i[5].re = laptop2.c[4] * laptop2.a[4].re
eq_49 : laptop2.loadBase.i[5].im@M laptop2.c[4]@ // laptop2.loadBase.i[5].im = laptop2.c[4] * laptop2.a[4].im
eq_50 : laptop2.loadBase.i[6].re@M laptop2.c[5]@ // laptop2.loadBase.i[6].re = laptop2.c[5] * laptop2.a[5].re
eq_51 : laptop2.loadBase.i[6].im@M laptop2.c[5]@ // laptop2.loadBase.i[6].im = laptop2.c[5] * laptop2.a[5].im
eq_52 : laptop2.loadBase.i[7].re@M laptop2.c[6]@ // laptop2.loadBase.i[7].re = laptop2.c[6] * laptop2.a[6].re
eq_53 : laptop2.loadBase.i[7].im@M laptop2.c[6]@ // laptop2.loadBase.i[7].im = laptop2.c[6] * laptop2.a[6].im
eq_54 : laptop2.loadBase.i[8].re@M laptop2.c[7]@ // laptop2.loadBase.i[8].re = laptop2.c[7] * laptop2.a[7].re
eq_55 : laptop2.loadBase.i[8].im@M laptop2.c[7]@ // laptop2.loadBase.i[8].im = laptop2.c[7] * laptop2.a[7].im
eq_56 : // algorithm

eq_57 : laptop2.loadBase.omega@M der(PhA.theta)@ // laptop2.loadBase.omega = der(PhA.theta)
eq_58 : led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@M // led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
eq_59 : led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@M // led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re@M led_driver.c[1]@ // led_driver.loadBase.i[2].re = led_driver.c[1] * led_driver.a[1].re
eq_61 : led_driver.loadBase.i[2].im@M led_driver.c[1]@ // led_driver.loadBase.i[2].im = led_driver.c[1] * led_driver.a[1].im
eq_62 : led_driver.loadBase.i[3].re@M led_driver.c[2]@ // led_driver.loadBase.i[3].re = led_driver.c[2] * led_driver.a[2].re
eq_63 : led_driver.loadBase.i[3].im@M led_driver.c[2]@ // led_driver.loadBase.i[3].im = led_driver.c[2] * led_driver.a[2].im
eq_64 : led_driver.loadBase.i[4].re@M led_driver.c[3]@ // led_driver.loadBase.i[4].re = led_driver.c[3] * led_driver.a[3].re
eq_65 : led_driver.loadBase.i[4].im@M led_driver.c[3]@ // led_driver.loadBase.i[4].im = led_driver.c[3] * led_driver.a[3].im
eq_66 : led_driver.loadBase.i[5].re@M led_driver.c[4]@ // led_driver.loadBase.i[5].re = led_driver.c[4] * led_driver.a[4].re
eq_67 : led_driver.loadBase.i[5].im@M led_driver.c[4]@ // led_driver.loadBase.i[5].im = led_driver.c[4] * led_driver.a[4].im
eq_68 : led_driver.loadBase.i[6].re@M led_driver.c[5]@ // led_driver.loadBase.i[6].re = led_driver.c[5] * led_driver.a[5].re
eq_69 : led_driver.loadBase.i[6].im@M led_driver.c[5]@ // led_driver.loadBase.i[6].im = led_driver.c[5] * led_driver.a[5].im
eq_70 : led_driver.loadBase.i[7].re@M led_driver.c[6]@ // led_driver.loadBase.i[7].re = led_driver.c[6] * led_driver.a[6].re
eq_71 : led_driver.loadBase.i[7].im@M led_driver.c[6]@ // led_driver.loadBase.i[7].im = led_driver.c[6] * led_driver.a[6].im
eq_72 : led_driver.loadBase.i[8].re@M led_driver.c[7]@ // led_driver.loadBase.i[8].re = led_driver.c[7] * led_driver.a[7].re
eq_73 : led_driver.loadBase.i[8].im@M led_driver.c[7]@ // led_driver.loadBase.i[8].im = led_driver.c[7] * led_driver.a[7].im
eq_74 : // algorithm

eq_75 : led_driver.loadBase.omega@M der(PhA.theta)@ // led_driver.loadBase.omega = der(PhA.theta)
eq_76 : r.omega@M der(PhA.theta)@ // r.omega = der(PhA.theta)
eq_77 : PhA.i[1].im@ PhB.i[1].im@ PhC.i[1].im@ ground.pin.iIm[1]@M // - PhA.i[1].im + (- PhB.i[1].im) + (- PhC.i[1].im) + ground.pin.iIm[1] = 0
eq_78 : PhA.i[2].im@ PhB.i[2].im@ PhC.i[2].im@ ground.pin.iIm[2]@M // - PhA.i[2].im + (- PhB.i[2].im) + (- PhC.i[2].im) + ground.pin.iIm[2] = 0
eq_79 : PhA.i[3].im@ PhB.i[3].im@ PhC.i[3].im@ ground.pin.iIm[3]@M // - PhA.i[3].im + (- PhB.i[3].im) + (- PhC.i[3].im) + ground.pin.iIm[3] = 0
eq_80 : PhA.i[4].im@ PhB.i[4].im@ PhC.i[4].im@ ground.pin.iIm[4]@M // - PhA.i[4].im + (- PhB.i[4].im) + (- PhC.i[4].im) + ground.pin.iIm[4] = 0
eq_81 : PhA.i[5].im@ PhB.i[5].im@ PhC.i[5].im@ ground.pin.iIm[5]@M // - PhA.i[5].im + (- PhB.i[5].im) + (- PhC.i[5].im) + ground.pin.iIm[5] = 0
eq_82 : PhA.i[6].im@ PhB.i[6].im@ PhC.i[6].im@ ground.pin.iIm[6]@M // - PhA.i[6].im + (- PhB.i[6].im) + (- PhC.i[6].im) + ground.pin.iIm[6] = 0
eq_83 : PhA.i[7].im@ PhB.i[7].im@ PhC.i[7].im@ ground.pin.iIm[7]@M // - PhA.i[7].im + (- PhB.i[7].im) + (- PhC.i[7].im) + ground.pin.iIm[7] = 0
eq_84 : PhA.i[8].im@ PhB.i[8].im@ PhC.i[8].im@ ground.pin.iIm[8]@M // - PhA.i[8].im + (- PhB.i[8].im) + (- PhC.i[8].im) + ground.pin.iIm[8] = 0
eq_85 : PhA.i[1].re@ PhB.i[1].re@ PhC.i[1].re@ ground.pin.iRe[1]@M // - PhA.i[1].re + (- PhB.i[1].re) + (- PhC.i[1].re) + ground.pin.iRe[1] = 0
eq_86 : PhA.i[2].re@ PhB.i[2].re@ PhC.i[2].re@ ground.pin.iRe[2]@M // - PhA.i[2].re + (- PhB.i[2].re) + (- PhC.i[2].re) + ground.pin.iRe[2] = 0
eq_87 : PhA.i[3].re@ PhB.i[3].re@ PhC.i[3].re@ ground.pin.iRe[3]@M // - PhA.i[3].re + (- PhB.i[3].re) + (- PhC.i[3].re) + ground.pin.iRe[3] = 0
eq_88 : PhA.i[4].re@ PhB.i[4].re@ PhC.i[4].re@ ground.pin.iRe[4]@M // - PhA.i[4].re + (- PhB.i[4].re) + (- PhC.i[4].re) + ground.pin.iRe[4] = 0
eq_89 : PhA.i[5].re@ PhB.i[5].re@ PhC.i[5].re@ ground.pin.iRe[5]@M // - PhA.i[5].re + (- PhB.i[5].re) + (- PhC.i[5].re) + ground.pin.iRe[5] = 0
eq_90 : PhA.i[6].re@ PhB.i[6].re@ PhC.i[6].re@ ground.pin.iRe[6]@M // - PhA.i[6].re + (- PhB.i[6].re) + (- PhC.i[6].re) + ground.pin.iRe[6] = 0
eq_91 : PhA.i[7].re@ PhB.i[7].re@ PhC.i[7].re@ ground.pin.iRe[7]@M // - PhA.i[7].re + (- PhB.i[7].re) + (- PhC.i[7].re) + ground.pin.iRe[7] = 0
eq_92 : PhA.i[8].re@ PhB.i[8].re@ PhC.i[8].re@ ground.pin.iRe[8]@M // - PhA.i[8].re + (- PhB.i[8].re) + (- PhC.i[8].re) + ground.pin.iRe[8] = 0
eq_93 : ground1.pin.iIm[1]@ laptop2.loadBase.i[1].im@ led_driver.loadBase.i[1].im@ test_DY.hPin_N.iIm[1]@M // ground1.pin.iIm[1] + (- laptop2.loadBase.i[1].im) + (- led_driver.loadBase.i[1].im) + (- r.i[1].im) + test_DY.hPin_N.iIm[1] = 0
eq_94 : ground1.pin.iIm[2]@ laptop2.loadBase.i[2].im@ led_driver.loadBase.i[2].im@ test_DY.hPin_N.iIm[2]@M // ground1.pin.iIm[2] + (- laptop2.loadBase.i[2].im) + (- led_driver.loadBase.i[2].im) + (- r.i[2].im) + test_DY.hPin_N.iIm[2] = 0
eq_95 : ground1.pin.iIm[3]@ laptop2.loadBase.i[3].im@ led_driver.loadBase.i[3].im@ test_DY.hPin_N.iIm[3]@M // ground1.pin.iIm[3] + (- laptop2.loadBase.i[3].im) + (- led_driver.loadBase.i[3].im) + (- r.i[3].im) + test_DY.hPin_N.iIm[3] = 0
eq_96 : ground1.pin.iIm[4]@ laptop2.loadBase.i[4].im@ led_driver.loadBase.i[4].im@ test_DY.hPin_N.iIm[4]@M // ground1.pin.iIm[4] + (- laptop2.loadBase.i[4].im) + (- led_driver.loadBase.i[4].im) + (- r.i[4].im) + test_DY.hPin_N.iIm[4] = 0
eq_97 : ground1.pin.iIm[5]@ laptop2.loadBase.i[5].im@ led_driver.loadBase.i[5].im@ test_DY.hPin_N.iIm[5]@M // ground1.pin.iIm[5] + (- laptop2.loadBase.i[5].im) + (- led_driver.loadBase.i[5].im) + (- r.i[5].im) + test_DY.hPin_N.iIm[5] = 0
eq_98 : ground1.pin.iIm[6]@ laptop2.loadBase.i[6].im@ led_driver.loadBase.i[6].im@ test_DY.hPin_N.iIm[6]@M // ground1.pin.iIm[6] + (- laptop2.loadBase.i[6].im) + (- led_driver.loadBase.i[6].im) + (- r.i[6].im) + test_DY.hPin_N.iIm[6] = 0
eq_99 : ground1.pin.iIm[7]@ laptop2.loadBase.i[7].im@ led_driver.loadBase.i[7].im@ test_DY.hPin_N.iIm[7]@M // ground1.pin.iIm[7] + (- laptop2.loadBase.i[7].im) + (- led_driver.loadBase.i[7].im) + (- r.i[7].im) + test_DY.hPin_N.iIm[7] = 0
eq_100 : ground1.pin.iIm[8]@ laptop2.loadBase.i[8].im@ led_driver.loadBase.i[8].im@ test_DY.hPin_N.iIm[8]@M // ground1.pin.iIm[8] + (- laptop2.loadBase.i[8].im) + (- led_driver.loadBase.i[8].im) + (- r.i[8].im) + test_DY.hPin_N.iIm[8] = 0
eq_101 : ground1.pin.iRe[1]@ laptop2.loadBase.i[1].re@ led_driver.loadBase.i[1].re@ test_DY.hPin_N.iRe[1]@M // ground1.pin.iRe[1] + (- laptop2.loadBase.i[1].re) + (- led_driver.loadBase.i[1].re) + (- r.i[1].re) + test_DY.hPin_N.iRe[1] = 0
eq_102 : ground1.pin.iRe[2]@ laptop2.loadBase.i[2].re@ led_driver.loadBase.i[2].re@ test_DY.hPin_N.iRe[2]@M // ground1.pin.iRe[2] + (- laptop2.loadBase.i[2].re) + (- led_driver.loadBase.i[2].re) + (- r.i[2].re) + test_DY.hPin_N.iRe[2] = 0
eq_103 : ground1.pin.iRe[3]@ laptop2.loadBase.i[3].re@ led_driver.loadBase.i[3].re@ test_DY.hPin_N.iRe[3]@M // ground1.pin.iRe[3] + (- laptop2.loadBase.i[3].re) + (- led_driver.loadBase.i[3].re) + (- r.i[3].re) + test_DY.hPin_N.iRe[3] = 0
eq_104 : ground1.pin.iRe[4]@ laptop2.loadBase.i[4].re@ led_driver.loadBase.i[4].re@ test_DY.hPin_N.iRe[4]@M // ground1.pin.iRe[4] + (- laptop2.loadBase.i[4].re) + (- led_driver.loadBase.i[4].re) + (- r.i[4].re) + test_DY.hPin_N.iRe[4] = 0
eq_105 : ground1.pin.iRe[5]@ laptop2.loadBase.i[5].re@ led_driver.loadBase.i[5].re@ test_DY.hPin_N.iRe[5]@M // ground1.pin.iRe[5] + (- laptop2.loadBase.i[5].re) + (- led_driver.loadBase.i[5].re) + (- r.i[5].re) + test_DY.hPin_N.iRe[5] = 0
eq_106 : ground1.pin.iRe[6]@ laptop2.loadBase.i[6].re@ led_driver.loadBase.i[6].re@ test_DY.hPin_N.iRe[6]@M // ground1.pin.iRe[6] + (- laptop2.loadBase.i[6].re) + (- led_driver.loadBase.i[6].re) + (- r.i[6].re) + test_DY.hPin_N.iRe[6] = 0
eq_107 : ground1.pin.iRe[7]@ laptop2.loadBase.i[7].re@ led_driver.loadBase.i[7].re@ test_DY.hPin_N.iRe[7]@M // ground1.pin.iRe[7] + (- laptop2.loadBase.i[7].re) + (- led_driver.loadBase.i[7].re) + (- r.i[7].re) + test_DY.hPin_N.iRe[7] = 0
eq_108 : ground1.pin.iRe[8]@ laptop2.loadBase.i[8].re@ led_driver.loadBase.i[8].re@ test_DY.hPin_N.iRe[8]@M // ground1.pin.iRe[8] + (- laptop2.loadBase.i[8].re) + (- led_driver.loadBase.i[8].re) + (- r.i[8].re) + test_DY.hPin_N.iRe[8] = 0
eq_109 : test_DY.idealTransformer1.iPrim[1].im@ test_DY.idealTransformer2.iPrim[1].im@ PhA.i[1].im@M // test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer2.iPrim[1].im) + PhA.i[1].im = 0
eq_110 : test_DY.idealTransformer1.iPrim[2].im@ test_DY.idealTransformer2.iPrim[2].im@ PhA.i[2].im@M // test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer2.iPrim[2].im) + PhA.i[2].im = 0
eq_111 : test_DY.idealTransformer1.iPrim[3].im@ test_DY.idealTransformer2.iPrim[3].im@ PhA.i[3].im@M // test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer2.iPrim[3].im) + PhA.i[3].im = 0
eq_112 : test_DY.idealTransformer1.iPrim[4].im@ test_DY.idealTransformer2.iPrim[4].im@ PhA.i[4].im@M // test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer2.iPrim[4].im) + PhA.i[4].im = 0
eq_113 : test_DY.idealTransformer1.iPrim[5].im@ test_DY.idealTransformer2.iPrim[5].im@ PhA.i[5].im@M // test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer2.iPrim[5].im) + PhA.i[5].im = 0
eq_114 : test_DY.idealTransformer1.iPrim[6].im@ test_DY.idealTransformer2.iPrim[6].im@ PhA.i[6].im@M // test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer2.iPrim[6].im) + PhA.i[6].im = 0
eq_115 : test_DY.idealTransformer1.iPrim[7].im@ test_DY.idealTransformer2.iPrim[7].im@ PhA.i[7].im@M // test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer2.iPrim[7].im) + PhA.i[7].im = 0
eq_116 : test_DY.idealTransformer1.iPrim[8].im@ test_DY.idealTransformer2.iPrim[8].im@ PhA.i[8].im@M // test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer2.iPrim[8].im) + PhA.i[8].im = 0
eq_117 : test_DY.idealTransformer1.iPrim[1].re@ test_DY.idealTransformer2.iPrim[1].re@ PhA.i[1].re@M // test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer2.iPrim[1].re) + PhA.i[1].re = 0
eq_118 : test_DY.idealTransformer1.iPrim[2].re@ test_DY.idealTransformer2.iPrim[2].re@ PhA.i[2].re@M // test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer2.iPrim[2].re) + PhA.i[2].re = 0
eq_119 : test_DY.idealTransformer1.iPrim[3].re@ test_DY.idealTransformer2.iPrim[3].re@ PhA.i[3].re@M // test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer2.iPrim[3].re) + PhA.i[3].re = 0
eq_120 : test_DY.idealTransformer1.iPrim[4].re@ test_DY.idealTransformer2.iPrim[4].re@ PhA.i[4].re@M // test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer2.iPrim[4].re) + PhA.i[4].re = 0
eq_121 : test_DY.idealTransformer1.iPrim[5].re@ test_DY.idealTransformer2.iPrim[5].re@ PhA.i[5].re@M // test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer2.iPrim[5].re) + PhA.i[5].re = 0
eq_122 : test_DY.idealTransformer1.iPrim[6].re@ test_DY.idealTransformer2.iPrim[6].re@ PhA.i[6].re@M // test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer2.iPrim[6].re) + PhA.i[6].re = 0
eq_123 : test_DY.idealTransformer1.iPrim[7].re@ test_DY.idealTransformer2.iPrim[7].re@ PhA.i[7].re@M // test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer2.iPrim[7].re) + PhA.i[7].re = 0
eq_124 : test_DY.idealTransformer1.iPrim[8].re@ test_DY.idealTransformer2.iPrim[8].re@ PhA.i[8].re@M // test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer2.iPrim[8].re) + PhA.i[8].re = 0
eq_125 : test_DY.idealTransformer1.iPrim[1].im@ PhC.i[1].im@M // - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im + PhC.i[1].im = 0
eq_126 : test_DY.idealTransformer1.iPrim[2].im@ PhC.i[2].im@M // - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im + PhC.i[2].im = 0
eq_127 : test_DY.idealTransformer1.iPrim[3].im@ PhC.i[3].im@M // - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im + PhC.i[3].im = 0
eq_128 : test_DY.idealTransformer1.iPrim[4].im@ PhC.i[4].im@M // - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im + PhC.i[4].im = 0
eq_129 : test_DY.idealTransformer1.iPrim[5].im@ PhC.i[5].im@M // - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im + PhC.i[5].im = 0
eq_130 : test_DY.idealTransformer1.iPrim[6].im@ PhC.i[6].im@M // - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im + PhC.i[6].im = 0
eq_131 : test_DY.idealTransformer1.iPrim[7].im@ PhC.i[7].im@M // - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im + PhC.i[7].im = 0
eq_132 : test_DY.idealTransformer1.iPrim[8].im@ PhC.i[8].im@M // - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im + PhC.i[8].im = 0
eq_133 : test_DY.idealTransformer1.iPrim[1].re@ PhC.i[1].re@M // - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re + PhC.i[1].re = 0
eq_134 : test_DY.idealTransformer1.iPrim[2].re@ PhC.i[2].re@M // - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re + PhC.i[2].re = 0
eq_135 : test_DY.idealTransformer1.iPrim[3].re@ PhC.i[3].re@M // - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re + PhC.i[3].re = 0
eq_136 : test_DY.idealTransformer1.iPrim[4].re@ PhC.i[4].re@M // - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re + PhC.i[4].re = 0
eq_137 : test_DY.idealTransformer1.iPrim[5].re@ PhC.i[5].re@M // - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re + PhC.i[5].re = 0
eq_138 : test_DY.idealTransformer1.iPrim[6].re@ PhC.i[6].re@M // - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re + PhC.i[6].re = 0
eq_139 : test_DY.idealTransformer1.iPrim[7].re@ PhC.i[7].re@M // - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re + PhC.i[7].re = 0
eq_140 : test_DY.idealTransformer1.iPrim[8].re@ PhC.i[8].re@M // - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re + PhC.i[8].re = 0
eq_141 : test_DY.idealTransformer2.iPrim[1].im@ PhB.i[1].im@M // test_DY.idealTransformer2.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im) + PhB.i[1].im = 0
eq_142 : test_DY.idealTransformer2.iPrim[2].im@ PhB.i[2].im@M // test_DY.idealTransformer2.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im) + PhB.i[2].im = 0
eq_143 : test_DY.idealTransformer2.iPrim[3].im@ PhB.i[3].im@M // test_DY.idealTransformer2.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im) + PhB.i[3].im = 0
eq_144 : test_DY.idealTransformer2.iPrim[4].im@ PhB.i[4].im@M // test_DY.idealTransformer2.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im) + PhB.i[4].im = 0
eq_145 : test_DY.idealTransformer2.iPrim[5].im@ PhB.i[5].im@M // test_DY.idealTransformer2.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im) + PhB.i[5].im = 0
eq_146 : test_DY.idealTransformer2.iPrim[6].im@ PhB.i[6].im@M // test_DY.idealTransformer2.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im) + PhB.i[6].im = 0
eq_147 : test_DY.idealTransformer2.iPrim[7].im@ PhB.i[7].im@M // test_DY.idealTransformer2.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im) + PhB.i[7].im = 0
eq_148 : test_DY.idealTransformer2.iPrim[8].im@ PhB.i[8].im@M // test_DY.idealTransformer2.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im) + PhB.i[8].im = 0
eq_149 : test_DY.idealTransformer2.iPrim[1].re@ PhB.i[1].re@M // test_DY.idealTransformer2.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re) + PhB.i[1].re = 0
eq_150 : test_DY.idealTransformer2.iPrim[2].re@ PhB.i[2].re@M // test_DY.idealTransformer2.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re) + PhB.i[2].re = 0
eq_151 : test_DY.idealTransformer2.iPrim[3].re@ PhB.i[3].re@M // test_DY.idealTransformer2.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re) + PhB.i[3].re = 0
eq_152 : test_DY.idealTransformer2.iPrim[4].re@ PhB.i[4].re@M // test_DY.idealTransformer2.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re) + PhB.i[4].re = 0
eq_153 : test_DY.idealTransformer2.iPrim[5].re@ PhB.i[5].re@M // test_DY.idealTransformer2.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re) + PhB.i[5].re = 0
eq_154 : test_DY.idealTransformer2.iPrim[6].re@ PhB.i[6].re@M // test_DY.idealTransformer2.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re) + PhB.i[6].re = 0
eq_155 : test_DY.idealTransformer2.iPrim[7].re@ PhB.i[7].re@M // test_DY.idealTransformer2.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re) + PhB.i[7].re = 0
eq_156 : test_DY.idealTransformer2.iPrim[8].re@ PhB.i[8].re@M // test_DY.idealTransformer2.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re) + PhB.i[8].re = 0
eq_157 : ground1.pin.iIm[1]@M // 0 = ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]@M // 0 = ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]@M // 0 = ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]@M // 0 = ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]@M // 0 = ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]@M // 0 = ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]@M // 0 = ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]@M // 0 = ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]@M // 0 = ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]@M // 0 = ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]@M // 0 = ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]@M // 0 = ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]@M // 0 = ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]@M // 0 = ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]@M // 0 = ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]@M // 0 = ground1.pin.iRe[8]
eq_173 : // HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_174 : // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_175 : // HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_176 : // HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_177 : // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_178 : // HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_179 : // HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_180 : // HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_181 : // HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_182 : // HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_183 : laptop2.I_mag[1]@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.I_mag[1] = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_184 : laptop2.I_mag[2]@M laptop2.loadBase.i[2].re@ laptop2.loadBase.i[2].im@ // laptop2.I_mag[2] = (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5
eq_185 : laptop2.I_mag[3]@M laptop2.loadBase.i[3].re@ laptop2.loadBase.i[3].im@ // laptop2.I_mag[3] = (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5
eq_186 : laptop2.I_mag[4]@M laptop2.loadBase.i[4].re@ laptop2.loadBase.i[4].im@ // laptop2.I_mag[4] = (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5
eq_187 : laptop2.I_mag[5]@M laptop2.loadBase.i[5].re@ laptop2.loadBase.i[5].im@ // laptop2.I_mag[5] = (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5
eq_188 : laptop2.I_mag[6]@M laptop2.loadBase.i[6].re@ laptop2.loadBase.i[6].im@ // laptop2.I_mag[6] = (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5
eq_189 : laptop2.I_mag[7]@M laptop2.loadBase.i[7].re@ laptop2.loadBase.i[7].im@ // laptop2.I_mag[7] = (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5
eq_190 : laptop2.I_mag[8]@M laptop2.loadBase.i[8].re@ laptop2.loadBase.i[8].im@ // laptop2.I_mag[8] = (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5
eq_191 : laptop2.I_arg[1]@M laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@ // laptop2.I_arg[1] = Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)
eq_192 : laptop2.I_arg[2]@M laptop2.loadBase.i[2].im@ laptop2.loadBase.i[2].re@ // laptop2.I_arg[2] = Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)
eq_193 : laptop2.I_arg[3]@M laptop2.loadBase.i[3].im@ laptop2.loadBase.i[3].re@ // laptop2.I_arg[3] = Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)
eq_194 : laptop2.I_arg[4]@M laptop2.loadBase.i[4].im@ laptop2.loadBase.i[4].re@ // laptop2.I_arg[4] = Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)
eq_195 : laptop2.I_arg[5]@M laptop2.loadBase.i[5].im@ laptop2.loadBase.i[5].re@ // laptop2.I_arg[5] = Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)
eq_196 : laptop2.I_arg[6]@M laptop2.loadBase.i[6].im@ laptop2.loadBase.i[6].re@ // laptop2.I_arg[6] = Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)
eq_197 : laptop2.I_arg[7]@M laptop2.loadBase.i[7].im@ laptop2.loadBase.i[7].re@ // laptop2.I_arg[7] = Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)
eq_198 : laptop2.I_arg[8]@M laptop2.loadBase.i[8].im@ laptop2.loadBase.i[8].re@ // laptop2.I_arg[8] = Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)
eq_199 : laptop2.magScale@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.magScale = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_200 : laptop2.c[1]@M laptop2.magScale@ // laptop2.c[1] = laptop2.magScale * 0.9486974344201337
eq_201 : laptop2.c[2]@M laptop2.magScale@ // laptop2.c[2] = laptop2.magScale * 0.9221155376813399
eq_202 : laptop2.c[3]@M laptop2.magScale@ // laptop2.c[3] = laptop2.magScale * 0.8849332521469448
eq_203 : laptop2.c[4]@M laptop2.magScale@ // laptop2.c[4] = laptop2.magScale * 0.8475867045468796
eq_204 : laptop2.c[5]@M laptop2.magScale@ // laptop2.c[5] = laptop2.magScale * 0.7944241839808487
eq_205 : laptop2.c[6]@M laptop2.magScale@ // laptop2.c[6] = laptop2.magScale * 0.7230242274654483
eq_206 : laptop2.c[7]@M laptop2.magScale@ // laptop2.c[7] = laptop2.magScale * 0.6688914048386135
eq_207 : led_driver.I_mag[1]@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.I_mag[1] = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_208 : led_driver.I_mag[2]@M led_driver.loadBase.i[2].re@ led_driver.loadBase.i[2].im@ // led_driver.I_mag[2] = (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5
eq_209 : led_driver.I_mag[3]@M led_driver.loadBase.i[3].re@ led_driver.loadBase.i[3].im@ // led_driver.I_mag[3] = (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5
eq_210 : led_driver.I_mag[4]@M led_driver.loadBase.i[4].re@ led_driver.loadBase.i[4].im@ // led_driver.I_mag[4] = (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5
eq_211 : led_driver.I_mag[5]@M led_driver.loadBase.i[5].re@ led_driver.loadBase.i[5].im@ // led_driver.I_mag[5] = (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5
eq_212 : led_driver.I_mag[6]@M led_driver.loadBase.i[6].re@ led_driver.loadBase.i[6].im@ // led_driver.I_mag[6] = (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5
eq_213 : led_driver.I_mag[7]@M led_driver.loadBase.i[7].re@ led_driver.loadBase.i[7].im@ // led_driver.I_mag[7] = (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5
eq_214 : led_driver.I_mag[8]@M led_driver.loadBase.i[8].re@ led_driver.loadBase.i[8].im@ // led_driver.I_mag[8] = (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5
eq_215 : led_driver.I_arg[1]@M led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@ // led_driver.I_arg[1] = Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)
eq_216 : led_driver.I_arg[2]@M led_driver.loadBase.i[2].im@ led_driver.loadBase.i[2].re@ // led_driver.I_arg[2] = Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)
eq_217 : led_driver.I_arg[3]@M led_driver.loadBase.i[3].im@ led_driver.loadBase.i[3].re@ // led_driver.I_arg[3] = Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)
eq_218 : led_driver.I_arg[4]@M led_driver.loadBase.i[4].im@ led_driver.loadBase.i[4].re@ // led_driver.I_arg[4] = Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)
eq_219 : led_driver.I_arg[5]@M led_driver.loadBase.i[5].im@ led_driver.loadBase.i[5].re@ // led_driver.I_arg[5] = Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)
eq_220 : led_driver.I_arg[6]@M led_driver.loadBase.i[6].im@ led_driver.loadBase.i[6].re@ // led_driver.I_arg[6] = Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)
eq_221 : led_driver.I_arg[7]@M led_driver.loadBase.i[7].im@ led_driver.loadBase.i[7].re@ // led_driver.I_arg[7] = Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)
eq_222 : led_driver.I_arg[8]@M led_driver.loadBase.i[8].im@ led_driver.loadBase.i[8].re@ // led_driver.I_arg[8] = Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)
eq_223 : led_driver.magScale@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.magScale = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_224 : led_driver.c[1]@M led_driver.magScale@ // led_driver.c[1] = led_driver.magScale * 0.890432111870432
eq_225 : led_driver.c[2]@M led_driver.magScale@ // led_driver.c[2] = led_driver.magScale * 0.7418107134668804
eq_226 : led_driver.c[3]@M led_driver.magScale@ // led_driver.c[3] = led_driver.magScale * 0.567293049298617
eq_227 : led_driver.c[4]@M led_driver.magScale@ // led_driver.c[4] = led_driver.magScale * 0.3936692199400683
eq_228 : led_driver.c[5]@M led_driver.magScale@ // led_driver.c[5] = led_driver.magScale * 0.2525656583874291
eq_229 : led_driver.c[6]@M led_driver.magScale@ // led_driver.c[6] = led_driver.magScale * 0.1565031895698116
eq_230 : led_driver.c[7]@M led_driver.magScale@ // led_driver.c[7] = led_driver.magScale * 0.1085784608235925

Starting automatic tearing
BiPGraph (2 equations, 2 variables)
Variables: {led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re }
eq_58 : led_driver.loadBase.i[1].re# led_driver.loadBase.i[1].im# // led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
eq_59 : led_driver.loadBase.i[1].im# led_driver.loadBase.i[1].re# // led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re

Initial matching
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_58 eq_59 }
Unmatched variables: {led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re }
----------------------------------------

Matching after initial manipulation
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_58 eq_59 }
Unmatched variables: {led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re }
----------------------------------------

Automatic tearing pair, equation: led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im), tearing with variable: led_driver.loadBase.i[1].im
Automatic tearing pair, equation: led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re, tearing with variable: led_driver.loadBase.i[1].re
Starting automatic tearing
BiPGraph (2 equations, 2 variables)
Variables: {laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re }
eq_40 : laptop2.loadBase.i[1].re# laptop2.loadBase.i[1].im# // laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
eq_41 : laptop2.loadBase.i[1].im# laptop2.loadBase.i[1].re# // laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re

Initial matching
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_40 eq_41 }
Unmatched variables: {laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re }
----------------------------------------

Matching after initial manipulation
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_40 eq_41 }
Unmatched variables: {laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re }
----------------------------------------

Automatic tearing pair, equation: laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im), tearing with variable: laptop2.loadBase.i[1].im
Automatic tearing pair, equation: laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re, tearing with variable: laptop2.loadBase.i[1].re
***********************************
*********** ODE section ***********
***********************************

--- Solved equation ---
der(PhA.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
der(PhB.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
der(PhC.theta) := 6.283185307179586 * systemDef.fFund

***********************************
*********** Real outputs **********
***********************************

***********************************
*** Integer and boolean outputs ***
***********************************

***********************************
********* Other variables *********
***********************************

--- Unsolved linear system (Block 1) of 2 variables ---
Coefficient variability: parameter
Unknown variables:
  led_driver.loadBase.i[1].im
  led_driver.loadBase.i[1].re

Equations:
  led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
    Iteration variables: led_driver.loadBase.i[1].im
  led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
    Iteration variables: led_driver.loadBase.i[1].re

Jacobian:
  |- led_driver.loadBase.v[1].im, - led_driver.loadBase.v[1].re|
  |led_driver.loadBase.v[1].re, - led_driver.loadBase.v[1].im|

--- Solved equation ---
test_DY.idealTransformer1.iPrim[1].re := led_driver.loadBase.i[1].re / (- test_DY.idealTransformer1.N)

--- Unsolved linear system (Block 2) of 2 variables ---
Coefficient variability: parameter
Unknown variables:
  laptop2.loadBase.i[1].im
  laptop2.loadBase.i[1].re

Equations:
  laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
    Iteration variables: laptop2.loadBase.i[1].im
  laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
    Iteration variables: laptop2.loadBase.i[1].re

Jacobian:
  |- laptop2.loadBase.v[1].im, - laptop2.loadBase.v[1].re|
  |laptop2.loadBase.v[1].re, - laptop2.loadBase.v[1].im|

--- Solved equation ---
test_DY.idealTransformer2.iPrim[1].re := laptop2.loadBase.i[1].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[1].re := - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer2.iPrim[1].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[1].im := led_driver.loadBase.i[1].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
test_DY.idealTransformer2.iPrim[1].im := laptop2.loadBase.i[1].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[1].im := - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer2.iPrim[1].im

--- Solved equation ---
led_driver.magScale := (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.c[1] := led_driver.magScale * 0.890432111870432

--- Solved equation ---
led_driver.loadBase.i[2].re := led_driver.c[1] * led_driver.a[1].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[2].re := led_driver.loadBase.i[2].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.magScale := (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.c[1] := laptop2.magScale * 0.9486974344201337

--- Solved equation ---
laptop2.loadBase.i[2].re := laptop2.c[1] * laptop2.a[1].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[2].re := laptop2.loadBase.i[2].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[2].re := - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer2.iPrim[2].re

--- Solved equation ---
led_driver.loadBase.i[2].im := led_driver.c[1] * led_driver.a[1].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[2].im := led_driver.loadBase.i[2].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.loadBase.i[2].im := laptop2.c[1] * laptop2.a[1].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[2].im := laptop2.loadBase.i[2].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[2].im := - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer2.iPrim[2].im

--- Solved equation ---
led_driver.c[2] := led_driver.magScale * 0.7418107134668804

--- Solved equation ---
led_driver.loadBase.i[3].re := led_driver.c[2] * led_driver.a[2].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[3].re := led_driver.loadBase.i[3].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.c[2] := laptop2.magScale * 0.9221155376813399

--- Solved equation ---
laptop2.loadBase.i[3].re := laptop2.c[2] * laptop2.a[2].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[3].re := laptop2.loadBase.i[3].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[3].re := - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer2.iPrim[3].re

--- Solved equation ---
led_driver.loadBase.i[3].im := led_driver.c[2] * led_driver.a[2].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[3].im := led_driver.loadBase.i[3].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.loadBase.i[3].im := laptop2.c[2] * laptop2.a[2].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[3].im := laptop2.loadBase.i[3].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[3].im := - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer2.iPrim[3].im

--- Solved equation ---
led_driver.c[3] := led_driver.magScale * 0.567293049298617

--- Solved equation ---
led_driver.loadBase.i[4].re := led_driver.c[3] * led_driver.a[3].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[4].re := led_driver.loadBase.i[4].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.c[3] := laptop2.magScale * 0.8849332521469448

--- Solved equation ---
laptop2.loadBase.i[4].re := laptop2.c[3] * laptop2.a[3].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[4].re := laptop2.loadBase.i[4].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[4].re := - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer2.iPrim[4].re

--- Solved equation ---
led_driver.loadBase.i[4].im := led_driver.c[3] * led_driver.a[3].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[4].im := led_driver.loadBase.i[4].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.loadBase.i[4].im := laptop2.c[3] * laptop2.a[3].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[4].im := laptop2.loadBase.i[4].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[4].im := - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer2.iPrim[4].im

--- Solved equation ---
led_driver.c[4] := led_driver.magScale * 0.3936692199400683

--- Solved equation ---
led_driver.loadBase.i[5].re := led_driver.c[4] * led_driver.a[4].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[5].re := led_driver.loadBase.i[5].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.c[4] := laptop2.magScale * 0.8475867045468796

--- Solved equation ---
laptop2.loadBase.i[5].re := laptop2.c[4] * laptop2.a[4].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[5].re := laptop2.loadBase.i[5].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[5].re := - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer2.iPrim[5].re

--- Solved equation ---
led_driver.loadBase.i[5].im := led_driver.c[4] * led_driver.a[4].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[5].im := led_driver.loadBase.i[5].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.loadBase.i[5].im := laptop2.c[4] * laptop2.a[4].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[5].im := laptop2.loadBase.i[5].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[5].im := - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer2.iPrim[5].im

--- Solved equation ---
led_driver.c[5] := led_driver.magScale * 0.2525656583874291

--- Solved equation ---
led_driver.loadBase.i[6].re := led_driver.c[5] * led_driver.a[5].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[6].re := led_driver.loadBase.i[6].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.c[5] := laptop2.magScale * 0.7944241839808487

--- Solved equation ---
laptop2.loadBase.i[6].re := laptop2.c[5] * laptop2.a[5].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[6].re := laptop2.loadBase.i[6].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[6].re := - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer2.iPrim[6].re

--- Solved equation ---
led_driver.loadBase.i[6].im := led_driver.c[5] * led_driver.a[5].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[6].im := led_driver.loadBase.i[6].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.loadBase.i[6].im := laptop2.c[5] * laptop2.a[5].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[6].im := laptop2.loadBase.i[6].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[6].im := - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer2.iPrim[6].im

--- Solved equation ---
led_driver.c[6] := led_driver.magScale * 0.1565031895698116

--- Solved equation ---
led_driver.loadBase.i[7].re := led_driver.c[6] * led_driver.a[6].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[7].re := led_driver.loadBase.i[7].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.c[6] := laptop2.magScale * 0.7230242274654483

--- Solved equation ---
laptop2.loadBase.i[7].re := laptop2.c[6] * laptop2.a[6].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[7].re := laptop2.loadBase.i[7].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[7].re := - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer2.iPrim[7].re

--- Solved equation ---
led_driver.loadBase.i[7].im := led_driver.c[6] * led_driver.a[6].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[7].im := led_driver.loadBase.i[7].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.loadBase.i[7].im := laptop2.c[6] * laptop2.a[6].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[7].im := laptop2.loadBase.i[7].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[7].im := - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer2.iPrim[7].im

--- Solved equation ---
led_driver.c[7] := led_driver.magScale * 0.1085784608235925

--- Solved equation ---
led_driver.loadBase.i[8].re := led_driver.c[7] * led_driver.a[7].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[8].re := led_driver.loadBase.i[8].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.c[7] := laptop2.magScale * 0.6688914048386135

--- Solved equation ---
laptop2.loadBase.i[8].re := laptop2.c[7] * laptop2.a[7].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[8].re := laptop2.loadBase.i[8].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[8].re := - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer2.iPrim[8].re

--- Solved equation ---
led_driver.loadBase.i[8].im := led_driver.c[7] * led_driver.a[7].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[8].im := led_driver.loadBase.i[8].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
laptop2.loadBase.i[8].im := laptop2.c[7] * laptop2.a[7].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[8].im := laptop2.loadBase.i[8].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
PhA.i[8].im := - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer2.iPrim[8].im

--- Solved equation ---
PhA.omega := der(PhA.theta)

--- Solved equation ---
PhB.i[1].re := - test_DY.idealTransformer2.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re

--- Solved equation ---
PhB.i[1].im := - test_DY.idealTransformer2.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im

--- Solved equation ---
PhB.i[2].re := - test_DY.idealTransformer2.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re

--- Solved equation ---
PhB.i[2].im := - test_DY.idealTransformer2.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im

--- Solved equation ---
PhB.i[3].re := - test_DY.idealTransformer2.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re

--- Solved equation ---
PhB.i[3].im := - test_DY.idealTransformer2.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im

--- Solved equation ---
PhB.i[4].re := - test_DY.idealTransformer2.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re

--- Solved equation ---
PhB.i[4].im := - test_DY.idealTransformer2.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im

--- Solved equation ---
PhB.i[5].re := - test_DY.idealTransformer2.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re

--- Solved equation ---
PhB.i[5].im := - test_DY.idealTransformer2.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im

--- Solved equation ---
PhB.i[6].re := - test_DY.idealTransformer2.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re

--- Solved equation ---
PhB.i[6].im := - test_DY.idealTransformer2.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im

--- Solved equation ---
PhB.i[7].re := - test_DY.idealTransformer2.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re

--- Solved equation ---
PhB.i[7].im := - test_DY.idealTransformer2.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im

--- Solved equation ---
PhB.i[8].re := - test_DY.idealTransformer2.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re

--- Solved equation ---
PhB.i[8].im := - test_DY.idealTransformer2.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im

--- Solved equation ---
PhB.omega := der(PhB.theta)

--- Solved equation ---
PhC.i[1].re := test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re)

--- Solved equation ---
PhC.i[1].im := test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im)

--- Solved equation ---
PhC.i[2].re := test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re)

--- Solved equation ---
PhC.i[2].im := test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im)

--- Solved equation ---
PhC.i[3].re := test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re)

--- Solved equation ---
PhC.i[3].im := test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im)

--- Solved equation ---
PhC.i[4].re := test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re)

--- Solved equation ---
PhC.i[4].im := test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im)

--- Solved equation ---
PhC.i[5].re := test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re)

--- Solved equation ---
PhC.i[5].im := test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im)

--- Solved equation ---
PhC.i[6].re := test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re)

--- Solved equation ---
PhC.i[6].im := test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im)

--- Solved equation ---
PhC.i[7].re := test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re)

--- Solved equation ---
PhC.i[7].im := test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im)

--- Solved equation ---
PhC.i[8].re := test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re)

--- Solved equation ---
PhC.i[8].im := test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im)

--- Solved equation ---
PhC.omega := der(PhC.theta)

--- Solved equation ---
ground1.pin.iIm[1] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[1] := - ground1.pin.iIm[1] + laptop2.loadBase.i[1].im + led_driver.loadBase.i[1].im + r.i[1].im

--- Solved equation ---
ground1.pin.iIm[2] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[2] := - ground1.pin.iIm[2] + laptop2.loadBase.i[2].im + led_driver.loadBase.i[2].im + r.i[2].im

--- Solved equation ---
ground1.pin.iIm[3] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[3] := - ground1.pin.iIm[3] + laptop2.loadBase.i[3].im + led_driver.loadBase.i[3].im + r.i[3].im

--- Solved equation ---
ground1.pin.iIm[4] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[4] := - ground1.pin.iIm[4] + laptop2.loadBase.i[4].im + led_driver.loadBase.i[4].im + r.i[4].im

--- Solved equation ---
ground1.pin.iIm[5] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[5] := - ground1.pin.iIm[5] + laptop2.loadBase.i[5].im + led_driver.loadBase.i[5].im + r.i[5].im

--- Solved equation ---
ground1.pin.iIm[6] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[6] := - ground1.pin.iIm[6] + laptop2.loadBase.i[6].im + led_driver.loadBase.i[6].im + r.i[6].im

--- Solved equation ---
ground1.pin.iIm[7] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[7] := - ground1.pin.iIm[7] + laptop2.loadBase.i[7].im + led_driver.loadBase.i[7].im + r.i[7].im

--- Solved equation ---
ground1.pin.iIm[8] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[8] := - ground1.pin.iIm[8] + laptop2.loadBase.i[8].im + led_driver.loadBase.i[8].im + r.i[8].im

--- Solved equation ---
ground1.pin.iRe[1] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[1] := - ground1.pin.iRe[1] + laptop2.loadBase.i[1].re + led_driver.loadBase.i[1].re + r.i[1].re

--- Solved equation ---
ground1.pin.iRe[2] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[2] := - ground1.pin.iRe[2] + laptop2.loadBase.i[2].re + led_driver.loadBase.i[2].re + r.i[2].re

--- Solved equation ---
ground1.pin.iRe[3] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[3] := - ground1.pin.iRe[3] + laptop2.loadBase.i[3].re + led_driver.loadBase.i[3].re + r.i[3].re

--- Solved equation ---
ground1.pin.iRe[4] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[4] := - ground1.pin.iRe[4] + laptop2.loadBase.i[4].re + led_driver.loadBase.i[4].re + r.i[4].re

--- Solved equation ---
ground1.pin.iRe[5] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[5] := - ground1.pin.iRe[5] + laptop2.loadBase.i[5].re + led_driver.loadBase.i[5].re + r.i[5].re

--- Solved equation ---
ground1.pin.iRe[6] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[6] := - ground1.pin.iRe[6] + laptop2.loadBase.i[6].re + led_driver.loadBase.i[6].re + r.i[6].re

--- Solved equation ---
ground1.pin.iRe[7] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[7] := - ground1.pin.iRe[7] + laptop2.loadBase.i[7].re + led_driver.loadBase.i[7].re + r.i[7].re

--- Solved equation ---
ground1.pin.iRe[8] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[8] := - ground1.pin.iRe[8] + laptop2.loadBase.i[8].re + led_driver.loadBase.i[8].re + r.i[8].re

--- Solved equation ---
ground.pin.iIm[1] := PhA.i[1].im + PhB.i[1].im + PhC.i[1].im

--- Solved equation ---
ground.pin.iIm[2] := PhA.i[2].im + PhB.i[2].im + PhC.i[2].im

--- Solved equation ---
ground.pin.iIm[3] := PhA.i[3].im + PhB.i[3].im + PhC.i[3].im

--- Solved equation ---
ground.pin.iIm[4] := PhA.i[4].im + PhB.i[4].im + PhC.i[4].im

--- Solved equation ---
ground.pin.iIm[5] := PhA.i[5].im + PhB.i[5].im + PhC.i[5].im

--- Solved equation ---
ground.pin.iIm[6] := PhA.i[6].im + PhB.i[6].im + PhC.i[6].im

--- Solved equation ---
ground.pin.iIm[7] := PhA.i[7].im + PhB.i[7].im + PhC.i[7].im

--- Solved equation ---
ground.pin.iIm[8] := PhA.i[8].im + PhB.i[8].im + PhC.i[8].im

--- Solved equation ---
ground.pin.iRe[1] := PhA.i[1].re + PhB.i[1].re + PhC.i[1].re

--- Solved equation ---
ground.pin.iRe[2] := PhA.i[2].re + PhB.i[2].re + PhC.i[2].re

--- Solved equation ---
ground.pin.iRe[3] := PhA.i[3].re + PhB.i[3].re + PhC.i[3].re

--- Solved equation ---
ground.pin.iRe[4] := PhA.i[4].re + PhB.i[4].re + PhC.i[4].re

--- Solved equation ---
ground.pin.iRe[5] := PhA.i[5].re + PhB.i[5].re + PhC.i[5].re

--- Solved equation ---
ground.pin.iRe[6] := PhA.i[6].re + PhB.i[6].re + PhC.i[6].re

--- Solved equation ---
ground.pin.iRe[7] := PhA.i[7].re + PhB.i[7].re + PhC.i[7].re

--- Solved equation ---
ground.pin.iRe[8] := PhA.i[8].re + PhB.i[8].re + PhC.i[8].re

--- Solved equation ---
laptop2.loadBase.omega := der(PhA.theta)

--- Solved equation ---
laptop2.I_mag[1] := (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[2] := (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[3] := (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[4] := (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[5] := (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[6] := (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[7] := (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[8] := (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_arg[1] := Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)

--- Solved equation ---
laptop2.I_arg[2] := Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)

--- Solved equation ---
laptop2.I_arg[3] := Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)

--- Solved equation ---
laptop2.I_arg[4] := Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)

--- Solved equation ---
laptop2.I_arg[5] := Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)

--- Solved equation ---
laptop2.I_arg[6] := Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)

--- Solved equation ---
laptop2.I_arg[7] := Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)

--- Solved equation ---
laptop2.I_arg[8] := Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)

--- Solved equation ---
led_driver.loadBase.omega := der(PhA.theta)

--- Solved equation ---
led_driver.I_mag[1] := (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[2] := (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[3] := (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[4] := (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[5] := (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[6] := (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[7] := (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[8] := (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_arg[1] := Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)

--- Solved equation ---
led_driver.I_arg[2] := Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)

--- Solved equation ---
led_driver.I_arg[3] := Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)

--- Solved equation ---
led_driver.I_arg[4] := Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)

--- Solved equation ---
led_driver.I_arg[5] := Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)

--- Solved equation ---
led_driver.I_arg[6] := Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)

--- Solved equation ---
led_driver.I_arg[7] := Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)

--- Solved equation ---
led_driver.I_arg[8] := Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)

--- Solved equation ---
r.omega := der(PhA.theta)

--- Meta equation block ---
algorithm


--- Meta equation block ---
algorithm


--- Meta equation block ---
algorithm


--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

***********************************

--- Meta equation block ---
algorithm


--- Solved equation ---
der(PhA.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
PhA.omega := der(PhA.theta)

--- Solved equation ---
der(PhB.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
PhB.omega := der(PhB.theta)

--- Solved equation ---
der(PhC.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
PhC.omega := der(PhC.theta)

--- Unsolved linear system (Block 1) of 2 variables ---
Coefficient variability: parameter
Unknown variables:
  led_driver.loadBase.i[1].im
  led_driver.loadBase.i[1].re

Equations:
  led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
    Iteration variables: led_driver.loadBase.i[1].im
  led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
    Iteration variables: led_driver.loadBase.i[1].re

Jacobian:
  |- led_driver.loadBase.v[1].im, - led_driver.loadBase.v[1].re|
  |led_driver.loadBase.v[1].re, - led_driver.loadBase.v[1].im|

--- Solved equation ---
test_DY.idealTransformer1.iPrim[1].re := led_driver.loadBase.i[1].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
test_DY.idealTransformer1.iPrim[1].im := led_driver.loadBase.i[1].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.magScale := (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.c[1] := led_driver.magScale * 0.890432111870432

--- Solved equation ---
led_driver.loadBase.i[2].re := led_driver.c[1] * led_driver.a[1].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[2].re := led_driver.loadBase.i[2].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[2].im := led_driver.c[1] * led_driver.a[1].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[2].im := led_driver.loadBase.i[2].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[2] := led_driver.magScale * 0.7418107134668804

--- Solved equation ---
led_driver.loadBase.i[3].re := led_driver.c[2] * led_driver.a[2].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[3].re := led_driver.loadBase.i[3].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[3].im := led_driver.c[2] * led_driver.a[2].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[3].im := led_driver.loadBase.i[3].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[3] := led_driver.magScale * 0.567293049298617

--- Solved equation ---
led_driver.loadBase.i[4].re := led_driver.c[3] * led_driver.a[3].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[4].re := led_driver.loadBase.i[4].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[4].im := led_driver.c[3] * led_driver.a[3].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[4].im := led_driver.loadBase.i[4].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[4] := led_driver.magScale * 0.3936692199400683

--- Solved equation ---
led_driver.loadBase.i[5].re := led_driver.c[4] * led_driver.a[4].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[5].re := led_driver.loadBase.i[5].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[5].im := led_driver.c[4] * led_driver.a[4].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[5].im := led_driver.loadBase.i[5].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[5] := led_driver.magScale * 0.2525656583874291

--- Solved equation ---
led_driver.loadBase.i[6].re := led_driver.c[5] * led_driver.a[5].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[6].re := led_driver.loadBase.i[6].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[6].im := led_driver.c[5] * led_driver.a[5].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[6].im := led_driver.loadBase.i[6].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[6] := led_driver.magScale * 0.1565031895698116

--- Solved equation ---
led_driver.loadBase.i[7].re := led_driver.c[6] * led_driver.a[6].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[7].re := led_driver.loadBase.i[7].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[7].im := led_driver.c[6] * led_driver.a[6].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[7].im := led_driver.loadBase.i[7].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[7] := led_driver.magScale * 0.1085784608235925

--- Solved equation ---
led_driver.loadBase.i[8].re := led_driver.c[7] * led_driver.a[7].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[8].re := led_driver.loadBase.i[8].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[8].im := led_driver.c[7] * led_driver.a[7].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[8].im := led_driver.loadBase.i[8].im / (- test_DY.idealTransformer1.N)

--- Unsolved linear system (Block 2) of 2 variables ---
Coefficient variability: parameter
Unknown variables:
  laptop2.loadBase.i[1].im
  laptop2.loadBase.i[1].re

Equations:
  laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
    Iteration variables: laptop2.loadBase.i[1].im
  laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
    Iteration variables: laptop2.loadBase.i[1].re

Jacobian:
  |- laptop2.loadBase.v[1].im, - laptop2.loadBase.v[1].re|
  |laptop2.loadBase.v[1].re, - laptop2.loadBase.v[1].im|

--- Solved equation ---
test_DY.idealTransformer2.iPrim[1].re := laptop2.loadBase.i[1].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
test_DY.idealTransformer2.iPrim[1].im := laptop2.loadBase.i[1].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.magScale := (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.c[1] := laptop2.magScale * 0.9486974344201337

--- Solved equation ---
laptop2.loadBase.i[2].re := laptop2.c[1] * laptop2.a[1].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[2].re := laptop2.loadBase.i[2].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[2].im := laptop2.c[1] * laptop2.a[1].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[2].im := laptop2.loadBase.i[2].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[2] := laptop2.magScale * 0.9221155376813399

--- Solved equation ---
laptop2.loadBase.i[3].re := laptop2.c[2] * laptop2.a[2].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[3].re := laptop2.loadBase.i[3].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[3].im := laptop2.c[2] * laptop2.a[2].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[3].im := laptop2.loadBase.i[3].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[3] := laptop2.magScale * 0.8849332521469448

--- Solved equation ---
laptop2.loadBase.i[4].re := laptop2.c[3] * laptop2.a[3].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[4].re := laptop2.loadBase.i[4].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[4].im := laptop2.c[3] * laptop2.a[3].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[4].im := laptop2.loadBase.i[4].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[4] := laptop2.magScale * 0.8475867045468796

--- Solved equation ---
laptop2.loadBase.i[5].re := laptop2.c[4] * laptop2.a[4].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[5].re := laptop2.loadBase.i[5].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[5].im := laptop2.c[4] * laptop2.a[4].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[5].im := laptop2.loadBase.i[5].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[5] := laptop2.magScale * 0.7944241839808487

--- Solved equation ---
laptop2.loadBase.i[6].re := laptop2.c[5] * laptop2.a[5].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[6].re := laptop2.loadBase.i[6].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[6].im := laptop2.c[5] * laptop2.a[5].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[6].im := laptop2.loadBase.i[6].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[6] := laptop2.magScale * 0.7230242274654483

--- Solved equation ---
laptop2.loadBase.i[7].re := laptop2.c[6] * laptop2.a[6].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[7].re := laptop2.loadBase.i[7].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[7].im := laptop2.c[6] * laptop2.a[6].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[7].im := laptop2.loadBase.i[7].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[7] := laptop2.magScale * 0.6688914048386135

--- Solved equation ---
laptop2.loadBase.i[8].re := laptop2.c[7] * laptop2.a[7].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[8].re := laptop2.loadBase.i[8].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[8].im := laptop2.c[7] * laptop2.a[7].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[8].im := laptop2.loadBase.i[8].im / (- test_DY.idealTransformer2.N)

--- Meta equation block ---
algorithm


--- Solved equation ---
laptop2.loadBase.omega := der(PhA.theta)

--- Meta equation block ---
algorithm


--- Solved equation ---
led_driver.loadBase.omega := der(PhA.theta)

--- Solved equation ---
r.omega := der(PhA.theta)

--- Solved equation ---
PhA.i[1].im := - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer2.iPrim[1].im

--- Solved equation ---
PhB.i[1].im := - test_DY.idealTransformer2.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im

--- Solved equation ---
PhC.i[1].im := test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im)

--- Solved equation ---
ground.pin.iIm[1] := PhA.i[1].im + PhB.i[1].im + PhC.i[1].im

--- Solved equation ---
PhA.i[2].im := - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer2.iPrim[2].im

--- Solved equation ---
PhB.i[2].im := - test_DY.idealTransformer2.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im

--- Solved equation ---
PhC.i[2].im := test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im)

--- Solved equation ---
ground.pin.iIm[2] := PhA.i[2].im + PhB.i[2].im + PhC.i[2].im

--- Solved equation ---
PhA.i[3].im := - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer2.iPrim[3].im

--- Solved equation ---
PhB.i[3].im := - test_DY.idealTransformer2.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im

--- Solved equation ---
PhC.i[3].im := test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im)

--- Solved equation ---
ground.pin.iIm[3] := PhA.i[3].im + PhB.i[3].im + PhC.i[3].im

--- Solved equation ---
PhA.i[4].im := - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer2.iPrim[4].im

--- Solved equation ---
PhB.i[4].im := - test_DY.idealTransformer2.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im

--- Solved equation ---
PhC.i[4].im := test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im)

--- Solved equation ---
ground.pin.iIm[4] := PhA.i[4].im + PhB.i[4].im + PhC.i[4].im

--- Solved equation ---
PhA.i[5].im := - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer2.iPrim[5].im

--- Solved equation ---
PhB.i[5].im := - test_DY.idealTransformer2.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im

--- Solved equation ---
PhC.i[5].im := test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im)

--- Solved equation ---
ground.pin.iIm[5] := PhA.i[5].im + PhB.i[5].im + PhC.i[5].im

--- Solved equation ---
PhA.i[6].im := - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer2.iPrim[6].im

--- Solved equation ---
PhB.i[6].im := - test_DY.idealTransformer2.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im

--- Solved equation ---
PhC.i[6].im := test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im)

--- Solved equation ---
ground.pin.iIm[6] := PhA.i[6].im + PhB.i[6].im + PhC.i[6].im

--- Solved equation ---
PhA.i[7].im := - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer2.iPrim[7].im

--- Solved equation ---
PhB.i[7].im := - test_DY.idealTransformer2.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im

--- Solved equation ---
PhC.i[7].im := test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im)

--- Solved equation ---
ground.pin.iIm[7] := PhA.i[7].im + PhB.i[7].im + PhC.i[7].im

--- Solved equation ---
PhA.i[8].im := - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer2.iPrim[8].im

--- Solved equation ---
PhB.i[8].im := - test_DY.idealTransformer2.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im

--- Solved equation ---
PhC.i[8].im := test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im)

--- Solved equation ---
ground.pin.iIm[8] := PhA.i[8].im + PhB.i[8].im + PhC.i[8].im

--- Solved equation ---
PhA.i[1].re := - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer2.iPrim[1].re

--- Solved equation ---
PhB.i[1].re := - test_DY.idealTransformer2.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re

--- Solved equation ---
PhC.i[1].re := test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re)

--- Solved equation ---
ground.pin.iRe[1] := PhA.i[1].re + PhB.i[1].re + PhC.i[1].re

--- Solved equation ---
PhA.i[2].re := - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer2.iPrim[2].re

--- Solved equation ---
PhB.i[2].re := - test_DY.idealTransformer2.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re

--- Solved equation ---
PhC.i[2].re := test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re)

--- Solved equation ---
ground.pin.iRe[2] := PhA.i[2].re + PhB.i[2].re + PhC.i[2].re

--- Solved equation ---
PhA.i[3].re := - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer2.iPrim[3].re

--- Solved equation ---
PhB.i[3].re := - test_DY.idealTransformer2.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re

--- Solved equation ---
PhC.i[3].re := test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re)

--- Solved equation ---
ground.pin.iRe[3] := PhA.i[3].re + PhB.i[3].re + PhC.i[3].re

--- Solved equation ---
PhA.i[4].re := - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer2.iPrim[4].re

--- Solved equation ---
PhB.i[4].re := - test_DY.idealTransformer2.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re

--- Solved equation ---
PhC.i[4].re := test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re)

--- Solved equation ---
ground.pin.iRe[4] := PhA.i[4].re + PhB.i[4].re + PhC.i[4].re

--- Solved equation ---
PhA.i[5].re := - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer2.iPrim[5].re

--- Solved equation ---
PhB.i[5].re := - test_DY.idealTransformer2.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re

--- Solved equation ---
PhC.i[5].re := test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re)

--- Solved equation ---
ground.pin.iRe[5] := PhA.i[5].re + PhB.i[5].re + PhC.i[5].re

--- Solved equation ---
PhA.i[6].re := - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer2.iPrim[6].re

--- Solved equation ---
PhB.i[6].re := - test_DY.idealTransformer2.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re

--- Solved equation ---
PhC.i[6].re := test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re)

--- Solved equation ---
ground.pin.iRe[6] := PhA.i[6].re + PhB.i[6].re + PhC.i[6].re

--- Solved equation ---
PhA.i[7].re := - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer2.iPrim[7].re

--- Solved equation ---
PhB.i[7].re := - test_DY.idealTransformer2.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re

--- Solved equation ---
PhC.i[7].re := test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re)

--- Solved equation ---
ground.pin.iRe[7] := PhA.i[7].re + PhB.i[7].re + PhC.i[7].re

--- Solved equation ---
PhA.i[8].re := - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer2.iPrim[8].re

--- Solved equation ---
PhB.i[8].re := - test_DY.idealTransformer2.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re

--- Solved equation ---
PhC.i[8].re := test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re)

--- Solved equation ---
ground.pin.iRe[8] := PhA.i[8].re + PhB.i[8].re + PhC.i[8].re

--- Solved equation ---
ground1.pin.iIm[1] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[1] := - ground1.pin.iIm[1] + laptop2.loadBase.i[1].im + led_driver.loadBase.i[1].im + r.i[1].im

--- Solved equation ---
ground1.pin.iIm[2] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[2] := - ground1.pin.iIm[2] + laptop2.loadBase.i[2].im + led_driver.loadBase.i[2].im + r.i[2].im

--- Solved equation ---
ground1.pin.iIm[3] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[3] := - ground1.pin.iIm[3] + laptop2.loadBase.i[3].im + led_driver.loadBase.i[3].im + r.i[3].im

--- Solved equation ---
ground1.pin.iIm[4] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[4] := - ground1.pin.iIm[4] + laptop2.loadBase.i[4].im + led_driver.loadBase.i[4].im + r.i[4].im

--- Solved equation ---
ground1.pin.iIm[5] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[5] := - ground1.pin.iIm[5] + laptop2.loadBase.i[5].im + led_driver.loadBase.i[5].im + r.i[5].im

--- Solved equation ---
ground1.pin.iIm[6] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[6] := - ground1.pin.iIm[6] + laptop2.loadBase.i[6].im + led_driver.loadBase.i[6].im + r.i[6].im

--- Solved equation ---
ground1.pin.iIm[7] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[7] := - ground1.pin.iIm[7] + laptop2.loadBase.i[7].im + led_driver.loadBase.i[7].im + r.i[7].im

--- Solved equation ---
ground1.pin.iIm[8] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[8] := - ground1.pin.iIm[8] + laptop2.loadBase.i[8].im + led_driver.loadBase.i[8].im + r.i[8].im

--- Solved equation ---
ground1.pin.iRe[1] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[1] := - ground1.pin.iRe[1] + laptop2.loadBase.i[1].re + led_driver.loadBase.i[1].re + r.i[1].re

--- Solved equation ---
ground1.pin.iRe[2] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[2] := - ground1.pin.iRe[2] + laptop2.loadBase.i[2].re + led_driver.loadBase.i[2].re + r.i[2].re

--- Solved equation ---
ground1.pin.iRe[3] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[3] := - ground1.pin.iRe[3] + laptop2.loadBase.i[3].re + led_driver.loadBase.i[3].re + r.i[3].re

--- Solved equation ---
ground1.pin.iRe[4] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[4] := - ground1.pin.iRe[4] + laptop2.loadBase.i[4].re + led_driver.loadBase.i[4].re + r.i[4].re

--- Solved equation ---
ground1.pin.iRe[5] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[5] := - ground1.pin.iRe[5] + laptop2.loadBase.i[5].re + led_driver.loadBase.i[5].re + r.i[5].re

--- Solved equation ---
ground1.pin.iRe[6] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[6] := - ground1.pin.iRe[6] + laptop2.loadBase.i[6].re + led_driver.loadBase.i[6].re + r.i[6].re

--- Solved equation ---
ground1.pin.iRe[7] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[7] := - ground1.pin.iRe[7] + laptop2.loadBase.i[7].re + led_driver.loadBase.i[7].re + r.i[7].re

--- Solved equation ---
ground1.pin.iRe[8] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[8] := - ground1.pin.iRe[8] + laptop2.loadBase.i[8].re + led_driver.loadBase.i[8].re + r.i[8].re

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Solved equation ---
laptop2.I_mag[1] := (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[2] := (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[3] := (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[4] := (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[5] := (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[6] := (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[7] := (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[8] := (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_arg[1] := Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)

--- Solved equation ---
laptop2.I_arg[2] := Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)

--- Solved equation ---
laptop2.I_arg[3] := Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)

--- Solved equation ---
laptop2.I_arg[4] := Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)

--- Solved equation ---
laptop2.I_arg[5] := Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)

--- Solved equation ---
laptop2.I_arg[6] := Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)

--- Solved equation ---
laptop2.I_arg[7] := Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)

--- Solved equation ---
laptop2.I_arg[8] := Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)

--- Solved equation ---
led_driver.I_mag[1] := (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[2] := (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[3] := (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[4] := (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[5] := (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[6] := (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[7] := (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[8] := (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_arg[1] := Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)

--- Solved equation ---
led_driver.I_arg[2] := Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)

--- Solved equation ---
led_driver.I_arg[3] := Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)

--- Solved equation ---
led_driver.I_arg[4] := Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)

--- Solved equation ---
led_driver.I_arg[5] := Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)

--- Solved equation ---
led_driver.I_arg[6] := Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)

--- Solved equation ---
led_driver.I_arg[7] := Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)

--- Solved equation ---
led_driver.I_arg[8] := Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)
-------------------------------

BiPGraph (230 equations, 220 variables)
Variables: {der(PhA.theta) der(PhB.theta) der(PhC.theta) PhA.i[1].re PhA.i[1].im PhA.i[2].re PhA.i[2].im PhA.i[3].re PhA.i[3].im PhA.i[4].re PhA.i[4].im PhA.i[5].re PhA.i[5].im PhA.i[6].re PhA.i[6].im PhA.i[7].re PhA.i[7].im PhA.i[8].re PhA.i[8].im PhA.omega PhB.i[1].re PhB.i[1].im PhB.i[2].re PhB.i[2].im PhB.i[3].re PhB.i[3].im PhB.i[4].re PhB.i[4].im PhB.i[5].re PhB.i[5].im PhB.i[6].re PhB.i[6].im PhB.i[7].re PhB.i[7].im PhB.i[8].re PhB.i[8].im PhB.omega PhC.i[1].re PhC.i[1].im PhC.i[2].re PhC.i[2].im PhC.i[3].re PhC.i[3].im PhC.i[4].re PhC.i[4].im PhC.i[5].re PhC.i[5].im PhC.i[6].re PhC.i[6].im PhC.i[7].re PhC.i[7].im PhC.i[8].re PhC.i[8].im PhC.omega test_DY.idealTransformer1.iPrim[1].re test_DY.idealTransformer1.iPrim[1].im test_DY.idealTransformer1.iPrim[2].re test_DY.idealTransformer1.iPrim[2].im test_DY.idealTransformer1.iPrim[3].re test_DY.idealTransformer1.iPrim[3].im test_DY.idealTransformer1.iPrim[4].re test_DY.idealTransformer1.iPrim[4].im test_DY.idealTransformer1.iPrim[5].re test_DY.idealTransformer1.iPrim[5].im test_DY.idealTransformer1.iPrim[6].re test_DY.idealTransformer1.iPrim[6].im test_DY.idealTransformer1.iPrim[7].re test_DY.idealTransformer1.iPrim[7].im test_DY.idealTransformer1.iPrim[8].re test_DY.idealTransformer1.iPrim[8].im test_DY.idealTransformer2.iPrim[1].re test_DY.idealTransformer2.iPrim[1].im test_DY.idealTransformer2.iPrim[2].re test_DY.idealTransformer2.iPrim[2].im test_DY.idealTransformer2.iPrim[3].re test_DY.idealTransformer2.iPrim[3].im test_DY.idealTransformer2.iPrim[4].re test_DY.idealTransformer2.iPrim[4].im test_DY.idealTransformer2.iPrim[5].re test_DY.idealTransformer2.iPrim[5].im test_DY.idealTransformer2.iPrim[6].re test_DY.idealTransformer2.iPrim[6].im test_DY.idealTransformer2.iPrim[7].re test_DY.idealTransformer2.iPrim[7].im test_DY.idealTransformer2.iPrim[8].re test_DY.idealTransformer2.iPrim[8].im test_DY.hPin_N.iIm[1] test_DY.hPin_N.iIm[2] test_DY.hPin_N.iIm[3] test_DY.hPin_N.iIm[4] test_DY.hPin_N.iIm[5] test_DY.hPin_N.iIm[6] test_DY.hPin_N.iIm[7] test_DY.hPin_N.iIm[8] test_DY.hPin_N.iRe[1] test_DY.hPin_N.iRe[2] test_DY.hPin_N.iRe[3] test_DY.hPin_N.iRe[4] test_DY.hPin_N.iRe[5] test_DY.hPin_N.iRe[6] test_DY.hPin_N.iRe[7] test_DY.hPin_N.iRe[8] ground.pin.iIm[1] ground.pin.iIm[2] ground.pin.iIm[3] ground.pin.iIm[4] ground.pin.iIm[5] ground.pin.iIm[6] ground.pin.iIm[7] ground.pin.iIm[8] ground.pin.iRe[1] ground.pin.iRe[2] ground.pin.iRe[3] ground.pin.iRe[4] ground.pin.iRe[5] ground.pin.iRe[6] ground.pin.iRe[7] ground.pin.iRe[8] laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im laptop2.loadBase.i[2].re laptop2.loadBase.i[2].im laptop2.loadBase.i[3].re laptop2.loadBase.i[3].im laptop2.loadBase.i[4].re laptop2.loadBase.i[4].im laptop2.loadBase.i[5].re laptop2.loadBase.i[5].im laptop2.loadBase.i[6].re laptop2.loadBase.i[6].im laptop2.loadBase.i[7].re laptop2.loadBase.i[7].im laptop2.loadBase.i[8].re laptop2.loadBase.i[8].im laptop2.loadBase.omega laptop2.I_mag[1] laptop2.I_mag[2] laptop2.I_mag[3] laptop2.I_mag[4] laptop2.I_mag[5] laptop2.I_mag[6] laptop2.I_mag[7] laptop2.I_mag[8] laptop2.I_arg[1] laptop2.I_arg[2] laptop2.I_arg[3] laptop2.I_arg[4] laptop2.I_arg[5] laptop2.I_arg[6] laptop2.I_arg[7] laptop2.I_arg[8] laptop2.magScale laptop2.c[1] laptop2.c[2] laptop2.c[3] laptop2.c[4] laptop2.c[5] laptop2.c[6] laptop2.c[7] led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im led_driver.loadBase.i[2].re led_driver.loadBase.i[2].im led_driver.loadBase.i[3].re led_driver.loadBase.i[3].im led_driver.loadBase.i[4].re led_driver.loadBase.i[4].im led_driver.loadBase.i[5].re led_driver.loadBase.i[5].im led_driver.loadBase.i[6].re led_driver.loadBase.i[6].im led_driver.loadBase.i[7].re led_driver.loadBase.i[7].im led_driver.loadBase.i[8].re led_driver.loadBase.i[8].im led_driver.loadBase.omega led_driver.I_mag[1] led_driver.I_mag[2] led_driver.I_mag[3] led_driver.I_mag[4] led_driver.I_mag[5] led_driver.I_mag[6] led_driver.I_mag[7] led_driver.I_mag[8] led_driver.I_arg[1] led_driver.I_arg[2] led_driver.I_arg[3] led_driver.I_arg[4] led_driver.I_arg[5] led_driver.I_arg[6] led_driver.I_arg[7] led_driver.I_arg[8] led_driver.magScale led_driver.c[1] led_driver.c[2] led_driver.c[3] led_driver.c[4] led_driver.c[5] led_driver.c[6] led_driver.c[7] ground1.pin.iIm[1] ground1.pin.iIm[2] ground1.pin.iIm[3] ground1.pin.iIm[4] ground1.pin.iIm[5] ground1.pin.iIm[6] ground1.pin.iIm[7] ground1.pin.iIm[8] ground1.pin.iRe[1] ground1.pin.iRe[2] ground1.pin.iRe[3] ground1.pin.iRe[4] ground1.pin.iRe[5] ground1.pin.iRe[6] ground1.pin.iRe[7] ground1.pin.iRe[8] r.omega PhA.theta PhB.theta PhC.theta }
eq_1 : // algorithm

eq_2 : der(PhA.theta)@M // der(PhA.theta) = 6.283185307179586 * systemDef.fFund
eq_3 : PhA.omega@M der(PhA.theta)@ // PhA.omega = der(PhA.theta)
eq_4 : der(PhB.theta)@M // der(PhB.theta) = 6.283185307179586 * systemDef.fFund
eq_5 : PhB.omega@M der(PhB.theta)@ // PhB.omega = der(PhB.theta)
eq_6 : der(PhC.theta)@M // der(PhC.theta) = 6.283185307179586 * systemDef.fFund
eq_7 : PhC.omega@M der(PhC.theta)@ // PhC.omega = der(PhC.theta)
eq_8 : led_driver.loadBase.i[1].re@ test_DY.idealTransformer1.iPrim[1].re@M // - led_driver.loadBase.i[1].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].re
eq_9 : led_driver.loadBase.i[1].im@ test_DY.idealTransformer1.iPrim[1].im@M // - led_driver.loadBase.i[1].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].im
eq_10 : led_driver.loadBase.i[2].re@ test_DY.idealTransformer1.iPrim[2].re@M // - led_driver.loadBase.i[2].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].re
eq_11 : led_driver.loadBase.i[2].im@ test_DY.idealTransformer1.iPrim[2].im@M // - led_driver.loadBase.i[2].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].im
eq_12 : led_driver.loadBase.i[3].re@ test_DY.idealTransformer1.iPrim[3].re@M // - led_driver.loadBase.i[3].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].re
eq_13 : led_driver.loadBase.i[3].im@ test_DY.idealTransformer1.iPrim[3].im@M // - led_driver.loadBase.i[3].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].im
eq_14 : led_driver.loadBase.i[4].re@ test_DY.idealTransformer1.iPrim[4].re@M // - led_driver.loadBase.i[4].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].re
eq_15 : led_driver.loadBase.i[4].im@ test_DY.idealTransformer1.iPrim[4].im@M // - led_driver.loadBase.i[4].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].im
eq_16 : led_driver.loadBase.i[5].re@ test_DY.idealTransformer1.iPrim[5].re@M // - led_driver.loadBase.i[5].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].re
eq_17 : led_driver.loadBase.i[5].im@ test_DY.idealTransformer1.iPrim[5].im@M // - led_driver.loadBase.i[5].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].im
eq_18 : led_driver.loadBase.i[6].re@ test_DY.idealTransformer1.iPrim[6].re@M // - led_driver.loadBase.i[6].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].re
eq_19 : led_driver.loadBase.i[6].im@ test_DY.idealTransformer1.iPrim[6].im@M // - led_driver.loadBase.i[6].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].im
eq_20 : led_driver.loadBase.i[7].re@ test_DY.idealTransformer1.iPrim[7].re@M // - led_driver.loadBase.i[7].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].re
eq_21 : led_driver.loadBase.i[7].im@ test_DY.idealTransformer1.iPrim[7].im@M // - led_driver.loadBase.i[7].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].im
eq_22 : led_driver.loadBase.i[8].re@ test_DY.idealTransformer1.iPrim[8].re@M // - led_driver.loadBase.i[8].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].re
eq_23 : led_driver.loadBase.i[8].im@ test_DY.idealTransformer1.iPrim[8].im@M // - led_driver.loadBase.i[8].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].im
eq_24 : laptop2.loadBase.i[1].re@ test_DY.idealTransformer2.iPrim[1].re@M // - laptop2.loadBase.i[1].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].re
eq_25 : laptop2.loadBase.i[1].im@ test_DY.idealTransformer2.iPrim[1].im@M // - laptop2.loadBase.i[1].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].im
eq_26 : laptop2.loadBase.i[2].re@ test_DY.idealTransformer2.iPrim[2].re@M // - laptop2.loadBase.i[2].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].re
eq_27 : laptop2.loadBase.i[2].im@ test_DY.idealTransformer2.iPrim[2].im@M // - laptop2.loadBase.i[2].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].im
eq_28 : laptop2.loadBase.i[3].re@ test_DY.idealTransformer2.iPrim[3].re@M // - laptop2.loadBase.i[3].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].re
eq_29 : laptop2.loadBase.i[3].im@ test_DY.idealTransformer2.iPrim[3].im@M // - laptop2.loadBase.i[3].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].im
eq_30 : laptop2.loadBase.i[4].re@ test_DY.idealTransformer2.iPrim[4].re@M // - laptop2.loadBase.i[4].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].re
eq_31 : laptop2.loadBase.i[4].im@ test_DY.idealTransformer2.iPrim[4].im@M // - laptop2.loadBase.i[4].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].im
eq_32 : laptop2.loadBase.i[5].re@ test_DY.idealTransformer2.iPrim[5].re@M // - laptop2.loadBase.i[5].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].re
eq_33 : laptop2.loadBase.i[5].im@ test_DY.idealTransformer2.iPrim[5].im@M // - laptop2.loadBase.i[5].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].im
eq_34 : laptop2.loadBase.i[6].re@ test_DY.idealTransformer2.iPrim[6].re@M // - laptop2.loadBase.i[6].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].re
eq_35 : laptop2.loadBase.i[6].im@ test_DY.idealTransformer2.iPrim[6].im@M // - laptop2.loadBase.i[6].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].im
eq_36 : laptop2.loadBase.i[7].re@ test_DY.idealTransformer2.iPrim[7].re@M // - laptop2.loadBase.i[7].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].re
eq_37 : laptop2.loadBase.i[7].im@ test_DY.idealTransformer2.iPrim[7].im@M // - laptop2.loadBase.i[7].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].im
eq_38 : laptop2.loadBase.i[8].re@ test_DY.idealTransformer2.iPrim[8].re@M // - laptop2.loadBase.i[8].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].re
eq_39 : laptop2.loadBase.i[8].im@ test_DY.idealTransformer2.iPrim[8].im@M // - laptop2.loadBase.i[8].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@M // laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
eq_41 : laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@M // laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re@M laptop2.c[1]@ // laptop2.loadBase.i[2].re = laptop2.c[1] * laptop2.a[1].re
eq_43 : laptop2.loadBase.i[2].im@M laptop2.c[1]@ // laptop2.loadBase.i[2].im = laptop2.c[1] * laptop2.a[1].im
eq_44 : laptop2.loadBase.i[3].re@M laptop2.c[2]@ // laptop2.loadBase.i[3].re = laptop2.c[2] * laptop2.a[2].re
eq_45 : laptop2.loadBase.i[3].im@M laptop2.c[2]@ // laptop2.loadBase.i[3].im = laptop2.c[2] * laptop2.a[2].im
eq_46 : laptop2.loadBase.i[4].re@M laptop2.c[3]@ // laptop2.loadBase.i[4].re = laptop2.c[3] * laptop2.a[3].re
eq_47 : laptop2.loadBase.i[4].im@M laptop2.c[3]@ // laptop2.loadBase.i[4].im = laptop2.c[3] * laptop2.a[3].im
eq_48 : laptop2.loadBase.i[5].re@M laptop2.c[4]@ // laptop2.loadBase.i[5].re = laptop2.c[4] * laptop2.a[4].re
eq_49 : laptop2.loadBase.i[5].im@M laptop2.c[4]@ // laptop2.loadBase.i[5].im = laptop2.c[4] * laptop2.a[4].im
eq_50 : laptop2.loadBase.i[6].re@M laptop2.c[5]@ // laptop2.loadBase.i[6].re = laptop2.c[5] * laptop2.a[5].re
eq_51 : laptop2.loadBase.i[6].im@M laptop2.c[5]@ // laptop2.loadBase.i[6].im = laptop2.c[5] * laptop2.a[5].im
eq_52 : laptop2.loadBase.i[7].re@M laptop2.c[6]@ // laptop2.loadBase.i[7].re = laptop2.c[6] * laptop2.a[6].re
eq_53 : laptop2.loadBase.i[7].im@M laptop2.c[6]@ // laptop2.loadBase.i[7].im = laptop2.c[6] * laptop2.a[6].im
eq_54 : laptop2.loadBase.i[8].re@M laptop2.c[7]@ // laptop2.loadBase.i[8].re = laptop2.c[7] * laptop2.a[7].re
eq_55 : laptop2.loadBase.i[8].im@M laptop2.c[7]@ // laptop2.loadBase.i[8].im = laptop2.c[7] * laptop2.a[7].im
eq_56 : // algorithm

eq_57 : laptop2.loadBase.omega@M der(PhA.theta)@ // laptop2.loadBase.omega = der(PhA.theta)
eq_58 : led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@M // led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
eq_59 : led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@M // led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re@M led_driver.c[1]@ // led_driver.loadBase.i[2].re = led_driver.c[1] * led_driver.a[1].re
eq_61 : led_driver.loadBase.i[2].im@M led_driver.c[1]@ // led_driver.loadBase.i[2].im = led_driver.c[1] * led_driver.a[1].im
eq_62 : led_driver.loadBase.i[3].re@M led_driver.c[2]@ // led_driver.loadBase.i[3].re = led_driver.c[2] * led_driver.a[2].re
eq_63 : led_driver.loadBase.i[3].im@M led_driver.c[2]@ // led_driver.loadBase.i[3].im = led_driver.c[2] * led_driver.a[2].im
eq_64 : led_driver.loadBase.i[4].re@M led_driver.c[3]@ // led_driver.loadBase.i[4].re = led_driver.c[3] * led_driver.a[3].re
eq_65 : led_driver.loadBase.i[4].im@M led_driver.c[3]@ // led_driver.loadBase.i[4].im = led_driver.c[3] * led_driver.a[3].im
eq_66 : led_driver.loadBase.i[5].re@M led_driver.c[4]@ // led_driver.loadBase.i[5].re = led_driver.c[4] * led_driver.a[4].re
eq_67 : led_driver.loadBase.i[5].im@M led_driver.c[4]@ // led_driver.loadBase.i[5].im = led_driver.c[4] * led_driver.a[4].im
eq_68 : led_driver.loadBase.i[6].re@M led_driver.c[5]@ // led_driver.loadBase.i[6].re = led_driver.c[5] * led_driver.a[5].re
eq_69 : led_driver.loadBase.i[6].im@M led_driver.c[5]@ // led_driver.loadBase.i[6].im = led_driver.c[5] * led_driver.a[5].im
eq_70 : led_driver.loadBase.i[7].re@M led_driver.c[6]@ // led_driver.loadBase.i[7].re = led_driver.c[6] * led_driver.a[6].re
eq_71 : led_driver.loadBase.i[7].im@M led_driver.c[6]@ // led_driver.loadBase.i[7].im = led_driver.c[6] * led_driver.a[6].im
eq_72 : led_driver.loadBase.i[8].re@M led_driver.c[7]@ // led_driver.loadBase.i[8].re = led_driver.c[7] * led_driver.a[7].re
eq_73 : led_driver.loadBase.i[8].im@M led_driver.c[7]@ // led_driver.loadBase.i[8].im = led_driver.c[7] * led_driver.a[7].im
eq_74 : // algorithm

eq_75 : led_driver.loadBase.omega@M der(PhA.theta)@ // led_driver.loadBase.omega = der(PhA.theta)
eq_76 : r.omega@M der(PhA.theta)@ // r.omega = der(PhA.theta)
eq_77 : PhA.i[1].im@ PhB.i[1].im@ PhC.i[1].im@ ground.pin.iIm[1]@M // - PhA.i[1].im + (- PhB.i[1].im) + (- PhC.i[1].im) + ground.pin.iIm[1] = 0
eq_78 : PhA.i[2].im@ PhB.i[2].im@ PhC.i[2].im@ ground.pin.iIm[2]@M // - PhA.i[2].im + (- PhB.i[2].im) + (- PhC.i[2].im) + ground.pin.iIm[2] = 0
eq_79 : PhA.i[3].im@ PhB.i[3].im@ PhC.i[3].im@ ground.pin.iIm[3]@M // - PhA.i[3].im + (- PhB.i[3].im) + (- PhC.i[3].im) + ground.pin.iIm[3] = 0
eq_80 : PhA.i[4].im@ PhB.i[4].im@ PhC.i[4].im@ ground.pin.iIm[4]@M // - PhA.i[4].im + (- PhB.i[4].im) + (- PhC.i[4].im) + ground.pin.iIm[4] = 0
eq_81 : PhA.i[5].im@ PhB.i[5].im@ PhC.i[5].im@ ground.pin.iIm[5]@M // - PhA.i[5].im + (- PhB.i[5].im) + (- PhC.i[5].im) + ground.pin.iIm[5] = 0
eq_82 : PhA.i[6].im@ PhB.i[6].im@ PhC.i[6].im@ ground.pin.iIm[6]@M // - PhA.i[6].im + (- PhB.i[6].im) + (- PhC.i[6].im) + ground.pin.iIm[6] = 0
eq_83 : PhA.i[7].im@ PhB.i[7].im@ PhC.i[7].im@ ground.pin.iIm[7]@M // - PhA.i[7].im + (- PhB.i[7].im) + (- PhC.i[7].im) + ground.pin.iIm[7] = 0
eq_84 : PhA.i[8].im@ PhB.i[8].im@ PhC.i[8].im@ ground.pin.iIm[8]@M // - PhA.i[8].im + (- PhB.i[8].im) + (- PhC.i[8].im) + ground.pin.iIm[8] = 0
eq_85 : PhA.i[1].re@ PhB.i[1].re@ PhC.i[1].re@ ground.pin.iRe[1]@M // - PhA.i[1].re + (- PhB.i[1].re) + (- PhC.i[1].re) + ground.pin.iRe[1] = 0
eq_86 : PhA.i[2].re@ PhB.i[2].re@ PhC.i[2].re@ ground.pin.iRe[2]@M // - PhA.i[2].re + (- PhB.i[2].re) + (- PhC.i[2].re) + ground.pin.iRe[2] = 0
eq_87 : PhA.i[3].re@ PhB.i[3].re@ PhC.i[3].re@ ground.pin.iRe[3]@M // - PhA.i[3].re + (- PhB.i[3].re) + (- PhC.i[3].re) + ground.pin.iRe[3] = 0
eq_88 : PhA.i[4].re@ PhB.i[4].re@ PhC.i[4].re@ ground.pin.iRe[4]@M // - PhA.i[4].re + (- PhB.i[4].re) + (- PhC.i[4].re) + ground.pin.iRe[4] = 0
eq_89 : PhA.i[5].re@ PhB.i[5].re@ PhC.i[5].re@ ground.pin.iRe[5]@M // - PhA.i[5].re + (- PhB.i[5].re) + (- PhC.i[5].re) + ground.pin.iRe[5] = 0
eq_90 : PhA.i[6].re@ PhB.i[6].re@ PhC.i[6].re@ ground.pin.iRe[6]@M // - PhA.i[6].re + (- PhB.i[6].re) + (- PhC.i[6].re) + ground.pin.iRe[6] = 0
eq_91 : PhA.i[7].re@ PhB.i[7].re@ PhC.i[7].re@ ground.pin.iRe[7]@M // - PhA.i[7].re + (- PhB.i[7].re) + (- PhC.i[7].re) + ground.pin.iRe[7] = 0
eq_92 : PhA.i[8].re@ PhB.i[8].re@ PhC.i[8].re@ ground.pin.iRe[8]@M // - PhA.i[8].re + (- PhB.i[8].re) + (- PhC.i[8].re) + ground.pin.iRe[8] = 0
eq_93 : ground1.pin.iIm[1]@ laptop2.loadBase.i[1].im@ led_driver.loadBase.i[1].im@ test_DY.hPin_N.iIm[1]@M // ground1.pin.iIm[1] + (- laptop2.loadBase.i[1].im) + (- led_driver.loadBase.i[1].im) + (- r.i[1].im) + test_DY.hPin_N.iIm[1] = 0
eq_94 : ground1.pin.iIm[2]@ laptop2.loadBase.i[2].im@ led_driver.loadBase.i[2].im@ test_DY.hPin_N.iIm[2]@M // ground1.pin.iIm[2] + (- laptop2.loadBase.i[2].im) + (- led_driver.loadBase.i[2].im) + (- r.i[2].im) + test_DY.hPin_N.iIm[2] = 0
eq_95 : ground1.pin.iIm[3]@ laptop2.loadBase.i[3].im@ led_driver.loadBase.i[3].im@ test_DY.hPin_N.iIm[3]@M // ground1.pin.iIm[3] + (- laptop2.loadBase.i[3].im) + (- led_driver.loadBase.i[3].im) + (- r.i[3].im) + test_DY.hPin_N.iIm[3] = 0
eq_96 : ground1.pin.iIm[4]@ laptop2.loadBase.i[4].im@ led_driver.loadBase.i[4].im@ test_DY.hPin_N.iIm[4]@M // ground1.pin.iIm[4] + (- laptop2.loadBase.i[4].im) + (- led_driver.loadBase.i[4].im) + (- r.i[4].im) + test_DY.hPin_N.iIm[4] = 0
eq_97 : ground1.pin.iIm[5]@ laptop2.loadBase.i[5].im@ led_driver.loadBase.i[5].im@ test_DY.hPin_N.iIm[5]@M // ground1.pin.iIm[5] + (- laptop2.loadBase.i[5].im) + (- led_driver.loadBase.i[5].im) + (- r.i[5].im) + test_DY.hPin_N.iIm[5] = 0
eq_98 : ground1.pin.iIm[6]@ laptop2.loadBase.i[6].im@ led_driver.loadBase.i[6].im@ test_DY.hPin_N.iIm[6]@M // ground1.pin.iIm[6] + (- laptop2.loadBase.i[6].im) + (- led_driver.loadBase.i[6].im) + (- r.i[6].im) + test_DY.hPin_N.iIm[6] = 0
eq_99 : ground1.pin.iIm[7]@ laptop2.loadBase.i[7].im@ led_driver.loadBase.i[7].im@ test_DY.hPin_N.iIm[7]@M // ground1.pin.iIm[7] + (- laptop2.loadBase.i[7].im) + (- led_driver.loadBase.i[7].im) + (- r.i[7].im) + test_DY.hPin_N.iIm[7] = 0
eq_100 : ground1.pin.iIm[8]@ laptop2.loadBase.i[8].im@ led_driver.loadBase.i[8].im@ test_DY.hPin_N.iIm[8]@M // ground1.pin.iIm[8] + (- laptop2.loadBase.i[8].im) + (- led_driver.loadBase.i[8].im) + (- r.i[8].im) + test_DY.hPin_N.iIm[8] = 0
eq_101 : ground1.pin.iRe[1]@ laptop2.loadBase.i[1].re@ led_driver.loadBase.i[1].re@ test_DY.hPin_N.iRe[1]@M // ground1.pin.iRe[1] + (- laptop2.loadBase.i[1].re) + (- led_driver.loadBase.i[1].re) + (- r.i[1].re) + test_DY.hPin_N.iRe[1] = 0
eq_102 : ground1.pin.iRe[2]@ laptop2.loadBase.i[2].re@ led_driver.loadBase.i[2].re@ test_DY.hPin_N.iRe[2]@M // ground1.pin.iRe[2] + (- laptop2.loadBase.i[2].re) + (- led_driver.loadBase.i[2].re) + (- r.i[2].re) + test_DY.hPin_N.iRe[2] = 0
eq_103 : ground1.pin.iRe[3]@ laptop2.loadBase.i[3].re@ led_driver.loadBase.i[3].re@ test_DY.hPin_N.iRe[3]@M // ground1.pin.iRe[3] + (- laptop2.loadBase.i[3].re) + (- led_driver.loadBase.i[3].re) + (- r.i[3].re) + test_DY.hPin_N.iRe[3] = 0
eq_104 : ground1.pin.iRe[4]@ laptop2.loadBase.i[4].re@ led_driver.loadBase.i[4].re@ test_DY.hPin_N.iRe[4]@M // ground1.pin.iRe[4] + (- laptop2.loadBase.i[4].re) + (- led_driver.loadBase.i[4].re) + (- r.i[4].re) + test_DY.hPin_N.iRe[4] = 0
eq_105 : ground1.pin.iRe[5]@ laptop2.loadBase.i[5].re@ led_driver.loadBase.i[5].re@ test_DY.hPin_N.iRe[5]@M // ground1.pin.iRe[5] + (- laptop2.loadBase.i[5].re) + (- led_driver.loadBase.i[5].re) + (- r.i[5].re) + test_DY.hPin_N.iRe[5] = 0
eq_106 : ground1.pin.iRe[6]@ laptop2.loadBase.i[6].re@ led_driver.loadBase.i[6].re@ test_DY.hPin_N.iRe[6]@M // ground1.pin.iRe[6] + (- laptop2.loadBase.i[6].re) + (- led_driver.loadBase.i[6].re) + (- r.i[6].re) + test_DY.hPin_N.iRe[6] = 0
eq_107 : ground1.pin.iRe[7]@ laptop2.loadBase.i[7].re@ led_driver.loadBase.i[7].re@ test_DY.hPin_N.iRe[7]@M // ground1.pin.iRe[7] + (- laptop2.loadBase.i[7].re) + (- led_driver.loadBase.i[7].re) + (- r.i[7].re) + test_DY.hPin_N.iRe[7] = 0
eq_108 : ground1.pin.iRe[8]@ laptop2.loadBase.i[8].re@ led_driver.loadBase.i[8].re@ test_DY.hPin_N.iRe[8]@M // ground1.pin.iRe[8] + (- laptop2.loadBase.i[8].re) + (- led_driver.loadBase.i[8].re) + (- r.i[8].re) + test_DY.hPin_N.iRe[8] = 0
eq_109 : test_DY.idealTransformer1.iPrim[1].im@ test_DY.idealTransformer2.iPrim[1].im@ PhA.i[1].im@M // test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer2.iPrim[1].im) + PhA.i[1].im = 0
eq_110 : test_DY.idealTransformer1.iPrim[2].im@ test_DY.idealTransformer2.iPrim[2].im@ PhA.i[2].im@M // test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer2.iPrim[2].im) + PhA.i[2].im = 0
eq_111 : test_DY.idealTransformer1.iPrim[3].im@ test_DY.idealTransformer2.iPrim[3].im@ PhA.i[3].im@M // test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer2.iPrim[3].im) + PhA.i[3].im = 0
eq_112 : test_DY.idealTransformer1.iPrim[4].im@ test_DY.idealTransformer2.iPrim[4].im@ PhA.i[4].im@M // test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer2.iPrim[4].im) + PhA.i[4].im = 0
eq_113 : test_DY.idealTransformer1.iPrim[5].im@ test_DY.idealTransformer2.iPrim[5].im@ PhA.i[5].im@M // test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer2.iPrim[5].im) + PhA.i[5].im = 0
eq_114 : test_DY.idealTransformer1.iPrim[6].im@ test_DY.idealTransformer2.iPrim[6].im@ PhA.i[6].im@M // test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer2.iPrim[6].im) + PhA.i[6].im = 0
eq_115 : test_DY.idealTransformer1.iPrim[7].im@ test_DY.idealTransformer2.iPrim[7].im@ PhA.i[7].im@M // test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer2.iPrim[7].im) + PhA.i[7].im = 0
eq_116 : test_DY.idealTransformer1.iPrim[8].im@ test_DY.idealTransformer2.iPrim[8].im@ PhA.i[8].im@M // test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer2.iPrim[8].im) + PhA.i[8].im = 0
eq_117 : test_DY.idealTransformer1.iPrim[1].re@ test_DY.idealTransformer2.iPrim[1].re@ PhA.i[1].re@M // test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer2.iPrim[1].re) + PhA.i[1].re = 0
eq_118 : test_DY.idealTransformer1.iPrim[2].re@ test_DY.idealTransformer2.iPrim[2].re@ PhA.i[2].re@M // test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer2.iPrim[2].re) + PhA.i[2].re = 0
eq_119 : test_DY.idealTransformer1.iPrim[3].re@ test_DY.idealTransformer2.iPrim[3].re@ PhA.i[3].re@M // test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer2.iPrim[3].re) + PhA.i[3].re = 0
eq_120 : test_DY.idealTransformer1.iPrim[4].re@ test_DY.idealTransformer2.iPrim[4].re@ PhA.i[4].re@M // test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer2.iPrim[4].re) + PhA.i[4].re = 0
eq_121 : test_DY.idealTransformer1.iPrim[5].re@ test_DY.idealTransformer2.iPrim[5].re@ PhA.i[5].re@M // test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer2.iPrim[5].re) + PhA.i[5].re = 0
eq_122 : test_DY.idealTransformer1.iPrim[6].re@ test_DY.idealTransformer2.iPrim[6].re@ PhA.i[6].re@M // test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer2.iPrim[6].re) + PhA.i[6].re = 0
eq_123 : test_DY.idealTransformer1.iPrim[7].re@ test_DY.idealTransformer2.iPrim[7].re@ PhA.i[7].re@M // test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer2.iPrim[7].re) + PhA.i[7].re = 0
eq_124 : test_DY.idealTransformer1.iPrim[8].re@ test_DY.idealTransformer2.iPrim[8].re@ PhA.i[8].re@M // test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer2.iPrim[8].re) + PhA.i[8].re = 0
eq_125 : test_DY.idealTransformer1.iPrim[1].im@ PhC.i[1].im@M // - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im + PhC.i[1].im = 0
eq_126 : test_DY.idealTransformer1.iPrim[2].im@ PhC.i[2].im@M // - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im + PhC.i[2].im = 0
eq_127 : test_DY.idealTransformer1.iPrim[3].im@ PhC.i[3].im@M // - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im + PhC.i[3].im = 0
eq_128 : test_DY.idealTransformer1.iPrim[4].im@ PhC.i[4].im@M // - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im + PhC.i[4].im = 0
eq_129 : test_DY.idealTransformer1.iPrim[5].im@ PhC.i[5].im@M // - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im + PhC.i[5].im = 0
eq_130 : test_DY.idealTransformer1.iPrim[6].im@ PhC.i[6].im@M // - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im + PhC.i[6].im = 0
eq_131 : test_DY.idealTransformer1.iPrim[7].im@ PhC.i[7].im@M // - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im + PhC.i[7].im = 0
eq_132 : test_DY.idealTransformer1.iPrim[8].im@ PhC.i[8].im@M // - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im + PhC.i[8].im = 0
eq_133 : test_DY.idealTransformer1.iPrim[1].re@ PhC.i[1].re@M // - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re + PhC.i[1].re = 0
eq_134 : test_DY.idealTransformer1.iPrim[2].re@ PhC.i[2].re@M // - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re + PhC.i[2].re = 0
eq_135 : test_DY.idealTransformer1.iPrim[3].re@ PhC.i[3].re@M // - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re + PhC.i[3].re = 0
eq_136 : test_DY.idealTransformer1.iPrim[4].re@ PhC.i[4].re@M // - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re + PhC.i[4].re = 0
eq_137 : test_DY.idealTransformer1.iPrim[5].re@ PhC.i[5].re@M // - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re + PhC.i[5].re = 0
eq_138 : test_DY.idealTransformer1.iPrim[6].re@ PhC.i[6].re@M // - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re + PhC.i[6].re = 0
eq_139 : test_DY.idealTransformer1.iPrim[7].re@ PhC.i[7].re@M // - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re + PhC.i[7].re = 0
eq_140 : test_DY.idealTransformer1.iPrim[8].re@ PhC.i[8].re@M // - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re + PhC.i[8].re = 0
eq_141 : test_DY.idealTransformer2.iPrim[1].im@ PhB.i[1].im@M // test_DY.idealTransformer2.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im) + PhB.i[1].im = 0
eq_142 : test_DY.idealTransformer2.iPrim[2].im@ PhB.i[2].im@M // test_DY.idealTransformer2.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im) + PhB.i[2].im = 0
eq_143 : test_DY.idealTransformer2.iPrim[3].im@ PhB.i[3].im@M // test_DY.idealTransformer2.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im) + PhB.i[3].im = 0
eq_144 : test_DY.idealTransformer2.iPrim[4].im@ PhB.i[4].im@M // test_DY.idealTransformer2.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im) + PhB.i[4].im = 0
eq_145 : test_DY.idealTransformer2.iPrim[5].im@ PhB.i[5].im@M // test_DY.idealTransformer2.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im) + PhB.i[5].im = 0
eq_146 : test_DY.idealTransformer2.iPrim[6].im@ PhB.i[6].im@M // test_DY.idealTransformer2.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im) + PhB.i[6].im = 0
eq_147 : test_DY.idealTransformer2.iPrim[7].im@ PhB.i[7].im@M // test_DY.idealTransformer2.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im) + PhB.i[7].im = 0
eq_148 : test_DY.idealTransformer2.iPrim[8].im@ PhB.i[8].im@M // test_DY.idealTransformer2.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im) + PhB.i[8].im = 0
eq_149 : test_DY.idealTransformer2.iPrim[1].re@ PhB.i[1].re@M // test_DY.idealTransformer2.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re) + PhB.i[1].re = 0
eq_150 : test_DY.idealTransformer2.iPrim[2].re@ PhB.i[2].re@M // test_DY.idealTransformer2.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re) + PhB.i[2].re = 0
eq_151 : test_DY.idealTransformer2.iPrim[3].re@ PhB.i[3].re@M // test_DY.idealTransformer2.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re) + PhB.i[3].re = 0
eq_152 : test_DY.idealTransformer2.iPrim[4].re@ PhB.i[4].re@M // test_DY.idealTransformer2.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re) + PhB.i[4].re = 0
eq_153 : test_DY.idealTransformer2.iPrim[5].re@ PhB.i[5].re@M // test_DY.idealTransformer2.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re) + PhB.i[5].re = 0
eq_154 : test_DY.idealTransformer2.iPrim[6].re@ PhB.i[6].re@M // test_DY.idealTransformer2.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re) + PhB.i[6].re = 0
eq_155 : test_DY.idealTransformer2.iPrim[7].re@ PhB.i[7].re@M // test_DY.idealTransformer2.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re) + PhB.i[7].re = 0
eq_156 : test_DY.idealTransformer2.iPrim[8].re@ PhB.i[8].re@M // test_DY.idealTransformer2.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re) + PhB.i[8].re = 0
eq_157 : ground1.pin.iIm[1]@M // 0 = ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]@M // 0 = ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]@M // 0 = ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]@M // 0 = ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]@M // 0 = ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]@M // 0 = ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]@M // 0 = ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]@M // 0 = ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]@M // 0 = ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]@M // 0 = ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]@M // 0 = ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]@M // 0 = ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]@M // 0 = ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]@M // 0 = ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]@M // 0 = ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]@M // 0 = ground1.pin.iRe[8]
eq_173 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_174 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_175 : PhB.theta# PhA.theta# // HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_176 : PhC.theta# PhA.theta# // HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_177 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_178 : PhB.theta# PhA.theta# // HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_179 : PhC.theta# PhA.theta# // HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_180 : PhA.theta# // HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_181 : PhA.theta# // HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_182 : PhA.theta# // HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_183 : laptop2.I_mag[1]@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.I_mag[1] = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_184 : laptop2.I_mag[2]@M laptop2.loadBase.i[2].re@ laptop2.loadBase.i[2].im@ // laptop2.I_mag[2] = (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5
eq_185 : laptop2.I_mag[3]@M laptop2.loadBase.i[3].re@ laptop2.loadBase.i[3].im@ // laptop2.I_mag[3] = (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5
eq_186 : laptop2.I_mag[4]@M laptop2.loadBase.i[4].re@ laptop2.loadBase.i[4].im@ // laptop2.I_mag[4] = (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5
eq_187 : laptop2.I_mag[5]@M laptop2.loadBase.i[5].re@ laptop2.loadBase.i[5].im@ // laptop2.I_mag[5] = (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5
eq_188 : laptop2.I_mag[6]@M laptop2.loadBase.i[6].re@ laptop2.loadBase.i[6].im@ // laptop2.I_mag[6] = (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5
eq_189 : laptop2.I_mag[7]@M laptop2.loadBase.i[7].re@ laptop2.loadBase.i[7].im@ // laptop2.I_mag[7] = (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5
eq_190 : laptop2.I_mag[8]@M laptop2.loadBase.i[8].re@ laptop2.loadBase.i[8].im@ // laptop2.I_mag[8] = (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5
eq_191 : laptop2.I_arg[1]@M laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@ // laptop2.I_arg[1] = Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)
eq_192 : laptop2.I_arg[2]@M laptop2.loadBase.i[2].im@ laptop2.loadBase.i[2].re@ // laptop2.I_arg[2] = Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)
eq_193 : laptop2.I_arg[3]@M laptop2.loadBase.i[3].im@ laptop2.loadBase.i[3].re@ // laptop2.I_arg[3] = Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)
eq_194 : laptop2.I_arg[4]@M laptop2.loadBase.i[4].im@ laptop2.loadBase.i[4].re@ // laptop2.I_arg[4] = Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)
eq_195 : laptop2.I_arg[5]@M laptop2.loadBase.i[5].im@ laptop2.loadBase.i[5].re@ // laptop2.I_arg[5] = Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)
eq_196 : laptop2.I_arg[6]@M laptop2.loadBase.i[6].im@ laptop2.loadBase.i[6].re@ // laptop2.I_arg[6] = Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)
eq_197 : laptop2.I_arg[7]@M laptop2.loadBase.i[7].im@ laptop2.loadBase.i[7].re@ // laptop2.I_arg[7] = Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)
eq_198 : laptop2.I_arg[8]@M laptop2.loadBase.i[8].im@ laptop2.loadBase.i[8].re@ // laptop2.I_arg[8] = Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)
eq_199 : laptop2.magScale@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.magScale = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_200 : laptop2.c[1]@M laptop2.magScale@ // laptop2.c[1] = laptop2.magScale * 0.9486974344201337
eq_201 : laptop2.c[2]@M laptop2.magScale@ // laptop2.c[2] = laptop2.magScale * 0.9221155376813399
eq_202 : laptop2.c[3]@M laptop2.magScale@ // laptop2.c[3] = laptop2.magScale * 0.8849332521469448
eq_203 : laptop2.c[4]@M laptop2.magScale@ // laptop2.c[4] = laptop2.magScale * 0.8475867045468796
eq_204 : laptop2.c[5]@M laptop2.magScale@ // laptop2.c[5] = laptop2.magScale * 0.7944241839808487
eq_205 : laptop2.c[6]@M laptop2.magScale@ // laptop2.c[6] = laptop2.magScale * 0.7230242274654483
eq_206 : laptop2.c[7]@M laptop2.magScale@ // laptop2.c[7] = laptop2.magScale * 0.6688914048386135
eq_207 : led_driver.I_mag[1]@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.I_mag[1] = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_208 : led_driver.I_mag[2]@M led_driver.loadBase.i[2].re@ led_driver.loadBase.i[2].im@ // led_driver.I_mag[2] = (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5
eq_209 : led_driver.I_mag[3]@M led_driver.loadBase.i[3].re@ led_driver.loadBase.i[3].im@ // led_driver.I_mag[3] = (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5
eq_210 : led_driver.I_mag[4]@M led_driver.loadBase.i[4].re@ led_driver.loadBase.i[4].im@ // led_driver.I_mag[4] = (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5
eq_211 : led_driver.I_mag[5]@M led_driver.loadBase.i[5].re@ led_driver.loadBase.i[5].im@ // led_driver.I_mag[5] = (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5
eq_212 : led_driver.I_mag[6]@M led_driver.loadBase.i[6].re@ led_driver.loadBase.i[6].im@ // led_driver.I_mag[6] = (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5
eq_213 : led_driver.I_mag[7]@M led_driver.loadBase.i[7].re@ led_driver.loadBase.i[7].im@ // led_driver.I_mag[7] = (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5
eq_214 : led_driver.I_mag[8]@M led_driver.loadBase.i[8].re@ led_driver.loadBase.i[8].im@ // led_driver.I_mag[8] = (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5
eq_215 : led_driver.I_arg[1]@M led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@ // led_driver.I_arg[1] = Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)
eq_216 : led_driver.I_arg[2]@M led_driver.loadBase.i[2].im@ led_driver.loadBase.i[2].re@ // led_driver.I_arg[2] = Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)
eq_217 : led_driver.I_arg[3]@M led_driver.loadBase.i[3].im@ led_driver.loadBase.i[3].re@ // led_driver.I_arg[3] = Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)
eq_218 : led_driver.I_arg[4]@M led_driver.loadBase.i[4].im@ led_driver.loadBase.i[4].re@ // led_driver.I_arg[4] = Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)
eq_219 : led_driver.I_arg[5]@M led_driver.loadBase.i[5].im@ led_driver.loadBase.i[5].re@ // led_driver.I_arg[5] = Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)
eq_220 : led_driver.I_arg[6]@M led_driver.loadBase.i[6].im@ led_driver.loadBase.i[6].re@ // led_driver.I_arg[6] = Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)
eq_221 : led_driver.I_arg[7]@M led_driver.loadBase.i[7].im@ led_driver.loadBase.i[7].re@ // led_driver.I_arg[7] = Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)
eq_222 : led_driver.I_arg[8]@M led_driver.loadBase.i[8].im@ led_driver.loadBase.i[8].re@ // led_driver.I_arg[8] = Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)
eq_223 : led_driver.magScale@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.magScale = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_224 : led_driver.c[1]@M led_driver.magScale@ // led_driver.c[1] = led_driver.magScale * 0.890432111870432
eq_225 : led_driver.c[2]@M led_driver.magScale@ // led_driver.c[2] = led_driver.magScale * 0.7418107134668804
eq_226 : led_driver.c[3]@M led_driver.magScale@ // led_driver.c[3] = led_driver.magScale * 0.567293049298617
eq_227 : led_driver.c[4]@M led_driver.magScale@ // led_driver.c[4] = led_driver.magScale * 0.3936692199400683
eq_228 : led_driver.c[5]@M led_driver.magScale@ // led_driver.c[5] = led_driver.magScale * 0.2525656583874291
eq_229 : led_driver.c[6]@M led_driver.magScale@ // led_driver.c[6] = led_driver.magScale * 0.1565031895698116
eq_230 : led_driver.c[7]@M led_driver.magScale@ // led_driver.c[7] = led_driver.magScale * 0.1085784608235925

Init DAE BiPGraph
BiPGraph (231 equations, 220 variables)
Variables: {der(PhA.theta) der(PhB.theta) der(PhC.theta) PhA.i[1].re PhA.i[1].im PhA.i[2].re PhA.i[2].im PhA.i[3].re PhA.i[3].im PhA.i[4].re PhA.i[4].im PhA.i[5].re PhA.i[5].im PhA.i[6].re PhA.i[6].im PhA.i[7].re PhA.i[7].im PhA.i[8].re PhA.i[8].im PhA.omega PhB.i[1].re PhB.i[1].im PhB.i[2].re PhB.i[2].im PhB.i[3].re PhB.i[3].im PhB.i[4].re PhB.i[4].im PhB.i[5].re PhB.i[5].im PhB.i[6].re PhB.i[6].im PhB.i[7].re PhB.i[7].im PhB.i[8].re PhB.i[8].im PhB.omega PhC.i[1].re PhC.i[1].im PhC.i[2].re PhC.i[2].im PhC.i[3].re PhC.i[3].im PhC.i[4].re PhC.i[4].im PhC.i[5].re PhC.i[5].im PhC.i[6].re PhC.i[6].im PhC.i[7].re PhC.i[7].im PhC.i[8].re PhC.i[8].im PhC.omega test_DY.idealTransformer1.iPrim[1].re test_DY.idealTransformer1.iPrim[1].im test_DY.idealTransformer1.iPrim[2].re test_DY.idealTransformer1.iPrim[2].im test_DY.idealTransformer1.iPrim[3].re test_DY.idealTransformer1.iPrim[3].im test_DY.idealTransformer1.iPrim[4].re test_DY.idealTransformer1.iPrim[4].im test_DY.idealTransformer1.iPrim[5].re test_DY.idealTransformer1.iPrim[5].im test_DY.idealTransformer1.iPrim[6].re test_DY.idealTransformer1.iPrim[6].im test_DY.idealTransformer1.iPrim[7].re test_DY.idealTransformer1.iPrim[7].im test_DY.idealTransformer1.iPrim[8].re test_DY.idealTransformer1.iPrim[8].im test_DY.idealTransformer2.iPrim[1].re test_DY.idealTransformer2.iPrim[1].im test_DY.idealTransformer2.iPrim[2].re test_DY.idealTransformer2.iPrim[2].im test_DY.idealTransformer2.iPrim[3].re test_DY.idealTransformer2.iPrim[3].im test_DY.idealTransformer2.iPrim[4].re test_DY.idealTransformer2.iPrim[4].im test_DY.idealTransformer2.iPrim[5].re test_DY.idealTransformer2.iPrim[5].im test_DY.idealTransformer2.iPrim[6].re test_DY.idealTransformer2.iPrim[6].im test_DY.idealTransformer2.iPrim[7].re test_DY.idealTransformer2.iPrim[7].im test_DY.idealTransformer2.iPrim[8].re test_DY.idealTransformer2.iPrim[8].im test_DY.hPin_N.iIm[1] test_DY.hPin_N.iIm[2] test_DY.hPin_N.iIm[3] test_DY.hPin_N.iIm[4] test_DY.hPin_N.iIm[5] test_DY.hPin_N.iIm[6] test_DY.hPin_N.iIm[7] test_DY.hPin_N.iIm[8] test_DY.hPin_N.iRe[1] test_DY.hPin_N.iRe[2] test_DY.hPin_N.iRe[3] test_DY.hPin_N.iRe[4] test_DY.hPin_N.iRe[5] test_DY.hPin_N.iRe[6] test_DY.hPin_N.iRe[7] test_DY.hPin_N.iRe[8] ground.pin.iIm[1] ground.pin.iIm[2] ground.pin.iIm[3] ground.pin.iIm[4] ground.pin.iIm[5] ground.pin.iIm[6] ground.pin.iIm[7] ground.pin.iIm[8] ground.pin.iRe[1] ground.pin.iRe[2] ground.pin.iRe[3] ground.pin.iRe[4] ground.pin.iRe[5] ground.pin.iRe[6] ground.pin.iRe[7] ground.pin.iRe[8] laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im laptop2.loadBase.i[2].re laptop2.loadBase.i[2].im laptop2.loadBase.i[3].re laptop2.loadBase.i[3].im laptop2.loadBase.i[4].re laptop2.loadBase.i[4].im laptop2.loadBase.i[5].re laptop2.loadBase.i[5].im laptop2.loadBase.i[6].re laptop2.loadBase.i[6].im laptop2.loadBase.i[7].re laptop2.loadBase.i[7].im laptop2.loadBase.i[8].re laptop2.loadBase.i[8].im laptop2.loadBase.omega laptop2.I_mag[1] laptop2.I_mag[2] laptop2.I_mag[3] laptop2.I_mag[4] laptop2.I_mag[5] laptop2.I_mag[6] laptop2.I_mag[7] laptop2.I_mag[8] laptop2.I_arg[1] laptop2.I_arg[2] laptop2.I_arg[3] laptop2.I_arg[4] laptop2.I_arg[5] laptop2.I_arg[6] laptop2.I_arg[7] laptop2.I_arg[8] laptop2.magScale laptop2.c[1] laptop2.c[2] laptop2.c[3] laptop2.c[4] laptop2.c[5] laptop2.c[6] laptop2.c[7] led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im led_driver.loadBase.i[2].re led_driver.loadBase.i[2].im led_driver.loadBase.i[3].re led_driver.loadBase.i[3].im led_driver.loadBase.i[4].re led_driver.loadBase.i[4].im led_driver.loadBase.i[5].re led_driver.loadBase.i[5].im led_driver.loadBase.i[6].re led_driver.loadBase.i[6].im led_driver.loadBase.i[7].re led_driver.loadBase.i[7].im led_driver.loadBase.i[8].re led_driver.loadBase.i[8].im led_driver.loadBase.omega led_driver.I_mag[1] led_driver.I_mag[2] led_driver.I_mag[3] led_driver.I_mag[4] led_driver.I_mag[5] led_driver.I_mag[6] led_driver.I_mag[7] led_driver.I_mag[8] led_driver.I_arg[1] led_driver.I_arg[2] led_driver.I_arg[3] led_driver.I_arg[4] led_driver.I_arg[5] led_driver.I_arg[6] led_driver.I_arg[7] led_driver.I_arg[8] led_driver.magScale led_driver.c[1] led_driver.c[2] led_driver.c[3] led_driver.c[4] led_driver.c[5] led_driver.c[6] led_driver.c[7] ground1.pin.iIm[1] ground1.pin.iIm[2] ground1.pin.iIm[3] ground1.pin.iIm[4] ground1.pin.iIm[5] ground1.pin.iIm[6] ground1.pin.iIm[7] ground1.pin.iIm[8] ground1.pin.iRe[1] ground1.pin.iRe[2] ground1.pin.iRe[3] ground1.pin.iRe[4] ground1.pin.iRe[5] ground1.pin.iRe[6] ground1.pin.iRe[7] ground1.pin.iRe[8] r.omega PhA.theta PhB.theta PhC.theta }
eq_1 : // algorithm

eq_2 : der(PhA.theta)@M // der(PhA.theta) = 6.283185307179586 * systemDef.fFund
eq_3 : PhA.omega@M der(PhA.theta)@ // PhA.omega = der(PhA.theta)
eq_4 : der(PhB.theta)@M // der(PhB.theta) = 6.283185307179586 * systemDef.fFund
eq_5 : PhB.omega@M der(PhB.theta)@ // PhB.omega = der(PhB.theta)
eq_6 : der(PhC.theta)@M // der(PhC.theta) = 6.283185307179586 * systemDef.fFund
eq_7 : PhC.omega@M der(PhC.theta)@ // PhC.omega = der(PhC.theta)
eq_8 : led_driver.loadBase.i[1].re@ test_DY.idealTransformer1.iPrim[1].re@M // - led_driver.loadBase.i[1].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].re
eq_9 : led_driver.loadBase.i[1].im@ test_DY.idealTransformer1.iPrim[1].im@M // - led_driver.loadBase.i[1].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].im
eq_10 : led_driver.loadBase.i[2].re@ test_DY.idealTransformer1.iPrim[2].re@M // - led_driver.loadBase.i[2].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].re
eq_11 : led_driver.loadBase.i[2].im@ test_DY.idealTransformer1.iPrim[2].im@M // - led_driver.loadBase.i[2].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].im
eq_12 : led_driver.loadBase.i[3].re@ test_DY.idealTransformer1.iPrim[3].re@M // - led_driver.loadBase.i[3].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].re
eq_13 : led_driver.loadBase.i[3].im@ test_DY.idealTransformer1.iPrim[3].im@M // - led_driver.loadBase.i[3].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].im
eq_14 : led_driver.loadBase.i[4].re@ test_DY.idealTransformer1.iPrim[4].re@M // - led_driver.loadBase.i[4].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].re
eq_15 : led_driver.loadBase.i[4].im@ test_DY.idealTransformer1.iPrim[4].im@M // - led_driver.loadBase.i[4].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].im
eq_16 : led_driver.loadBase.i[5].re@ test_DY.idealTransformer1.iPrim[5].re@M // - led_driver.loadBase.i[5].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].re
eq_17 : led_driver.loadBase.i[5].im@ test_DY.idealTransformer1.iPrim[5].im@M // - led_driver.loadBase.i[5].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].im
eq_18 : led_driver.loadBase.i[6].re@ test_DY.idealTransformer1.iPrim[6].re@M // - led_driver.loadBase.i[6].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].re
eq_19 : led_driver.loadBase.i[6].im@ test_DY.idealTransformer1.iPrim[6].im@M // - led_driver.loadBase.i[6].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].im
eq_20 : led_driver.loadBase.i[7].re@ test_DY.idealTransformer1.iPrim[7].re@M // - led_driver.loadBase.i[7].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].re
eq_21 : led_driver.loadBase.i[7].im@ test_DY.idealTransformer1.iPrim[7].im@M // - led_driver.loadBase.i[7].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].im
eq_22 : led_driver.loadBase.i[8].re@ test_DY.idealTransformer1.iPrim[8].re@M // - led_driver.loadBase.i[8].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].re
eq_23 : led_driver.loadBase.i[8].im@ test_DY.idealTransformer1.iPrim[8].im@M // - led_driver.loadBase.i[8].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].im
eq_24 : laptop2.loadBase.i[1].re@ test_DY.idealTransformer2.iPrim[1].re@M // - laptop2.loadBase.i[1].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].re
eq_25 : laptop2.loadBase.i[1].im@ test_DY.idealTransformer2.iPrim[1].im@M // - laptop2.loadBase.i[1].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].im
eq_26 : laptop2.loadBase.i[2].re@ test_DY.idealTransformer2.iPrim[2].re@M // - laptop2.loadBase.i[2].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].re
eq_27 : laptop2.loadBase.i[2].im@ test_DY.idealTransformer2.iPrim[2].im@M // - laptop2.loadBase.i[2].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].im
eq_28 : laptop2.loadBase.i[3].re@ test_DY.idealTransformer2.iPrim[3].re@M // - laptop2.loadBase.i[3].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].re
eq_29 : laptop2.loadBase.i[3].im@ test_DY.idealTransformer2.iPrim[3].im@M // - laptop2.loadBase.i[3].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].im
eq_30 : laptop2.loadBase.i[4].re@ test_DY.idealTransformer2.iPrim[4].re@M // - laptop2.loadBase.i[4].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].re
eq_31 : laptop2.loadBase.i[4].im@ test_DY.idealTransformer2.iPrim[4].im@M // - laptop2.loadBase.i[4].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].im
eq_32 : laptop2.loadBase.i[5].re@ test_DY.idealTransformer2.iPrim[5].re@M // - laptop2.loadBase.i[5].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].re
eq_33 : laptop2.loadBase.i[5].im@ test_DY.idealTransformer2.iPrim[5].im@M // - laptop2.loadBase.i[5].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].im
eq_34 : laptop2.loadBase.i[6].re@ test_DY.idealTransformer2.iPrim[6].re@M // - laptop2.loadBase.i[6].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].re
eq_35 : laptop2.loadBase.i[6].im@ test_DY.idealTransformer2.iPrim[6].im@M // - laptop2.loadBase.i[6].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].im
eq_36 : laptop2.loadBase.i[7].re@ test_DY.idealTransformer2.iPrim[7].re@M // - laptop2.loadBase.i[7].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].re
eq_37 : laptop2.loadBase.i[7].im@ test_DY.idealTransformer2.iPrim[7].im@M // - laptop2.loadBase.i[7].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].im
eq_38 : laptop2.loadBase.i[8].re@ test_DY.idealTransformer2.iPrim[8].re@M // - laptop2.loadBase.i[8].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].re
eq_39 : laptop2.loadBase.i[8].im@ test_DY.idealTransformer2.iPrim[8].im@M // - laptop2.loadBase.i[8].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@M // laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
eq_41 : laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@M // laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re@M laptop2.c[1]@ // laptop2.loadBase.i[2].re = laptop2.c[1] * laptop2.a[1].re
eq_43 : laptop2.loadBase.i[2].im@M laptop2.c[1]@ // laptop2.loadBase.i[2].im = laptop2.c[1] * laptop2.a[1].im
eq_44 : laptop2.loadBase.i[3].re@M laptop2.c[2]@ // laptop2.loadBase.i[3].re = laptop2.c[2] * laptop2.a[2].re
eq_45 : laptop2.loadBase.i[3].im@M laptop2.c[2]@ // laptop2.loadBase.i[3].im = laptop2.c[2] * laptop2.a[2].im
eq_46 : laptop2.loadBase.i[4].re@M laptop2.c[3]@ // laptop2.loadBase.i[4].re = laptop2.c[3] * laptop2.a[3].re
eq_47 : laptop2.loadBase.i[4].im@M laptop2.c[3]@ // laptop2.loadBase.i[4].im = laptop2.c[3] * laptop2.a[3].im
eq_48 : laptop2.loadBase.i[5].re@M laptop2.c[4]@ // laptop2.loadBase.i[5].re = laptop2.c[4] * laptop2.a[4].re
eq_49 : laptop2.loadBase.i[5].im@M laptop2.c[4]@ // laptop2.loadBase.i[5].im = laptop2.c[4] * laptop2.a[4].im
eq_50 : laptop2.loadBase.i[6].re@M laptop2.c[5]@ // laptop2.loadBase.i[6].re = laptop2.c[5] * laptop2.a[5].re
eq_51 : laptop2.loadBase.i[6].im@M laptop2.c[5]@ // laptop2.loadBase.i[6].im = laptop2.c[5] * laptop2.a[5].im
eq_52 : laptop2.loadBase.i[7].re@M laptop2.c[6]@ // laptop2.loadBase.i[7].re = laptop2.c[6] * laptop2.a[6].re
eq_53 : laptop2.loadBase.i[7].im@M laptop2.c[6]@ // laptop2.loadBase.i[7].im = laptop2.c[6] * laptop2.a[6].im
eq_54 : laptop2.loadBase.i[8].re@M laptop2.c[7]@ // laptop2.loadBase.i[8].re = laptop2.c[7] * laptop2.a[7].re
eq_55 : laptop2.loadBase.i[8].im@M laptop2.c[7]@ // laptop2.loadBase.i[8].im = laptop2.c[7] * laptop2.a[7].im
eq_56 : // algorithm

eq_57 : laptop2.loadBase.omega@M der(PhA.theta)@ // laptop2.loadBase.omega = der(PhA.theta)
eq_58 : led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@M // led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
eq_59 : led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@M // led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re@M led_driver.c[1]@ // led_driver.loadBase.i[2].re = led_driver.c[1] * led_driver.a[1].re
eq_61 : led_driver.loadBase.i[2].im@M led_driver.c[1]@ // led_driver.loadBase.i[2].im = led_driver.c[1] * led_driver.a[1].im
eq_62 : led_driver.loadBase.i[3].re@M led_driver.c[2]@ // led_driver.loadBase.i[3].re = led_driver.c[2] * led_driver.a[2].re
eq_63 : led_driver.loadBase.i[3].im@M led_driver.c[2]@ // led_driver.loadBase.i[3].im = led_driver.c[2] * led_driver.a[2].im
eq_64 : led_driver.loadBase.i[4].re@M led_driver.c[3]@ // led_driver.loadBase.i[4].re = led_driver.c[3] * led_driver.a[3].re
eq_65 : led_driver.loadBase.i[4].im@M led_driver.c[3]@ // led_driver.loadBase.i[4].im = led_driver.c[3] * led_driver.a[3].im
eq_66 : led_driver.loadBase.i[5].re@M led_driver.c[4]@ // led_driver.loadBase.i[5].re = led_driver.c[4] * led_driver.a[4].re
eq_67 : led_driver.loadBase.i[5].im@M led_driver.c[4]@ // led_driver.loadBase.i[5].im = led_driver.c[4] * led_driver.a[4].im
eq_68 : led_driver.loadBase.i[6].re@M led_driver.c[5]@ // led_driver.loadBase.i[6].re = led_driver.c[5] * led_driver.a[5].re
eq_69 : led_driver.loadBase.i[6].im@M led_driver.c[5]@ // led_driver.loadBase.i[6].im = led_driver.c[5] * led_driver.a[5].im
eq_70 : led_driver.loadBase.i[7].re@M led_driver.c[6]@ // led_driver.loadBase.i[7].re = led_driver.c[6] * led_driver.a[6].re
eq_71 : led_driver.loadBase.i[7].im@M led_driver.c[6]@ // led_driver.loadBase.i[7].im = led_driver.c[6] * led_driver.a[6].im
eq_72 : led_driver.loadBase.i[8].re@M led_driver.c[7]@ // led_driver.loadBase.i[8].re = led_driver.c[7] * led_driver.a[7].re
eq_73 : led_driver.loadBase.i[8].im@M led_driver.c[7]@ // led_driver.loadBase.i[8].im = led_driver.c[7] * led_driver.a[7].im
eq_74 : // algorithm

eq_75 : led_driver.loadBase.omega@M der(PhA.theta)@ // led_driver.loadBase.omega = der(PhA.theta)
eq_76 : r.omega@M der(PhA.theta)@ // r.omega = der(PhA.theta)
eq_77 : PhA.i[1].im@ PhB.i[1].im@ PhC.i[1].im@ ground.pin.iIm[1]@M // - PhA.i[1].im + (- PhB.i[1].im) + (- PhC.i[1].im) + ground.pin.iIm[1] = 0
eq_78 : PhA.i[2].im@ PhB.i[2].im@ PhC.i[2].im@ ground.pin.iIm[2]@M // - PhA.i[2].im + (- PhB.i[2].im) + (- PhC.i[2].im) + ground.pin.iIm[2] = 0
eq_79 : PhA.i[3].im@ PhB.i[3].im@ PhC.i[3].im@ ground.pin.iIm[3]@M // - PhA.i[3].im + (- PhB.i[3].im) + (- PhC.i[3].im) + ground.pin.iIm[3] = 0
eq_80 : PhA.i[4].im@ PhB.i[4].im@ PhC.i[4].im@ ground.pin.iIm[4]@M // - PhA.i[4].im + (- PhB.i[4].im) + (- PhC.i[4].im) + ground.pin.iIm[4] = 0
eq_81 : PhA.i[5].im@ PhB.i[5].im@ PhC.i[5].im@ ground.pin.iIm[5]@M // - PhA.i[5].im + (- PhB.i[5].im) + (- PhC.i[5].im) + ground.pin.iIm[5] = 0
eq_82 : PhA.i[6].im@ PhB.i[6].im@ PhC.i[6].im@ ground.pin.iIm[6]@M // - PhA.i[6].im + (- PhB.i[6].im) + (- PhC.i[6].im) + ground.pin.iIm[6] = 0
eq_83 : PhA.i[7].im@ PhB.i[7].im@ PhC.i[7].im@ ground.pin.iIm[7]@M // - PhA.i[7].im + (- PhB.i[7].im) + (- PhC.i[7].im) + ground.pin.iIm[7] = 0
eq_84 : PhA.i[8].im@ PhB.i[8].im@ PhC.i[8].im@ ground.pin.iIm[8]@M // - PhA.i[8].im + (- PhB.i[8].im) + (- PhC.i[8].im) + ground.pin.iIm[8] = 0
eq_85 : PhA.i[1].re@ PhB.i[1].re@ PhC.i[1].re@ ground.pin.iRe[1]@M // - PhA.i[1].re + (- PhB.i[1].re) + (- PhC.i[1].re) + ground.pin.iRe[1] = 0
eq_86 : PhA.i[2].re@ PhB.i[2].re@ PhC.i[2].re@ ground.pin.iRe[2]@M // - PhA.i[2].re + (- PhB.i[2].re) + (- PhC.i[2].re) + ground.pin.iRe[2] = 0
eq_87 : PhA.i[3].re@ PhB.i[3].re@ PhC.i[3].re@ ground.pin.iRe[3]@M // - PhA.i[3].re + (- PhB.i[3].re) + (- PhC.i[3].re) + ground.pin.iRe[3] = 0
eq_88 : PhA.i[4].re@ PhB.i[4].re@ PhC.i[4].re@ ground.pin.iRe[4]@M // - PhA.i[4].re + (- PhB.i[4].re) + (- PhC.i[4].re) + ground.pin.iRe[4] = 0
eq_89 : PhA.i[5].re@ PhB.i[5].re@ PhC.i[5].re@ ground.pin.iRe[5]@M // - PhA.i[5].re + (- PhB.i[5].re) + (- PhC.i[5].re) + ground.pin.iRe[5] = 0
eq_90 : PhA.i[6].re@ PhB.i[6].re@ PhC.i[6].re@ ground.pin.iRe[6]@M // - PhA.i[6].re + (- PhB.i[6].re) + (- PhC.i[6].re) + ground.pin.iRe[6] = 0
eq_91 : PhA.i[7].re@ PhB.i[7].re@ PhC.i[7].re@ ground.pin.iRe[7]@M // - PhA.i[7].re + (- PhB.i[7].re) + (- PhC.i[7].re) + ground.pin.iRe[7] = 0
eq_92 : PhA.i[8].re@ PhB.i[8].re@ PhC.i[8].re@ ground.pin.iRe[8]@M // - PhA.i[8].re + (- PhB.i[8].re) + (- PhC.i[8].re) + ground.pin.iRe[8] = 0
eq_93 : ground1.pin.iIm[1]@ laptop2.loadBase.i[1].im@ led_driver.loadBase.i[1].im@ test_DY.hPin_N.iIm[1]@M // ground1.pin.iIm[1] + (- laptop2.loadBase.i[1].im) + (- led_driver.loadBase.i[1].im) + (- r.i[1].im) + test_DY.hPin_N.iIm[1] = 0
eq_94 : ground1.pin.iIm[2]@ laptop2.loadBase.i[2].im@ led_driver.loadBase.i[2].im@ test_DY.hPin_N.iIm[2]@M // ground1.pin.iIm[2] + (- laptop2.loadBase.i[2].im) + (- led_driver.loadBase.i[2].im) + (- r.i[2].im) + test_DY.hPin_N.iIm[2] = 0
eq_95 : ground1.pin.iIm[3]@ laptop2.loadBase.i[3].im@ led_driver.loadBase.i[3].im@ test_DY.hPin_N.iIm[3]@M // ground1.pin.iIm[3] + (- laptop2.loadBase.i[3].im) + (- led_driver.loadBase.i[3].im) + (- r.i[3].im) + test_DY.hPin_N.iIm[3] = 0
eq_96 : ground1.pin.iIm[4]@ laptop2.loadBase.i[4].im@ led_driver.loadBase.i[4].im@ test_DY.hPin_N.iIm[4]@M // ground1.pin.iIm[4] + (- laptop2.loadBase.i[4].im) + (- led_driver.loadBase.i[4].im) + (- r.i[4].im) + test_DY.hPin_N.iIm[4] = 0
eq_97 : ground1.pin.iIm[5]@ laptop2.loadBase.i[5].im@ led_driver.loadBase.i[5].im@ test_DY.hPin_N.iIm[5]@M // ground1.pin.iIm[5] + (- laptop2.loadBase.i[5].im) + (- led_driver.loadBase.i[5].im) + (- r.i[5].im) + test_DY.hPin_N.iIm[5] = 0
eq_98 : ground1.pin.iIm[6]@ laptop2.loadBase.i[6].im@ led_driver.loadBase.i[6].im@ test_DY.hPin_N.iIm[6]@M // ground1.pin.iIm[6] + (- laptop2.loadBase.i[6].im) + (- led_driver.loadBase.i[6].im) + (- r.i[6].im) + test_DY.hPin_N.iIm[6] = 0
eq_99 : ground1.pin.iIm[7]@ laptop2.loadBase.i[7].im@ led_driver.loadBase.i[7].im@ test_DY.hPin_N.iIm[7]@M // ground1.pin.iIm[7] + (- laptop2.loadBase.i[7].im) + (- led_driver.loadBase.i[7].im) + (- r.i[7].im) + test_DY.hPin_N.iIm[7] = 0
eq_100 : ground1.pin.iIm[8]@ laptop2.loadBase.i[8].im@ led_driver.loadBase.i[8].im@ test_DY.hPin_N.iIm[8]@M // ground1.pin.iIm[8] + (- laptop2.loadBase.i[8].im) + (- led_driver.loadBase.i[8].im) + (- r.i[8].im) + test_DY.hPin_N.iIm[8] = 0
eq_101 : ground1.pin.iRe[1]@ laptop2.loadBase.i[1].re@ led_driver.loadBase.i[1].re@ test_DY.hPin_N.iRe[1]@M // ground1.pin.iRe[1] + (- laptop2.loadBase.i[1].re) + (- led_driver.loadBase.i[1].re) + (- r.i[1].re) + test_DY.hPin_N.iRe[1] = 0
eq_102 : ground1.pin.iRe[2]@ laptop2.loadBase.i[2].re@ led_driver.loadBase.i[2].re@ test_DY.hPin_N.iRe[2]@M // ground1.pin.iRe[2] + (- laptop2.loadBase.i[2].re) + (- led_driver.loadBase.i[2].re) + (- r.i[2].re) + test_DY.hPin_N.iRe[2] = 0
eq_103 : ground1.pin.iRe[3]@ laptop2.loadBase.i[3].re@ led_driver.loadBase.i[3].re@ test_DY.hPin_N.iRe[3]@M // ground1.pin.iRe[3] + (- laptop2.loadBase.i[3].re) + (- led_driver.loadBase.i[3].re) + (- r.i[3].re) + test_DY.hPin_N.iRe[3] = 0
eq_104 : ground1.pin.iRe[4]@ laptop2.loadBase.i[4].re@ led_driver.loadBase.i[4].re@ test_DY.hPin_N.iRe[4]@M // ground1.pin.iRe[4] + (- laptop2.loadBase.i[4].re) + (- led_driver.loadBase.i[4].re) + (- r.i[4].re) + test_DY.hPin_N.iRe[4] = 0
eq_105 : ground1.pin.iRe[5]@ laptop2.loadBase.i[5].re@ led_driver.loadBase.i[5].re@ test_DY.hPin_N.iRe[5]@M // ground1.pin.iRe[5] + (- laptop2.loadBase.i[5].re) + (- led_driver.loadBase.i[5].re) + (- r.i[5].re) + test_DY.hPin_N.iRe[5] = 0
eq_106 : ground1.pin.iRe[6]@ laptop2.loadBase.i[6].re@ led_driver.loadBase.i[6].re@ test_DY.hPin_N.iRe[6]@M // ground1.pin.iRe[6] + (- laptop2.loadBase.i[6].re) + (- led_driver.loadBase.i[6].re) + (- r.i[6].re) + test_DY.hPin_N.iRe[6] = 0
eq_107 : ground1.pin.iRe[7]@ laptop2.loadBase.i[7].re@ led_driver.loadBase.i[7].re@ test_DY.hPin_N.iRe[7]@M // ground1.pin.iRe[7] + (- laptop2.loadBase.i[7].re) + (- led_driver.loadBase.i[7].re) + (- r.i[7].re) + test_DY.hPin_N.iRe[7] = 0
eq_108 : ground1.pin.iRe[8]@ laptop2.loadBase.i[8].re@ led_driver.loadBase.i[8].re@ test_DY.hPin_N.iRe[8]@M // ground1.pin.iRe[8] + (- laptop2.loadBase.i[8].re) + (- led_driver.loadBase.i[8].re) + (- r.i[8].re) + test_DY.hPin_N.iRe[8] = 0
eq_109 : test_DY.idealTransformer1.iPrim[1].im@ test_DY.idealTransformer2.iPrim[1].im@ PhA.i[1].im@M // test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer2.iPrim[1].im) + PhA.i[1].im = 0
eq_110 : test_DY.idealTransformer1.iPrim[2].im@ test_DY.idealTransformer2.iPrim[2].im@ PhA.i[2].im@M // test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer2.iPrim[2].im) + PhA.i[2].im = 0
eq_111 : test_DY.idealTransformer1.iPrim[3].im@ test_DY.idealTransformer2.iPrim[3].im@ PhA.i[3].im@M // test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer2.iPrim[3].im) + PhA.i[3].im = 0
eq_112 : test_DY.idealTransformer1.iPrim[4].im@ test_DY.idealTransformer2.iPrim[4].im@ PhA.i[4].im@M // test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer2.iPrim[4].im) + PhA.i[4].im = 0
eq_113 : test_DY.idealTransformer1.iPrim[5].im@ test_DY.idealTransformer2.iPrim[5].im@ PhA.i[5].im@M // test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer2.iPrim[5].im) + PhA.i[5].im = 0
eq_114 : test_DY.idealTransformer1.iPrim[6].im@ test_DY.idealTransformer2.iPrim[6].im@ PhA.i[6].im@M // test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer2.iPrim[6].im) + PhA.i[6].im = 0
eq_115 : test_DY.idealTransformer1.iPrim[7].im@ test_DY.idealTransformer2.iPrim[7].im@ PhA.i[7].im@M // test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer2.iPrim[7].im) + PhA.i[7].im = 0
eq_116 : test_DY.idealTransformer1.iPrim[8].im@ test_DY.idealTransformer2.iPrim[8].im@ PhA.i[8].im@M // test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer2.iPrim[8].im) + PhA.i[8].im = 0
eq_117 : test_DY.idealTransformer1.iPrim[1].re@ test_DY.idealTransformer2.iPrim[1].re@ PhA.i[1].re@M // test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer2.iPrim[1].re) + PhA.i[1].re = 0
eq_118 : test_DY.idealTransformer1.iPrim[2].re@ test_DY.idealTransformer2.iPrim[2].re@ PhA.i[2].re@M // test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer2.iPrim[2].re) + PhA.i[2].re = 0
eq_119 : test_DY.idealTransformer1.iPrim[3].re@ test_DY.idealTransformer2.iPrim[3].re@ PhA.i[3].re@M // test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer2.iPrim[3].re) + PhA.i[3].re = 0
eq_120 : test_DY.idealTransformer1.iPrim[4].re@ test_DY.idealTransformer2.iPrim[4].re@ PhA.i[4].re@M // test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer2.iPrim[4].re) + PhA.i[4].re = 0
eq_121 : test_DY.idealTransformer1.iPrim[5].re@ test_DY.idealTransformer2.iPrim[5].re@ PhA.i[5].re@M // test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer2.iPrim[5].re) + PhA.i[5].re = 0
eq_122 : test_DY.idealTransformer1.iPrim[6].re@ test_DY.idealTransformer2.iPrim[6].re@ PhA.i[6].re@M // test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer2.iPrim[6].re) + PhA.i[6].re = 0
eq_123 : test_DY.idealTransformer1.iPrim[7].re@ test_DY.idealTransformer2.iPrim[7].re@ PhA.i[7].re@M // test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer2.iPrim[7].re) + PhA.i[7].re = 0
eq_124 : test_DY.idealTransformer1.iPrim[8].re@ test_DY.idealTransformer2.iPrim[8].re@ PhA.i[8].re@M // test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer2.iPrim[8].re) + PhA.i[8].re = 0
eq_125 : test_DY.idealTransformer1.iPrim[1].im@ PhC.i[1].im@M // - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im + PhC.i[1].im = 0
eq_126 : test_DY.idealTransformer1.iPrim[2].im@ PhC.i[2].im@M // - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im + PhC.i[2].im = 0
eq_127 : test_DY.idealTransformer1.iPrim[3].im@ PhC.i[3].im@M // - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im + PhC.i[3].im = 0
eq_128 : test_DY.idealTransformer1.iPrim[4].im@ PhC.i[4].im@M // - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im + PhC.i[4].im = 0
eq_129 : test_DY.idealTransformer1.iPrim[5].im@ PhC.i[5].im@M // - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im + PhC.i[5].im = 0
eq_130 : test_DY.idealTransformer1.iPrim[6].im@ PhC.i[6].im@M // - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im + PhC.i[6].im = 0
eq_131 : test_DY.idealTransformer1.iPrim[7].im@ PhC.i[7].im@M // - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im + PhC.i[7].im = 0
eq_132 : test_DY.idealTransformer1.iPrim[8].im@ PhC.i[8].im@M // - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im + PhC.i[8].im = 0
eq_133 : test_DY.idealTransformer1.iPrim[1].re@ PhC.i[1].re@M // - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re + PhC.i[1].re = 0
eq_134 : test_DY.idealTransformer1.iPrim[2].re@ PhC.i[2].re@M // - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re + PhC.i[2].re = 0
eq_135 : test_DY.idealTransformer1.iPrim[3].re@ PhC.i[3].re@M // - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re + PhC.i[3].re = 0
eq_136 : test_DY.idealTransformer1.iPrim[4].re@ PhC.i[4].re@M // - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re + PhC.i[4].re = 0
eq_137 : test_DY.idealTransformer1.iPrim[5].re@ PhC.i[5].re@M // - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re + PhC.i[5].re = 0
eq_138 : test_DY.idealTransformer1.iPrim[6].re@ PhC.i[6].re@M // - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re + PhC.i[6].re = 0
eq_139 : test_DY.idealTransformer1.iPrim[7].re@ PhC.i[7].re@M // - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re + PhC.i[7].re = 0
eq_140 : test_DY.idealTransformer1.iPrim[8].re@ PhC.i[8].re@M // - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re + PhC.i[8].re = 0
eq_141 : test_DY.idealTransformer2.iPrim[1].im@ PhB.i[1].im@M // test_DY.idealTransformer2.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im) + PhB.i[1].im = 0
eq_142 : test_DY.idealTransformer2.iPrim[2].im@ PhB.i[2].im@M // test_DY.idealTransformer2.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im) + PhB.i[2].im = 0
eq_143 : test_DY.idealTransformer2.iPrim[3].im@ PhB.i[3].im@M // test_DY.idealTransformer2.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im) + PhB.i[3].im = 0
eq_144 : test_DY.idealTransformer2.iPrim[4].im@ PhB.i[4].im@M // test_DY.idealTransformer2.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im) + PhB.i[4].im = 0
eq_145 : test_DY.idealTransformer2.iPrim[5].im@ PhB.i[5].im@M // test_DY.idealTransformer2.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im) + PhB.i[5].im = 0
eq_146 : test_DY.idealTransformer2.iPrim[6].im@ PhB.i[6].im@M // test_DY.idealTransformer2.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im) + PhB.i[6].im = 0
eq_147 : test_DY.idealTransformer2.iPrim[7].im@ PhB.i[7].im@M // test_DY.idealTransformer2.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im) + PhB.i[7].im = 0
eq_148 : test_DY.idealTransformer2.iPrim[8].im@ PhB.i[8].im@M // test_DY.idealTransformer2.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im) + PhB.i[8].im = 0
eq_149 : test_DY.idealTransformer2.iPrim[1].re@ PhB.i[1].re@M // test_DY.idealTransformer2.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re) + PhB.i[1].re = 0
eq_150 : test_DY.idealTransformer2.iPrim[2].re@ PhB.i[2].re@M // test_DY.idealTransformer2.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re) + PhB.i[2].re = 0
eq_151 : test_DY.idealTransformer2.iPrim[3].re@ PhB.i[3].re@M // test_DY.idealTransformer2.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re) + PhB.i[3].re = 0
eq_152 : test_DY.idealTransformer2.iPrim[4].re@ PhB.i[4].re@M // test_DY.idealTransformer2.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re) + PhB.i[4].re = 0
eq_153 : test_DY.idealTransformer2.iPrim[5].re@ PhB.i[5].re@M // test_DY.idealTransformer2.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re) + PhB.i[5].re = 0
eq_154 : test_DY.idealTransformer2.iPrim[6].re@ PhB.i[6].re@M // test_DY.idealTransformer2.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re) + PhB.i[6].re = 0
eq_155 : test_DY.idealTransformer2.iPrim[7].re@ PhB.i[7].re@M // test_DY.idealTransformer2.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re) + PhB.i[7].re = 0
eq_156 : test_DY.idealTransformer2.iPrim[8].re@ PhB.i[8].re@M // test_DY.idealTransformer2.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re) + PhB.i[8].re = 0
eq_157 : ground1.pin.iIm[1]@M // 0 = ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]@M // 0 = ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]@M // 0 = ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]@M // 0 = ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]@M // 0 = ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]@M // 0 = ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]@M // 0 = ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]@M // 0 = ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]@M // 0 = ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]@M // 0 = ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]@M // 0 = ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]@M // 0 = ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]@M // 0 = ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]@M // 0 = ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]@M // 0 = ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]@M // 0 = ground1.pin.iRe[8]
eq_173 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_174 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_175 : PhB.theta# PhA.theta# // HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_176 : PhC.theta# PhA.theta# // HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_177 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_178 : PhB.theta# PhA.theta# // HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_179 : PhC.theta# PhA.theta# // HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_180 : PhA.theta# // HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_181 : PhA.theta# // HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_182 : PhA.theta# // HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_183 : laptop2.I_mag[1]@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.I_mag[1] = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_184 : laptop2.I_mag[2]@M laptop2.loadBase.i[2].re@ laptop2.loadBase.i[2].im@ // laptop2.I_mag[2] = (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5
eq_185 : laptop2.I_mag[3]@M laptop2.loadBase.i[3].re@ laptop2.loadBase.i[3].im@ // laptop2.I_mag[3] = (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5
eq_186 : laptop2.I_mag[4]@M laptop2.loadBase.i[4].re@ laptop2.loadBase.i[4].im@ // laptop2.I_mag[4] = (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5
eq_187 : laptop2.I_mag[5]@M laptop2.loadBase.i[5].re@ laptop2.loadBase.i[5].im@ // laptop2.I_mag[5] = (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5
eq_188 : laptop2.I_mag[6]@M laptop2.loadBase.i[6].re@ laptop2.loadBase.i[6].im@ // laptop2.I_mag[6] = (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5
eq_189 : laptop2.I_mag[7]@M laptop2.loadBase.i[7].re@ laptop2.loadBase.i[7].im@ // laptop2.I_mag[7] = (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5
eq_190 : laptop2.I_mag[8]@M laptop2.loadBase.i[8].re@ laptop2.loadBase.i[8].im@ // laptop2.I_mag[8] = (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5
eq_191 : laptop2.I_arg[1]@M laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@ // laptop2.I_arg[1] = Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)
eq_192 : laptop2.I_arg[2]@M laptop2.loadBase.i[2].im@ laptop2.loadBase.i[2].re@ // laptop2.I_arg[2] = Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)
eq_193 : laptop2.I_arg[3]@M laptop2.loadBase.i[3].im@ laptop2.loadBase.i[3].re@ // laptop2.I_arg[3] = Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)
eq_194 : laptop2.I_arg[4]@M laptop2.loadBase.i[4].im@ laptop2.loadBase.i[4].re@ // laptop2.I_arg[4] = Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)
eq_195 : laptop2.I_arg[5]@M laptop2.loadBase.i[5].im@ laptop2.loadBase.i[5].re@ // laptop2.I_arg[5] = Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)
eq_196 : laptop2.I_arg[6]@M laptop2.loadBase.i[6].im@ laptop2.loadBase.i[6].re@ // laptop2.I_arg[6] = Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)
eq_197 : laptop2.I_arg[7]@M laptop2.loadBase.i[7].im@ laptop2.loadBase.i[7].re@ // laptop2.I_arg[7] = Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)
eq_198 : laptop2.I_arg[8]@M laptop2.loadBase.i[8].im@ laptop2.loadBase.i[8].re@ // laptop2.I_arg[8] = Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)
eq_199 : laptop2.magScale@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.magScale = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_200 : laptop2.c[1]@M laptop2.magScale@ // laptop2.c[1] = laptop2.magScale * 0.9486974344201337
eq_201 : laptop2.c[2]@M laptop2.magScale@ // laptop2.c[2] = laptop2.magScale * 0.9221155376813399
eq_202 : laptop2.c[3]@M laptop2.magScale@ // laptop2.c[3] = laptop2.magScale * 0.8849332521469448
eq_203 : laptop2.c[4]@M laptop2.magScale@ // laptop2.c[4] = laptop2.magScale * 0.8475867045468796
eq_204 : laptop2.c[5]@M laptop2.magScale@ // laptop2.c[5] = laptop2.magScale * 0.7944241839808487
eq_205 : laptop2.c[6]@M laptop2.magScale@ // laptop2.c[6] = laptop2.magScale * 0.7230242274654483
eq_206 : laptop2.c[7]@M laptop2.magScale@ // laptop2.c[7] = laptop2.magScale * 0.6688914048386135
eq_207 : led_driver.I_mag[1]@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.I_mag[1] = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_208 : led_driver.I_mag[2]@M led_driver.loadBase.i[2].re@ led_driver.loadBase.i[2].im@ // led_driver.I_mag[2] = (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5
eq_209 : led_driver.I_mag[3]@M led_driver.loadBase.i[3].re@ led_driver.loadBase.i[3].im@ // led_driver.I_mag[3] = (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5
eq_210 : led_driver.I_mag[4]@M led_driver.loadBase.i[4].re@ led_driver.loadBase.i[4].im@ // led_driver.I_mag[4] = (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5
eq_211 : led_driver.I_mag[5]@M led_driver.loadBase.i[5].re@ led_driver.loadBase.i[5].im@ // led_driver.I_mag[5] = (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5
eq_212 : led_driver.I_mag[6]@M led_driver.loadBase.i[6].re@ led_driver.loadBase.i[6].im@ // led_driver.I_mag[6] = (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5
eq_213 : led_driver.I_mag[7]@M led_driver.loadBase.i[7].re@ led_driver.loadBase.i[7].im@ // led_driver.I_mag[7] = (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5
eq_214 : led_driver.I_mag[8]@M led_driver.loadBase.i[8].re@ led_driver.loadBase.i[8].im@ // led_driver.I_mag[8] = (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5
eq_215 : led_driver.I_arg[1]@M led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@ // led_driver.I_arg[1] = Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)
eq_216 : led_driver.I_arg[2]@M led_driver.loadBase.i[2].im@ led_driver.loadBase.i[2].re@ // led_driver.I_arg[2] = Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)
eq_217 : led_driver.I_arg[3]@M led_driver.loadBase.i[3].im@ led_driver.loadBase.i[3].re@ // led_driver.I_arg[3] = Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)
eq_218 : led_driver.I_arg[4]@M led_driver.loadBase.i[4].im@ led_driver.loadBase.i[4].re@ // led_driver.I_arg[4] = Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)
eq_219 : led_driver.I_arg[5]@M led_driver.loadBase.i[5].im@ led_driver.loadBase.i[5].re@ // led_driver.I_arg[5] = Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)
eq_220 : led_driver.I_arg[6]@M led_driver.loadBase.i[6].im@ led_driver.loadBase.i[6].re@ // led_driver.I_arg[6] = Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)
eq_221 : led_driver.I_arg[7]@M led_driver.loadBase.i[7].im@ led_driver.loadBase.i[7].re@ // led_driver.I_arg[7] = Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)
eq_222 : led_driver.I_arg[8]@M led_driver.loadBase.i[8].im@ led_driver.loadBase.i[8].re@ // led_driver.I_arg[8] = Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)
eq_223 : led_driver.magScale@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.magScale = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_224 : led_driver.c[1]@M led_driver.magScale@ // led_driver.c[1] = led_driver.magScale * 0.890432111870432
eq_225 : led_driver.c[2]@M led_driver.magScale@ // led_driver.c[2] = led_driver.magScale * 0.7418107134668804
eq_226 : led_driver.c[3]@M led_driver.magScale@ // led_driver.c[3] = led_driver.magScale * 0.567293049298617
eq_227 : led_driver.c[4]@M led_driver.magScale@ // led_driver.c[4] = led_driver.magScale * 0.3936692199400683
eq_228 : led_driver.c[5]@M led_driver.magScale@ // led_driver.c[5] = led_driver.magScale * 0.2525656583874291
eq_229 : led_driver.c[6]@M led_driver.magScale@ // led_driver.c[6] = led_driver.magScale * 0.1565031895698116
eq_230 : led_driver.c[7]@M led_driver.magScale@ // led_driver.c[7] = led_driver.magScale * 0.1085784608235925
eq_231 : // algorithm


Init BiPGraph matching
----------------------------------------
BiPGraph matching:
eq_2 : der(PhA.theta)
eq_3 : PhA.omega
eq_4 : der(PhB.theta)
eq_5 : PhB.omega
eq_6 : der(PhC.theta)
eq_7 : PhC.omega
eq_8 : test_DY.idealTransformer1.iPrim[1].re
eq_9 : test_DY.idealTransformer1.iPrim[1].im
eq_10 : test_DY.idealTransformer1.iPrim[2].re
eq_11 : test_DY.idealTransformer1.iPrim[2].im
eq_12 : test_DY.idealTransformer1.iPrim[3].re
eq_13 : test_DY.idealTransformer1.iPrim[3].im
eq_14 : test_DY.idealTransformer1.iPrim[4].re
eq_15 : test_DY.idealTransformer1.iPrim[4].im
eq_16 : test_DY.idealTransformer1.iPrim[5].re
eq_17 : test_DY.idealTransformer1.iPrim[5].im
eq_18 : test_DY.idealTransformer1.iPrim[6].re
eq_19 : test_DY.idealTransformer1.iPrim[6].im
eq_20 : test_DY.idealTransformer1.iPrim[7].re
eq_21 : test_DY.idealTransformer1.iPrim[7].im
eq_22 : test_DY.idealTransformer1.iPrim[8].re
eq_23 : test_DY.idealTransformer1.iPrim[8].im
eq_24 : test_DY.idealTransformer2.iPrim[1].re
eq_25 : test_DY.idealTransformer2.iPrim[1].im
eq_26 : test_DY.idealTransformer2.iPrim[2].re
eq_27 : test_DY.idealTransformer2.iPrim[2].im
eq_28 : test_DY.idealTransformer2.iPrim[3].re
eq_29 : test_DY.idealTransformer2.iPrim[3].im
eq_30 : test_DY.idealTransformer2.iPrim[4].re
eq_31 : test_DY.idealTransformer2.iPrim[4].im
eq_32 : test_DY.idealTransformer2.iPrim[5].re
eq_33 : test_DY.idealTransformer2.iPrim[5].im
eq_34 : test_DY.idealTransformer2.iPrim[6].re
eq_35 : test_DY.idealTransformer2.iPrim[6].im
eq_36 : test_DY.idealTransformer2.iPrim[7].re
eq_37 : test_DY.idealTransformer2.iPrim[7].im
eq_38 : test_DY.idealTransformer2.iPrim[8].re
eq_39 : test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].im
eq_41 : laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re
eq_43 : laptop2.loadBase.i[2].im
eq_44 : laptop2.loadBase.i[3].re
eq_45 : laptop2.loadBase.i[3].im
eq_46 : laptop2.loadBase.i[4].re
eq_47 : laptop2.loadBase.i[4].im
eq_48 : laptop2.loadBase.i[5].re
eq_49 : laptop2.loadBase.i[5].im
eq_50 : laptop2.loadBase.i[6].re
eq_51 : laptop2.loadBase.i[6].im
eq_52 : laptop2.loadBase.i[7].re
eq_53 : laptop2.loadBase.i[7].im
eq_54 : laptop2.loadBase.i[8].re
eq_55 : laptop2.loadBase.i[8].im
eq_57 : laptop2.loadBase.omega
eq_58 : led_driver.loadBase.i[1].im
eq_59 : led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re
eq_61 : led_driver.loadBase.i[2].im
eq_62 : led_driver.loadBase.i[3].re
eq_63 : led_driver.loadBase.i[3].im
eq_64 : led_driver.loadBase.i[4].re
eq_65 : led_driver.loadBase.i[4].im
eq_66 : led_driver.loadBase.i[5].re
eq_67 : led_driver.loadBase.i[5].im
eq_68 : led_driver.loadBase.i[6].re
eq_69 : led_driver.loadBase.i[6].im
eq_70 : led_driver.loadBase.i[7].re
eq_71 : led_driver.loadBase.i[7].im
eq_72 : led_driver.loadBase.i[8].re
eq_73 : led_driver.loadBase.i[8].im
eq_75 : led_driver.loadBase.omega
eq_76 : r.omega
eq_77 : ground.pin.iIm[1]
eq_78 : ground.pin.iIm[2]
eq_79 : ground.pin.iIm[3]
eq_80 : ground.pin.iIm[4]
eq_81 : ground.pin.iIm[5]
eq_82 : ground.pin.iIm[6]
eq_83 : ground.pin.iIm[7]
eq_84 : ground.pin.iIm[8]
eq_85 : ground.pin.iRe[1]
eq_86 : ground.pin.iRe[2]
eq_87 : ground.pin.iRe[3]
eq_88 : ground.pin.iRe[4]
eq_89 : ground.pin.iRe[5]
eq_90 : ground.pin.iRe[6]
eq_91 : ground.pin.iRe[7]
eq_92 : ground.pin.iRe[8]
eq_93 : test_DY.hPin_N.iIm[1]
eq_94 : test_DY.hPin_N.iIm[2]
eq_95 : test_DY.hPin_N.iIm[3]
eq_96 : test_DY.hPin_N.iIm[4]
eq_97 : test_DY.hPin_N.iIm[5]
eq_98 : test_DY.hPin_N.iIm[6]
eq_99 : test_DY.hPin_N.iIm[7]
eq_100 : test_DY.hPin_N.iIm[8]
eq_101 : test_DY.hPin_N.iRe[1]
eq_102 : test_DY.hPin_N.iRe[2]
eq_103 : test_DY.hPin_N.iRe[3]
eq_104 : test_DY.hPin_N.iRe[4]
eq_105 : test_DY.hPin_N.iRe[5]
eq_106 : test_DY.hPin_N.iRe[6]
eq_107 : test_DY.hPin_N.iRe[7]
eq_108 : test_DY.hPin_N.iRe[8]
eq_109 : PhA.i[1].im
eq_110 : PhA.i[2].im
eq_111 : PhA.i[3].im
eq_112 : PhA.i[4].im
eq_113 : PhA.i[5].im
eq_114 : PhA.i[6].im
eq_115 : PhA.i[7].im
eq_116 : PhA.i[8].im
eq_117 : PhA.i[1].re
eq_118 : PhA.i[2].re
eq_119 : PhA.i[3].re
eq_120 : PhA.i[4].re
eq_121 : PhA.i[5].re
eq_122 : PhA.i[6].re
eq_123 : PhA.i[7].re
eq_124 : PhA.i[8].re
eq_125 : PhC.i[1].im
eq_126 : PhC.i[2].im
eq_127 : PhC.i[3].im
eq_128 : PhC.i[4].im
eq_129 : PhC.i[5].im
eq_130 : PhC.i[6].im
eq_131 : PhC.i[7].im
eq_132 : PhC.i[8].im
eq_133 : PhC.i[1].re
eq_134 : PhC.i[2].re
eq_135 : PhC.i[3].re
eq_136 : PhC.i[4].re
eq_137 : PhC.i[5].re
eq_138 : PhC.i[6].re
eq_139 : PhC.i[7].re
eq_140 : PhC.i[8].re
eq_141 : PhB.i[1].im
eq_142 : PhB.i[2].im
eq_143 : PhB.i[3].im
eq_144 : PhB.i[4].im
eq_145 : PhB.i[5].im
eq_146 : PhB.i[6].im
eq_147 : PhB.i[7].im
eq_148 : PhB.i[8].im
eq_149 : PhB.i[1].re
eq_150 : PhB.i[2].re
eq_151 : PhB.i[3].re
eq_152 : PhB.i[4].re
eq_153 : PhB.i[5].re
eq_154 : PhB.i[6].re
eq_155 : PhB.i[7].re
eq_156 : PhB.i[8].re
eq_157 : ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]
eq_183 : laptop2.I_mag[1]
eq_184 : laptop2.I_mag[2]
eq_185 : laptop2.I_mag[3]
eq_186 : laptop2.I_mag[4]
eq_187 : laptop2.I_mag[5]
eq_188 : laptop2.I_mag[6]
eq_189 : laptop2.I_mag[7]
eq_190 : laptop2.I_mag[8]
eq_191 : laptop2.I_arg[1]
eq_192 : laptop2.I_arg[2]
eq_193 : laptop2.I_arg[3]
eq_194 : laptop2.I_arg[4]
eq_195 : laptop2.I_arg[5]
eq_196 : laptop2.I_arg[6]
eq_197 : laptop2.I_arg[7]
eq_198 : laptop2.I_arg[8]
eq_199 : laptop2.magScale
eq_200 : laptop2.c[1]
eq_201 : laptop2.c[2]
eq_202 : laptop2.c[3]
eq_203 : laptop2.c[4]
eq_204 : laptop2.c[5]
eq_205 : laptop2.c[6]
eq_206 : laptop2.c[7]
eq_207 : led_driver.I_mag[1]
eq_208 : led_driver.I_mag[2]
eq_209 : led_driver.I_mag[3]
eq_210 : led_driver.I_mag[4]
eq_211 : led_driver.I_mag[5]
eq_212 : led_driver.I_mag[6]
eq_213 : led_driver.I_mag[7]
eq_214 : led_driver.I_mag[8]
eq_215 : led_driver.I_arg[1]
eq_216 : led_driver.I_arg[2]
eq_217 : led_driver.I_arg[3]
eq_218 : led_driver.I_arg[4]
eq_219 : led_driver.I_arg[5]
eq_220 : led_driver.I_arg[6]
eq_221 : led_driver.I_arg[7]
eq_222 : led_driver.I_arg[8]
eq_223 : led_driver.magScale
eq_224 : led_driver.c[1]
eq_225 : led_driver.c[2]
eq_226 : led_driver.c[3]
eq_227 : led_driver.c[4]
eq_228 : led_driver.c[5]
eq_229 : led_driver.c[6]
eq_230 : led_driver.c[7]
Unmatched equations: {}
Unmatched variables: {PhA.theta PhB.theta PhC.theta }
----------------------------------------

Analysing initial system for redundant equations to remove.
All seems to be ok!
Init DAE BiPGraph after addition of initial equations
BiPGraph (234 equations, 220 variables)
Variables: {der(PhA.theta) der(PhB.theta) der(PhC.theta) PhA.i[1].re PhA.i[1].im PhA.i[2].re PhA.i[2].im PhA.i[3].re PhA.i[3].im PhA.i[4].re PhA.i[4].im PhA.i[5].re PhA.i[5].im PhA.i[6].re PhA.i[6].im PhA.i[7].re PhA.i[7].im PhA.i[8].re PhA.i[8].im PhA.omega PhB.i[1].re PhB.i[1].im PhB.i[2].re PhB.i[2].im PhB.i[3].re PhB.i[3].im PhB.i[4].re PhB.i[4].im PhB.i[5].re PhB.i[5].im PhB.i[6].re PhB.i[6].im PhB.i[7].re PhB.i[7].im PhB.i[8].re PhB.i[8].im PhB.omega PhC.i[1].re PhC.i[1].im PhC.i[2].re PhC.i[2].im PhC.i[3].re PhC.i[3].im PhC.i[4].re PhC.i[4].im PhC.i[5].re PhC.i[5].im PhC.i[6].re PhC.i[6].im PhC.i[7].re PhC.i[7].im PhC.i[8].re PhC.i[8].im PhC.omega test_DY.idealTransformer1.iPrim[1].re test_DY.idealTransformer1.iPrim[1].im test_DY.idealTransformer1.iPrim[2].re test_DY.idealTransformer1.iPrim[2].im test_DY.idealTransformer1.iPrim[3].re test_DY.idealTransformer1.iPrim[3].im test_DY.idealTransformer1.iPrim[4].re test_DY.idealTransformer1.iPrim[4].im test_DY.idealTransformer1.iPrim[5].re test_DY.idealTransformer1.iPrim[5].im test_DY.idealTransformer1.iPrim[6].re test_DY.idealTransformer1.iPrim[6].im test_DY.idealTransformer1.iPrim[7].re test_DY.idealTransformer1.iPrim[7].im test_DY.idealTransformer1.iPrim[8].re test_DY.idealTransformer1.iPrim[8].im test_DY.idealTransformer2.iPrim[1].re test_DY.idealTransformer2.iPrim[1].im test_DY.idealTransformer2.iPrim[2].re test_DY.idealTransformer2.iPrim[2].im test_DY.idealTransformer2.iPrim[3].re test_DY.idealTransformer2.iPrim[3].im test_DY.idealTransformer2.iPrim[4].re test_DY.idealTransformer2.iPrim[4].im test_DY.idealTransformer2.iPrim[5].re test_DY.idealTransformer2.iPrim[5].im test_DY.idealTransformer2.iPrim[6].re test_DY.idealTransformer2.iPrim[6].im test_DY.idealTransformer2.iPrim[7].re test_DY.idealTransformer2.iPrim[7].im test_DY.idealTransformer2.iPrim[8].re test_DY.idealTransformer2.iPrim[8].im test_DY.hPin_N.iIm[1] test_DY.hPin_N.iIm[2] test_DY.hPin_N.iIm[3] test_DY.hPin_N.iIm[4] test_DY.hPin_N.iIm[5] test_DY.hPin_N.iIm[6] test_DY.hPin_N.iIm[7] test_DY.hPin_N.iIm[8] test_DY.hPin_N.iRe[1] test_DY.hPin_N.iRe[2] test_DY.hPin_N.iRe[3] test_DY.hPin_N.iRe[4] test_DY.hPin_N.iRe[5] test_DY.hPin_N.iRe[6] test_DY.hPin_N.iRe[7] test_DY.hPin_N.iRe[8] ground.pin.iIm[1] ground.pin.iIm[2] ground.pin.iIm[3] ground.pin.iIm[4] ground.pin.iIm[5] ground.pin.iIm[6] ground.pin.iIm[7] ground.pin.iIm[8] ground.pin.iRe[1] ground.pin.iRe[2] ground.pin.iRe[3] ground.pin.iRe[4] ground.pin.iRe[5] ground.pin.iRe[6] ground.pin.iRe[7] ground.pin.iRe[8] laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im laptop2.loadBase.i[2].re laptop2.loadBase.i[2].im laptop2.loadBase.i[3].re laptop2.loadBase.i[3].im laptop2.loadBase.i[4].re laptop2.loadBase.i[4].im laptop2.loadBase.i[5].re laptop2.loadBase.i[5].im laptop2.loadBase.i[6].re laptop2.loadBase.i[6].im laptop2.loadBase.i[7].re laptop2.loadBase.i[7].im laptop2.loadBase.i[8].re laptop2.loadBase.i[8].im laptop2.loadBase.omega laptop2.I_mag[1] laptop2.I_mag[2] laptop2.I_mag[3] laptop2.I_mag[4] laptop2.I_mag[5] laptop2.I_mag[6] laptop2.I_mag[7] laptop2.I_mag[8] laptop2.I_arg[1] laptop2.I_arg[2] laptop2.I_arg[3] laptop2.I_arg[4] laptop2.I_arg[5] laptop2.I_arg[6] laptop2.I_arg[7] laptop2.I_arg[8] laptop2.magScale laptop2.c[1] laptop2.c[2] laptop2.c[3] laptop2.c[4] laptop2.c[5] laptop2.c[6] laptop2.c[7] led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im led_driver.loadBase.i[2].re led_driver.loadBase.i[2].im led_driver.loadBase.i[3].re led_driver.loadBase.i[3].im led_driver.loadBase.i[4].re led_driver.loadBase.i[4].im led_driver.loadBase.i[5].re led_driver.loadBase.i[5].im led_driver.loadBase.i[6].re led_driver.loadBase.i[6].im led_driver.loadBase.i[7].re led_driver.loadBase.i[7].im led_driver.loadBase.i[8].re led_driver.loadBase.i[8].im led_driver.loadBase.omega led_driver.I_mag[1] led_driver.I_mag[2] led_driver.I_mag[3] led_driver.I_mag[4] led_driver.I_mag[5] led_driver.I_mag[6] led_driver.I_mag[7] led_driver.I_mag[8] led_driver.I_arg[1] led_driver.I_arg[2] led_driver.I_arg[3] led_driver.I_arg[4] led_driver.I_arg[5] led_driver.I_arg[6] led_driver.I_arg[7] led_driver.I_arg[8] led_driver.magScale led_driver.c[1] led_driver.c[2] led_driver.c[3] led_driver.c[4] led_driver.c[5] led_driver.c[6] led_driver.c[7] ground1.pin.iIm[1] ground1.pin.iIm[2] ground1.pin.iIm[3] ground1.pin.iIm[4] ground1.pin.iIm[5] ground1.pin.iIm[6] ground1.pin.iIm[7] ground1.pin.iIm[8] ground1.pin.iRe[1] ground1.pin.iRe[2] ground1.pin.iRe[3] ground1.pin.iRe[4] ground1.pin.iRe[5] ground1.pin.iRe[6] ground1.pin.iRe[7] ground1.pin.iRe[8] r.omega PhA.theta PhB.theta PhC.theta }
eq_1 : // algorithm

eq_2 : der(PhA.theta)@M // der(PhA.theta) = 6.283185307179586 * systemDef.fFund
eq_3 : PhA.omega@M der(PhA.theta)@ // PhA.omega = der(PhA.theta)
eq_4 : der(PhB.theta)@M // der(PhB.theta) = 6.283185307179586 * systemDef.fFund
eq_5 : PhB.omega@M der(PhB.theta)@ // PhB.omega = der(PhB.theta)
eq_6 : der(PhC.theta)@M // der(PhC.theta) = 6.283185307179586 * systemDef.fFund
eq_7 : PhC.omega@M der(PhC.theta)@ // PhC.omega = der(PhC.theta)
eq_8 : led_driver.loadBase.i[1].re@ test_DY.idealTransformer1.iPrim[1].re@M // - led_driver.loadBase.i[1].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].re
eq_9 : led_driver.loadBase.i[1].im@ test_DY.idealTransformer1.iPrim[1].im@M // - led_driver.loadBase.i[1].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].im
eq_10 : led_driver.loadBase.i[2].re@ test_DY.idealTransformer1.iPrim[2].re@M // - led_driver.loadBase.i[2].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].re
eq_11 : led_driver.loadBase.i[2].im@ test_DY.idealTransformer1.iPrim[2].im@M // - led_driver.loadBase.i[2].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].im
eq_12 : led_driver.loadBase.i[3].re@ test_DY.idealTransformer1.iPrim[3].re@M // - led_driver.loadBase.i[3].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].re
eq_13 : led_driver.loadBase.i[3].im@ test_DY.idealTransformer1.iPrim[3].im@M // - led_driver.loadBase.i[3].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].im
eq_14 : led_driver.loadBase.i[4].re@ test_DY.idealTransformer1.iPrim[4].re@M // - led_driver.loadBase.i[4].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].re
eq_15 : led_driver.loadBase.i[4].im@ test_DY.idealTransformer1.iPrim[4].im@M // - led_driver.loadBase.i[4].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].im
eq_16 : led_driver.loadBase.i[5].re@ test_DY.idealTransformer1.iPrim[5].re@M // - led_driver.loadBase.i[5].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].re
eq_17 : led_driver.loadBase.i[5].im@ test_DY.idealTransformer1.iPrim[5].im@M // - led_driver.loadBase.i[5].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].im
eq_18 : led_driver.loadBase.i[6].re@ test_DY.idealTransformer1.iPrim[6].re@M // - led_driver.loadBase.i[6].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].re
eq_19 : led_driver.loadBase.i[6].im@ test_DY.idealTransformer1.iPrim[6].im@M // - led_driver.loadBase.i[6].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].im
eq_20 : led_driver.loadBase.i[7].re@ test_DY.idealTransformer1.iPrim[7].re@M // - led_driver.loadBase.i[7].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].re
eq_21 : led_driver.loadBase.i[7].im@ test_DY.idealTransformer1.iPrim[7].im@M // - led_driver.loadBase.i[7].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].im
eq_22 : led_driver.loadBase.i[8].re@ test_DY.idealTransformer1.iPrim[8].re@M // - led_driver.loadBase.i[8].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].re
eq_23 : led_driver.loadBase.i[8].im@ test_DY.idealTransformer1.iPrim[8].im@M // - led_driver.loadBase.i[8].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].im
eq_24 : laptop2.loadBase.i[1].re@ test_DY.idealTransformer2.iPrim[1].re@M // - laptop2.loadBase.i[1].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].re
eq_25 : laptop2.loadBase.i[1].im@ test_DY.idealTransformer2.iPrim[1].im@M // - laptop2.loadBase.i[1].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].im
eq_26 : laptop2.loadBase.i[2].re@ test_DY.idealTransformer2.iPrim[2].re@M // - laptop2.loadBase.i[2].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].re
eq_27 : laptop2.loadBase.i[2].im@ test_DY.idealTransformer2.iPrim[2].im@M // - laptop2.loadBase.i[2].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].im
eq_28 : laptop2.loadBase.i[3].re@ test_DY.idealTransformer2.iPrim[3].re@M // - laptop2.loadBase.i[3].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].re
eq_29 : laptop2.loadBase.i[3].im@ test_DY.idealTransformer2.iPrim[3].im@M // - laptop2.loadBase.i[3].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].im
eq_30 : laptop2.loadBase.i[4].re@ test_DY.idealTransformer2.iPrim[4].re@M // - laptop2.loadBase.i[4].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].re
eq_31 : laptop2.loadBase.i[4].im@ test_DY.idealTransformer2.iPrim[4].im@M // - laptop2.loadBase.i[4].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].im
eq_32 : laptop2.loadBase.i[5].re@ test_DY.idealTransformer2.iPrim[5].re@M // - laptop2.loadBase.i[5].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].re
eq_33 : laptop2.loadBase.i[5].im@ test_DY.idealTransformer2.iPrim[5].im@M // - laptop2.loadBase.i[5].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].im
eq_34 : laptop2.loadBase.i[6].re@ test_DY.idealTransformer2.iPrim[6].re@M // - laptop2.loadBase.i[6].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].re
eq_35 : laptop2.loadBase.i[6].im@ test_DY.idealTransformer2.iPrim[6].im@M // - laptop2.loadBase.i[6].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].im
eq_36 : laptop2.loadBase.i[7].re@ test_DY.idealTransformer2.iPrim[7].re@M // - laptop2.loadBase.i[7].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].re
eq_37 : laptop2.loadBase.i[7].im@ test_DY.idealTransformer2.iPrim[7].im@M // - laptop2.loadBase.i[7].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].im
eq_38 : laptop2.loadBase.i[8].re@ test_DY.idealTransformer2.iPrim[8].re@M // - laptop2.loadBase.i[8].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].re
eq_39 : laptop2.loadBase.i[8].im@ test_DY.idealTransformer2.iPrim[8].im@M // - laptop2.loadBase.i[8].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@M // laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
eq_41 : laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@M // laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re@M laptop2.c[1]@ // laptop2.loadBase.i[2].re = laptop2.c[1] * laptop2.a[1].re
eq_43 : laptop2.loadBase.i[2].im@M laptop2.c[1]@ // laptop2.loadBase.i[2].im = laptop2.c[1] * laptop2.a[1].im
eq_44 : laptop2.loadBase.i[3].re@M laptop2.c[2]@ // laptop2.loadBase.i[3].re = laptop2.c[2] * laptop2.a[2].re
eq_45 : laptop2.loadBase.i[3].im@M laptop2.c[2]@ // laptop2.loadBase.i[3].im = laptop2.c[2] * laptop2.a[2].im
eq_46 : laptop2.loadBase.i[4].re@M laptop2.c[3]@ // laptop2.loadBase.i[4].re = laptop2.c[3] * laptop2.a[3].re
eq_47 : laptop2.loadBase.i[4].im@M laptop2.c[3]@ // laptop2.loadBase.i[4].im = laptop2.c[3] * laptop2.a[3].im
eq_48 : laptop2.loadBase.i[5].re@M laptop2.c[4]@ // laptop2.loadBase.i[5].re = laptop2.c[4] * laptop2.a[4].re
eq_49 : laptop2.loadBase.i[5].im@M laptop2.c[4]@ // laptop2.loadBase.i[5].im = laptop2.c[4] * laptop2.a[4].im
eq_50 : laptop2.loadBase.i[6].re@M laptop2.c[5]@ // laptop2.loadBase.i[6].re = laptop2.c[5] * laptop2.a[5].re
eq_51 : laptop2.loadBase.i[6].im@M laptop2.c[5]@ // laptop2.loadBase.i[6].im = laptop2.c[5] * laptop2.a[5].im
eq_52 : laptop2.loadBase.i[7].re@M laptop2.c[6]@ // laptop2.loadBase.i[7].re = laptop2.c[6] * laptop2.a[6].re
eq_53 : laptop2.loadBase.i[7].im@M laptop2.c[6]@ // laptop2.loadBase.i[7].im = laptop2.c[6] * laptop2.a[6].im
eq_54 : laptop2.loadBase.i[8].re@M laptop2.c[7]@ // laptop2.loadBase.i[8].re = laptop2.c[7] * laptop2.a[7].re
eq_55 : laptop2.loadBase.i[8].im@M laptop2.c[7]@ // laptop2.loadBase.i[8].im = laptop2.c[7] * laptop2.a[7].im
eq_56 : // algorithm

eq_57 : laptop2.loadBase.omega@M der(PhA.theta)@ // laptop2.loadBase.omega = der(PhA.theta)
eq_58 : led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@M // led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
eq_59 : led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@M // led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re@M led_driver.c[1]@ // led_driver.loadBase.i[2].re = led_driver.c[1] * led_driver.a[1].re
eq_61 : led_driver.loadBase.i[2].im@M led_driver.c[1]@ // led_driver.loadBase.i[2].im = led_driver.c[1] * led_driver.a[1].im
eq_62 : led_driver.loadBase.i[3].re@M led_driver.c[2]@ // led_driver.loadBase.i[3].re = led_driver.c[2] * led_driver.a[2].re
eq_63 : led_driver.loadBase.i[3].im@M led_driver.c[2]@ // led_driver.loadBase.i[3].im = led_driver.c[2] * led_driver.a[2].im
eq_64 : led_driver.loadBase.i[4].re@M led_driver.c[3]@ // led_driver.loadBase.i[4].re = led_driver.c[3] * led_driver.a[3].re
eq_65 : led_driver.loadBase.i[4].im@M led_driver.c[3]@ // led_driver.loadBase.i[4].im = led_driver.c[3] * led_driver.a[3].im
eq_66 : led_driver.loadBase.i[5].re@M led_driver.c[4]@ // led_driver.loadBase.i[5].re = led_driver.c[4] * led_driver.a[4].re
eq_67 : led_driver.loadBase.i[5].im@M led_driver.c[4]@ // led_driver.loadBase.i[5].im = led_driver.c[4] * led_driver.a[4].im
eq_68 : led_driver.loadBase.i[6].re@M led_driver.c[5]@ // led_driver.loadBase.i[6].re = led_driver.c[5] * led_driver.a[5].re
eq_69 : led_driver.loadBase.i[6].im@M led_driver.c[5]@ // led_driver.loadBase.i[6].im = led_driver.c[5] * led_driver.a[5].im
eq_70 : led_driver.loadBase.i[7].re@M led_driver.c[6]@ // led_driver.loadBase.i[7].re = led_driver.c[6] * led_driver.a[6].re
eq_71 : led_driver.loadBase.i[7].im@M led_driver.c[6]@ // led_driver.loadBase.i[7].im = led_driver.c[6] * led_driver.a[6].im
eq_72 : led_driver.loadBase.i[8].re@M led_driver.c[7]@ // led_driver.loadBase.i[8].re = led_driver.c[7] * led_driver.a[7].re
eq_73 : led_driver.loadBase.i[8].im@M led_driver.c[7]@ // led_driver.loadBase.i[8].im = led_driver.c[7] * led_driver.a[7].im
eq_74 : // algorithm

eq_75 : led_driver.loadBase.omega@M der(PhA.theta)@ // led_driver.loadBase.omega = der(PhA.theta)
eq_76 : r.omega@M der(PhA.theta)@ // r.omega = der(PhA.theta)
eq_77 : PhA.i[1].im@ PhB.i[1].im@ PhC.i[1].im@ ground.pin.iIm[1]@M // - PhA.i[1].im + (- PhB.i[1].im) + (- PhC.i[1].im) + ground.pin.iIm[1] = 0
eq_78 : PhA.i[2].im@ PhB.i[2].im@ PhC.i[2].im@ ground.pin.iIm[2]@M // - PhA.i[2].im + (- PhB.i[2].im) + (- PhC.i[2].im) + ground.pin.iIm[2] = 0
eq_79 : PhA.i[3].im@ PhB.i[3].im@ PhC.i[3].im@ ground.pin.iIm[3]@M // - PhA.i[3].im + (- PhB.i[3].im) + (- PhC.i[3].im) + ground.pin.iIm[3] = 0
eq_80 : PhA.i[4].im@ PhB.i[4].im@ PhC.i[4].im@ ground.pin.iIm[4]@M // - PhA.i[4].im + (- PhB.i[4].im) + (- PhC.i[4].im) + ground.pin.iIm[4] = 0
eq_81 : PhA.i[5].im@ PhB.i[5].im@ PhC.i[5].im@ ground.pin.iIm[5]@M // - PhA.i[5].im + (- PhB.i[5].im) + (- PhC.i[5].im) + ground.pin.iIm[5] = 0
eq_82 : PhA.i[6].im@ PhB.i[6].im@ PhC.i[6].im@ ground.pin.iIm[6]@M // - PhA.i[6].im + (- PhB.i[6].im) + (- PhC.i[6].im) + ground.pin.iIm[6] = 0
eq_83 : PhA.i[7].im@ PhB.i[7].im@ PhC.i[7].im@ ground.pin.iIm[7]@M // - PhA.i[7].im + (- PhB.i[7].im) + (- PhC.i[7].im) + ground.pin.iIm[7] = 0
eq_84 : PhA.i[8].im@ PhB.i[8].im@ PhC.i[8].im@ ground.pin.iIm[8]@M // - PhA.i[8].im + (- PhB.i[8].im) + (- PhC.i[8].im) + ground.pin.iIm[8] = 0
eq_85 : PhA.i[1].re@ PhB.i[1].re@ PhC.i[1].re@ ground.pin.iRe[1]@M // - PhA.i[1].re + (- PhB.i[1].re) + (- PhC.i[1].re) + ground.pin.iRe[1] = 0
eq_86 : PhA.i[2].re@ PhB.i[2].re@ PhC.i[2].re@ ground.pin.iRe[2]@M // - PhA.i[2].re + (- PhB.i[2].re) + (- PhC.i[2].re) + ground.pin.iRe[2] = 0
eq_87 : PhA.i[3].re@ PhB.i[3].re@ PhC.i[3].re@ ground.pin.iRe[3]@M // - PhA.i[3].re + (- PhB.i[3].re) + (- PhC.i[3].re) + ground.pin.iRe[3] = 0
eq_88 : PhA.i[4].re@ PhB.i[4].re@ PhC.i[4].re@ ground.pin.iRe[4]@M // - PhA.i[4].re + (- PhB.i[4].re) + (- PhC.i[4].re) + ground.pin.iRe[4] = 0
eq_89 : PhA.i[5].re@ PhB.i[5].re@ PhC.i[5].re@ ground.pin.iRe[5]@M // - PhA.i[5].re + (- PhB.i[5].re) + (- PhC.i[5].re) + ground.pin.iRe[5] = 0
eq_90 : PhA.i[6].re@ PhB.i[6].re@ PhC.i[6].re@ ground.pin.iRe[6]@M // - PhA.i[6].re + (- PhB.i[6].re) + (- PhC.i[6].re) + ground.pin.iRe[6] = 0
eq_91 : PhA.i[7].re@ PhB.i[7].re@ PhC.i[7].re@ ground.pin.iRe[7]@M // - PhA.i[7].re + (- PhB.i[7].re) + (- PhC.i[7].re) + ground.pin.iRe[7] = 0
eq_92 : PhA.i[8].re@ PhB.i[8].re@ PhC.i[8].re@ ground.pin.iRe[8]@M // - PhA.i[8].re + (- PhB.i[8].re) + (- PhC.i[8].re) + ground.pin.iRe[8] = 0
eq_93 : ground1.pin.iIm[1]@ laptop2.loadBase.i[1].im@ led_driver.loadBase.i[1].im@ test_DY.hPin_N.iIm[1]@M // ground1.pin.iIm[1] + (- laptop2.loadBase.i[1].im) + (- led_driver.loadBase.i[1].im) + (- r.i[1].im) + test_DY.hPin_N.iIm[1] = 0
eq_94 : ground1.pin.iIm[2]@ laptop2.loadBase.i[2].im@ led_driver.loadBase.i[2].im@ test_DY.hPin_N.iIm[2]@M // ground1.pin.iIm[2] + (- laptop2.loadBase.i[2].im) + (- led_driver.loadBase.i[2].im) + (- r.i[2].im) + test_DY.hPin_N.iIm[2] = 0
eq_95 : ground1.pin.iIm[3]@ laptop2.loadBase.i[3].im@ led_driver.loadBase.i[3].im@ test_DY.hPin_N.iIm[3]@M // ground1.pin.iIm[3] + (- laptop2.loadBase.i[3].im) + (- led_driver.loadBase.i[3].im) + (- r.i[3].im) + test_DY.hPin_N.iIm[3] = 0
eq_96 : ground1.pin.iIm[4]@ laptop2.loadBase.i[4].im@ led_driver.loadBase.i[4].im@ test_DY.hPin_N.iIm[4]@M // ground1.pin.iIm[4] + (- laptop2.loadBase.i[4].im) + (- led_driver.loadBase.i[4].im) + (- r.i[4].im) + test_DY.hPin_N.iIm[4] = 0
eq_97 : ground1.pin.iIm[5]@ laptop2.loadBase.i[5].im@ led_driver.loadBase.i[5].im@ test_DY.hPin_N.iIm[5]@M // ground1.pin.iIm[5] + (- laptop2.loadBase.i[5].im) + (- led_driver.loadBase.i[5].im) + (- r.i[5].im) + test_DY.hPin_N.iIm[5] = 0
eq_98 : ground1.pin.iIm[6]@ laptop2.loadBase.i[6].im@ led_driver.loadBase.i[6].im@ test_DY.hPin_N.iIm[6]@M // ground1.pin.iIm[6] + (- laptop2.loadBase.i[6].im) + (- led_driver.loadBase.i[6].im) + (- r.i[6].im) + test_DY.hPin_N.iIm[6] = 0
eq_99 : ground1.pin.iIm[7]@ laptop2.loadBase.i[7].im@ led_driver.loadBase.i[7].im@ test_DY.hPin_N.iIm[7]@M // ground1.pin.iIm[7] + (- laptop2.loadBase.i[7].im) + (- led_driver.loadBase.i[7].im) + (- r.i[7].im) + test_DY.hPin_N.iIm[7] = 0
eq_100 : ground1.pin.iIm[8]@ laptop2.loadBase.i[8].im@ led_driver.loadBase.i[8].im@ test_DY.hPin_N.iIm[8]@M // ground1.pin.iIm[8] + (- laptop2.loadBase.i[8].im) + (- led_driver.loadBase.i[8].im) + (- r.i[8].im) + test_DY.hPin_N.iIm[8] = 0
eq_101 : ground1.pin.iRe[1]@ laptop2.loadBase.i[1].re@ led_driver.loadBase.i[1].re@ test_DY.hPin_N.iRe[1]@M // ground1.pin.iRe[1] + (- laptop2.loadBase.i[1].re) + (- led_driver.loadBase.i[1].re) + (- r.i[1].re) + test_DY.hPin_N.iRe[1] = 0
eq_102 : ground1.pin.iRe[2]@ laptop2.loadBase.i[2].re@ led_driver.loadBase.i[2].re@ test_DY.hPin_N.iRe[2]@M // ground1.pin.iRe[2] + (- laptop2.loadBase.i[2].re) + (- led_driver.loadBase.i[2].re) + (- r.i[2].re) + test_DY.hPin_N.iRe[2] = 0
eq_103 : ground1.pin.iRe[3]@ laptop2.loadBase.i[3].re@ led_driver.loadBase.i[3].re@ test_DY.hPin_N.iRe[3]@M // ground1.pin.iRe[3] + (- laptop2.loadBase.i[3].re) + (- led_driver.loadBase.i[3].re) + (- r.i[3].re) + test_DY.hPin_N.iRe[3] = 0
eq_104 : ground1.pin.iRe[4]@ laptop2.loadBase.i[4].re@ led_driver.loadBase.i[4].re@ test_DY.hPin_N.iRe[4]@M // ground1.pin.iRe[4] + (- laptop2.loadBase.i[4].re) + (- led_driver.loadBase.i[4].re) + (- r.i[4].re) + test_DY.hPin_N.iRe[4] = 0
eq_105 : ground1.pin.iRe[5]@ laptop2.loadBase.i[5].re@ led_driver.loadBase.i[5].re@ test_DY.hPin_N.iRe[5]@M // ground1.pin.iRe[5] + (- laptop2.loadBase.i[5].re) + (- led_driver.loadBase.i[5].re) + (- r.i[5].re) + test_DY.hPin_N.iRe[5] = 0
eq_106 : ground1.pin.iRe[6]@ laptop2.loadBase.i[6].re@ led_driver.loadBase.i[6].re@ test_DY.hPin_N.iRe[6]@M // ground1.pin.iRe[6] + (- laptop2.loadBase.i[6].re) + (- led_driver.loadBase.i[6].re) + (- r.i[6].re) + test_DY.hPin_N.iRe[6] = 0
eq_107 : ground1.pin.iRe[7]@ laptop2.loadBase.i[7].re@ led_driver.loadBase.i[7].re@ test_DY.hPin_N.iRe[7]@M // ground1.pin.iRe[7] + (- laptop2.loadBase.i[7].re) + (- led_driver.loadBase.i[7].re) + (- r.i[7].re) + test_DY.hPin_N.iRe[7] = 0
eq_108 : ground1.pin.iRe[8]@ laptop2.loadBase.i[8].re@ led_driver.loadBase.i[8].re@ test_DY.hPin_N.iRe[8]@M // ground1.pin.iRe[8] + (- laptop2.loadBase.i[8].re) + (- led_driver.loadBase.i[8].re) + (- r.i[8].re) + test_DY.hPin_N.iRe[8] = 0
eq_109 : test_DY.idealTransformer1.iPrim[1].im@ test_DY.idealTransformer2.iPrim[1].im@ PhA.i[1].im@M // test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer2.iPrim[1].im) + PhA.i[1].im = 0
eq_110 : test_DY.idealTransformer1.iPrim[2].im@ test_DY.idealTransformer2.iPrim[2].im@ PhA.i[2].im@M // test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer2.iPrim[2].im) + PhA.i[2].im = 0
eq_111 : test_DY.idealTransformer1.iPrim[3].im@ test_DY.idealTransformer2.iPrim[3].im@ PhA.i[3].im@M // test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer2.iPrim[3].im) + PhA.i[3].im = 0
eq_112 : test_DY.idealTransformer1.iPrim[4].im@ test_DY.idealTransformer2.iPrim[4].im@ PhA.i[4].im@M // test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer2.iPrim[4].im) + PhA.i[4].im = 0
eq_113 : test_DY.idealTransformer1.iPrim[5].im@ test_DY.idealTransformer2.iPrim[5].im@ PhA.i[5].im@M // test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer2.iPrim[5].im) + PhA.i[5].im = 0
eq_114 : test_DY.idealTransformer1.iPrim[6].im@ test_DY.idealTransformer2.iPrim[6].im@ PhA.i[6].im@M // test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer2.iPrim[6].im) + PhA.i[6].im = 0
eq_115 : test_DY.idealTransformer1.iPrim[7].im@ test_DY.idealTransformer2.iPrim[7].im@ PhA.i[7].im@M // test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer2.iPrim[7].im) + PhA.i[7].im = 0
eq_116 : test_DY.idealTransformer1.iPrim[8].im@ test_DY.idealTransformer2.iPrim[8].im@ PhA.i[8].im@M // test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer2.iPrim[8].im) + PhA.i[8].im = 0
eq_117 : test_DY.idealTransformer1.iPrim[1].re@ test_DY.idealTransformer2.iPrim[1].re@ PhA.i[1].re@M // test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer2.iPrim[1].re) + PhA.i[1].re = 0
eq_118 : test_DY.idealTransformer1.iPrim[2].re@ test_DY.idealTransformer2.iPrim[2].re@ PhA.i[2].re@M // test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer2.iPrim[2].re) + PhA.i[2].re = 0
eq_119 : test_DY.idealTransformer1.iPrim[3].re@ test_DY.idealTransformer2.iPrim[3].re@ PhA.i[3].re@M // test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer2.iPrim[3].re) + PhA.i[3].re = 0
eq_120 : test_DY.idealTransformer1.iPrim[4].re@ test_DY.idealTransformer2.iPrim[4].re@ PhA.i[4].re@M // test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer2.iPrim[4].re) + PhA.i[4].re = 0
eq_121 : test_DY.idealTransformer1.iPrim[5].re@ test_DY.idealTransformer2.iPrim[5].re@ PhA.i[5].re@M // test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer2.iPrim[5].re) + PhA.i[5].re = 0
eq_122 : test_DY.idealTransformer1.iPrim[6].re@ test_DY.idealTransformer2.iPrim[6].re@ PhA.i[6].re@M // test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer2.iPrim[6].re) + PhA.i[6].re = 0
eq_123 : test_DY.idealTransformer1.iPrim[7].re@ test_DY.idealTransformer2.iPrim[7].re@ PhA.i[7].re@M // test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer2.iPrim[7].re) + PhA.i[7].re = 0
eq_124 : test_DY.idealTransformer1.iPrim[8].re@ test_DY.idealTransformer2.iPrim[8].re@ PhA.i[8].re@M // test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer2.iPrim[8].re) + PhA.i[8].re = 0
eq_125 : test_DY.idealTransformer1.iPrim[1].im@ PhC.i[1].im@M // - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im + PhC.i[1].im = 0
eq_126 : test_DY.idealTransformer1.iPrim[2].im@ PhC.i[2].im@M // - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im + PhC.i[2].im = 0
eq_127 : test_DY.idealTransformer1.iPrim[3].im@ PhC.i[3].im@M // - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im + PhC.i[3].im = 0
eq_128 : test_DY.idealTransformer1.iPrim[4].im@ PhC.i[4].im@M // - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im + PhC.i[4].im = 0
eq_129 : test_DY.idealTransformer1.iPrim[5].im@ PhC.i[5].im@M // - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im + PhC.i[5].im = 0
eq_130 : test_DY.idealTransformer1.iPrim[6].im@ PhC.i[6].im@M // - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im + PhC.i[6].im = 0
eq_131 : test_DY.idealTransformer1.iPrim[7].im@ PhC.i[7].im@M // - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im + PhC.i[7].im = 0
eq_132 : test_DY.idealTransformer1.iPrim[8].im@ PhC.i[8].im@M // - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im + PhC.i[8].im = 0
eq_133 : test_DY.idealTransformer1.iPrim[1].re@ PhC.i[1].re@M // - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re + PhC.i[1].re = 0
eq_134 : test_DY.idealTransformer1.iPrim[2].re@ PhC.i[2].re@M // - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re + PhC.i[2].re = 0
eq_135 : test_DY.idealTransformer1.iPrim[3].re@ PhC.i[3].re@M // - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re + PhC.i[3].re = 0
eq_136 : test_DY.idealTransformer1.iPrim[4].re@ PhC.i[4].re@M // - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re + PhC.i[4].re = 0
eq_137 : test_DY.idealTransformer1.iPrim[5].re@ PhC.i[5].re@M // - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re + PhC.i[5].re = 0
eq_138 : test_DY.idealTransformer1.iPrim[6].re@ PhC.i[6].re@M // - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re + PhC.i[6].re = 0
eq_139 : test_DY.idealTransformer1.iPrim[7].re@ PhC.i[7].re@M // - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re + PhC.i[7].re = 0
eq_140 : test_DY.idealTransformer1.iPrim[8].re@ PhC.i[8].re@M // - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re + PhC.i[8].re = 0
eq_141 : test_DY.idealTransformer2.iPrim[1].im@ PhB.i[1].im@M // test_DY.idealTransformer2.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im) + PhB.i[1].im = 0
eq_142 : test_DY.idealTransformer2.iPrim[2].im@ PhB.i[2].im@M // test_DY.idealTransformer2.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im) + PhB.i[2].im = 0
eq_143 : test_DY.idealTransformer2.iPrim[3].im@ PhB.i[3].im@M // test_DY.idealTransformer2.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im) + PhB.i[3].im = 0
eq_144 : test_DY.idealTransformer2.iPrim[4].im@ PhB.i[4].im@M // test_DY.idealTransformer2.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im) + PhB.i[4].im = 0
eq_145 : test_DY.idealTransformer2.iPrim[5].im@ PhB.i[5].im@M // test_DY.idealTransformer2.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im) + PhB.i[5].im = 0
eq_146 : test_DY.idealTransformer2.iPrim[6].im@ PhB.i[6].im@M // test_DY.idealTransformer2.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im) + PhB.i[6].im = 0
eq_147 : test_DY.idealTransformer2.iPrim[7].im@ PhB.i[7].im@M // test_DY.idealTransformer2.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im) + PhB.i[7].im = 0
eq_148 : test_DY.idealTransformer2.iPrim[8].im@ PhB.i[8].im@M // test_DY.idealTransformer2.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im) + PhB.i[8].im = 0
eq_149 : test_DY.idealTransformer2.iPrim[1].re@ PhB.i[1].re@M // test_DY.idealTransformer2.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re) + PhB.i[1].re = 0
eq_150 : test_DY.idealTransformer2.iPrim[2].re@ PhB.i[2].re@M // test_DY.idealTransformer2.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re) + PhB.i[2].re = 0
eq_151 : test_DY.idealTransformer2.iPrim[3].re@ PhB.i[3].re@M // test_DY.idealTransformer2.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re) + PhB.i[3].re = 0
eq_152 : test_DY.idealTransformer2.iPrim[4].re@ PhB.i[4].re@M // test_DY.idealTransformer2.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re) + PhB.i[4].re = 0
eq_153 : test_DY.idealTransformer2.iPrim[5].re@ PhB.i[5].re@M // test_DY.idealTransformer2.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re) + PhB.i[5].re = 0
eq_154 : test_DY.idealTransformer2.iPrim[6].re@ PhB.i[6].re@M // test_DY.idealTransformer2.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re) + PhB.i[6].re = 0
eq_155 : test_DY.idealTransformer2.iPrim[7].re@ PhB.i[7].re@M // test_DY.idealTransformer2.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re) + PhB.i[7].re = 0
eq_156 : test_DY.idealTransformer2.iPrim[8].re@ PhB.i[8].re@M // test_DY.idealTransformer2.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re) + PhB.i[8].re = 0
eq_157 : ground1.pin.iIm[1]@M // 0 = ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]@M // 0 = ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]@M // 0 = ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]@M // 0 = ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]@M // 0 = ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]@M // 0 = ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]@M // 0 = ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]@M // 0 = ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]@M // 0 = ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]@M // 0 = ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]@M // 0 = ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]@M // 0 = ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]@M // 0 = ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]@M // 0 = ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]@M // 0 = ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]@M // 0 = ground1.pin.iRe[8]
eq_173 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_174 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_175 : PhB.theta# PhA.theta# // HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_176 : PhC.theta# PhA.theta# // HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_177 : PhA.theta# // HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_178 : PhB.theta# PhA.theta# // HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))
eq_179 : PhC.theta# PhA.theta# // HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))
eq_180 : PhA.theta# // HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_181 : PhA.theta# // HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_182 : PhA.theta# // HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))
eq_183 : laptop2.I_mag[1]@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.I_mag[1] = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_184 : laptop2.I_mag[2]@M laptop2.loadBase.i[2].re@ laptop2.loadBase.i[2].im@ // laptop2.I_mag[2] = (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5
eq_185 : laptop2.I_mag[3]@M laptop2.loadBase.i[3].re@ laptop2.loadBase.i[3].im@ // laptop2.I_mag[3] = (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5
eq_186 : laptop2.I_mag[4]@M laptop2.loadBase.i[4].re@ laptop2.loadBase.i[4].im@ // laptop2.I_mag[4] = (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5
eq_187 : laptop2.I_mag[5]@M laptop2.loadBase.i[5].re@ laptop2.loadBase.i[5].im@ // laptop2.I_mag[5] = (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5
eq_188 : laptop2.I_mag[6]@M laptop2.loadBase.i[6].re@ laptop2.loadBase.i[6].im@ // laptop2.I_mag[6] = (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5
eq_189 : laptop2.I_mag[7]@M laptop2.loadBase.i[7].re@ laptop2.loadBase.i[7].im@ // laptop2.I_mag[7] = (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5
eq_190 : laptop2.I_mag[8]@M laptop2.loadBase.i[8].re@ laptop2.loadBase.i[8].im@ // laptop2.I_mag[8] = (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5
eq_191 : laptop2.I_arg[1]@M laptop2.loadBase.i[1].im@ laptop2.loadBase.i[1].re@ // laptop2.I_arg[1] = Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)
eq_192 : laptop2.I_arg[2]@M laptop2.loadBase.i[2].im@ laptop2.loadBase.i[2].re@ // laptop2.I_arg[2] = Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)
eq_193 : laptop2.I_arg[3]@M laptop2.loadBase.i[3].im@ laptop2.loadBase.i[3].re@ // laptop2.I_arg[3] = Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)
eq_194 : laptop2.I_arg[4]@M laptop2.loadBase.i[4].im@ laptop2.loadBase.i[4].re@ // laptop2.I_arg[4] = Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)
eq_195 : laptop2.I_arg[5]@M laptop2.loadBase.i[5].im@ laptop2.loadBase.i[5].re@ // laptop2.I_arg[5] = Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)
eq_196 : laptop2.I_arg[6]@M laptop2.loadBase.i[6].im@ laptop2.loadBase.i[6].re@ // laptop2.I_arg[6] = Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)
eq_197 : laptop2.I_arg[7]@M laptop2.loadBase.i[7].im@ laptop2.loadBase.i[7].re@ // laptop2.I_arg[7] = Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)
eq_198 : laptop2.I_arg[8]@M laptop2.loadBase.i[8].im@ laptop2.loadBase.i[8].re@ // laptop2.I_arg[8] = Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)
eq_199 : laptop2.magScale@M laptop2.loadBase.i[1].re@ laptop2.loadBase.i[1].im@ // laptop2.magScale = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5
eq_200 : laptop2.c[1]@M laptop2.magScale@ // laptop2.c[1] = laptop2.magScale * 0.9486974344201337
eq_201 : laptop2.c[2]@M laptop2.magScale@ // laptop2.c[2] = laptop2.magScale * 0.9221155376813399
eq_202 : laptop2.c[3]@M laptop2.magScale@ // laptop2.c[3] = laptop2.magScale * 0.8849332521469448
eq_203 : laptop2.c[4]@M laptop2.magScale@ // laptop2.c[4] = laptop2.magScale * 0.8475867045468796
eq_204 : laptop2.c[5]@M laptop2.magScale@ // laptop2.c[5] = laptop2.magScale * 0.7944241839808487
eq_205 : laptop2.c[6]@M laptop2.magScale@ // laptop2.c[6] = laptop2.magScale * 0.7230242274654483
eq_206 : laptop2.c[7]@M laptop2.magScale@ // laptop2.c[7] = laptop2.magScale * 0.6688914048386135
eq_207 : led_driver.I_mag[1]@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.I_mag[1] = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_208 : led_driver.I_mag[2]@M led_driver.loadBase.i[2].re@ led_driver.loadBase.i[2].im@ // led_driver.I_mag[2] = (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5
eq_209 : led_driver.I_mag[3]@M led_driver.loadBase.i[3].re@ led_driver.loadBase.i[3].im@ // led_driver.I_mag[3] = (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5
eq_210 : led_driver.I_mag[4]@M led_driver.loadBase.i[4].re@ led_driver.loadBase.i[4].im@ // led_driver.I_mag[4] = (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5
eq_211 : led_driver.I_mag[5]@M led_driver.loadBase.i[5].re@ led_driver.loadBase.i[5].im@ // led_driver.I_mag[5] = (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5
eq_212 : led_driver.I_mag[6]@M led_driver.loadBase.i[6].re@ led_driver.loadBase.i[6].im@ // led_driver.I_mag[6] = (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5
eq_213 : led_driver.I_mag[7]@M led_driver.loadBase.i[7].re@ led_driver.loadBase.i[7].im@ // led_driver.I_mag[7] = (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5
eq_214 : led_driver.I_mag[8]@M led_driver.loadBase.i[8].re@ led_driver.loadBase.i[8].im@ // led_driver.I_mag[8] = (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5
eq_215 : led_driver.I_arg[1]@M led_driver.loadBase.i[1].im@ led_driver.loadBase.i[1].re@ // led_driver.I_arg[1] = Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)
eq_216 : led_driver.I_arg[2]@M led_driver.loadBase.i[2].im@ led_driver.loadBase.i[2].re@ // led_driver.I_arg[2] = Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)
eq_217 : led_driver.I_arg[3]@M led_driver.loadBase.i[3].im@ led_driver.loadBase.i[3].re@ // led_driver.I_arg[3] = Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)
eq_218 : led_driver.I_arg[4]@M led_driver.loadBase.i[4].im@ led_driver.loadBase.i[4].re@ // led_driver.I_arg[4] = Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)
eq_219 : led_driver.I_arg[5]@M led_driver.loadBase.i[5].im@ led_driver.loadBase.i[5].re@ // led_driver.I_arg[5] = Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)
eq_220 : led_driver.I_arg[6]@M led_driver.loadBase.i[6].im@ led_driver.loadBase.i[6].re@ // led_driver.I_arg[6] = Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)
eq_221 : led_driver.I_arg[7]@M led_driver.loadBase.i[7].im@ led_driver.loadBase.i[7].re@ // led_driver.I_arg[7] = Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)
eq_222 : led_driver.I_arg[8]@M led_driver.loadBase.i[8].im@ led_driver.loadBase.i[8].re@ // led_driver.I_arg[8] = Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)
eq_223 : led_driver.magScale@M led_driver.loadBase.i[1].re@ led_driver.loadBase.i[1].im@ // led_driver.magScale = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5
eq_224 : led_driver.c[1]@M led_driver.magScale@ // led_driver.c[1] = led_driver.magScale * 0.890432111870432
eq_225 : led_driver.c[2]@M led_driver.magScale@ // led_driver.c[2] = led_driver.magScale * 0.7418107134668804
eq_226 : led_driver.c[3]@M led_driver.magScale@ // led_driver.c[3] = led_driver.magScale * 0.567293049298617
eq_227 : led_driver.c[4]@M led_driver.magScale@ // led_driver.c[4] = led_driver.magScale * 0.3936692199400683
eq_228 : led_driver.c[5]@M led_driver.magScale@ // led_driver.c[5] = led_driver.magScale * 0.2525656583874291
eq_229 : led_driver.c[6]@M led_driver.magScale@ // led_driver.c[6] = led_driver.magScale * 0.1565031895698116
eq_230 : led_driver.c[7]@M led_driver.magScale@ // led_driver.c[7] = led_driver.magScale * 0.1085784608235925
eq_231 : // algorithm

eq_232 : PhA.theta@M // PhA.theta = 0
eq_233 : PhB.theta@M // PhB.theta = 0
eq_234 : PhC.theta@M // PhC.theta = 0

Init BiPGraph matching after addition of initial equations
----------------------------------------
BiPGraph matching:
eq_2 : der(PhA.theta)
eq_3 : PhA.omega
eq_4 : der(PhB.theta)
eq_5 : PhB.omega
eq_6 : der(PhC.theta)
eq_7 : PhC.omega
eq_8 : test_DY.idealTransformer1.iPrim[1].re
eq_9 : test_DY.idealTransformer1.iPrim[1].im
eq_10 : test_DY.idealTransformer1.iPrim[2].re
eq_11 : test_DY.idealTransformer1.iPrim[2].im
eq_12 : test_DY.idealTransformer1.iPrim[3].re
eq_13 : test_DY.idealTransformer1.iPrim[3].im
eq_14 : test_DY.idealTransformer1.iPrim[4].re
eq_15 : test_DY.idealTransformer1.iPrim[4].im
eq_16 : test_DY.idealTransformer1.iPrim[5].re
eq_17 : test_DY.idealTransformer1.iPrim[5].im
eq_18 : test_DY.idealTransformer1.iPrim[6].re
eq_19 : test_DY.idealTransformer1.iPrim[6].im
eq_20 : test_DY.idealTransformer1.iPrim[7].re
eq_21 : test_DY.idealTransformer1.iPrim[7].im
eq_22 : test_DY.idealTransformer1.iPrim[8].re
eq_23 : test_DY.idealTransformer1.iPrim[8].im
eq_24 : test_DY.idealTransformer2.iPrim[1].re
eq_25 : test_DY.idealTransformer2.iPrim[1].im
eq_26 : test_DY.idealTransformer2.iPrim[2].re
eq_27 : test_DY.idealTransformer2.iPrim[2].im
eq_28 : test_DY.idealTransformer2.iPrim[3].re
eq_29 : test_DY.idealTransformer2.iPrim[3].im
eq_30 : test_DY.idealTransformer2.iPrim[4].re
eq_31 : test_DY.idealTransformer2.iPrim[4].im
eq_32 : test_DY.idealTransformer2.iPrim[5].re
eq_33 : test_DY.idealTransformer2.iPrim[5].im
eq_34 : test_DY.idealTransformer2.iPrim[6].re
eq_35 : test_DY.idealTransformer2.iPrim[6].im
eq_36 : test_DY.idealTransformer2.iPrim[7].re
eq_37 : test_DY.idealTransformer2.iPrim[7].im
eq_38 : test_DY.idealTransformer2.iPrim[8].re
eq_39 : test_DY.idealTransformer2.iPrim[8].im
eq_40 : laptop2.loadBase.i[1].im
eq_41 : laptop2.loadBase.i[1].re
eq_42 : laptop2.loadBase.i[2].re
eq_43 : laptop2.loadBase.i[2].im
eq_44 : laptop2.loadBase.i[3].re
eq_45 : laptop2.loadBase.i[3].im
eq_46 : laptop2.loadBase.i[4].re
eq_47 : laptop2.loadBase.i[4].im
eq_48 : laptop2.loadBase.i[5].re
eq_49 : laptop2.loadBase.i[5].im
eq_50 : laptop2.loadBase.i[6].re
eq_51 : laptop2.loadBase.i[6].im
eq_52 : laptop2.loadBase.i[7].re
eq_53 : laptop2.loadBase.i[7].im
eq_54 : laptop2.loadBase.i[8].re
eq_55 : laptop2.loadBase.i[8].im
eq_57 : laptop2.loadBase.omega
eq_58 : led_driver.loadBase.i[1].im
eq_59 : led_driver.loadBase.i[1].re
eq_60 : led_driver.loadBase.i[2].re
eq_61 : led_driver.loadBase.i[2].im
eq_62 : led_driver.loadBase.i[3].re
eq_63 : led_driver.loadBase.i[3].im
eq_64 : led_driver.loadBase.i[4].re
eq_65 : led_driver.loadBase.i[4].im
eq_66 : led_driver.loadBase.i[5].re
eq_67 : led_driver.loadBase.i[5].im
eq_68 : led_driver.loadBase.i[6].re
eq_69 : led_driver.loadBase.i[6].im
eq_70 : led_driver.loadBase.i[7].re
eq_71 : led_driver.loadBase.i[7].im
eq_72 : led_driver.loadBase.i[8].re
eq_73 : led_driver.loadBase.i[8].im
eq_75 : led_driver.loadBase.omega
eq_76 : r.omega
eq_77 : ground.pin.iIm[1]
eq_78 : ground.pin.iIm[2]
eq_79 : ground.pin.iIm[3]
eq_80 : ground.pin.iIm[4]
eq_81 : ground.pin.iIm[5]
eq_82 : ground.pin.iIm[6]
eq_83 : ground.pin.iIm[7]
eq_84 : ground.pin.iIm[8]
eq_85 : ground.pin.iRe[1]
eq_86 : ground.pin.iRe[2]
eq_87 : ground.pin.iRe[3]
eq_88 : ground.pin.iRe[4]
eq_89 : ground.pin.iRe[5]
eq_90 : ground.pin.iRe[6]
eq_91 : ground.pin.iRe[7]
eq_92 : ground.pin.iRe[8]
eq_93 : test_DY.hPin_N.iIm[1]
eq_94 : test_DY.hPin_N.iIm[2]
eq_95 : test_DY.hPin_N.iIm[3]
eq_96 : test_DY.hPin_N.iIm[4]
eq_97 : test_DY.hPin_N.iIm[5]
eq_98 : test_DY.hPin_N.iIm[6]
eq_99 : test_DY.hPin_N.iIm[7]
eq_100 : test_DY.hPin_N.iIm[8]
eq_101 : test_DY.hPin_N.iRe[1]
eq_102 : test_DY.hPin_N.iRe[2]
eq_103 : test_DY.hPin_N.iRe[3]
eq_104 : test_DY.hPin_N.iRe[4]
eq_105 : test_DY.hPin_N.iRe[5]
eq_106 : test_DY.hPin_N.iRe[6]
eq_107 : test_DY.hPin_N.iRe[7]
eq_108 : test_DY.hPin_N.iRe[8]
eq_109 : PhA.i[1].im
eq_110 : PhA.i[2].im
eq_111 : PhA.i[3].im
eq_112 : PhA.i[4].im
eq_113 : PhA.i[5].im
eq_114 : PhA.i[6].im
eq_115 : PhA.i[7].im
eq_116 : PhA.i[8].im
eq_117 : PhA.i[1].re
eq_118 : PhA.i[2].re
eq_119 : PhA.i[3].re
eq_120 : PhA.i[4].re
eq_121 : PhA.i[5].re
eq_122 : PhA.i[6].re
eq_123 : PhA.i[7].re
eq_124 : PhA.i[8].re
eq_125 : PhC.i[1].im
eq_126 : PhC.i[2].im
eq_127 : PhC.i[3].im
eq_128 : PhC.i[4].im
eq_129 : PhC.i[5].im
eq_130 : PhC.i[6].im
eq_131 : PhC.i[7].im
eq_132 : PhC.i[8].im
eq_133 : PhC.i[1].re
eq_134 : PhC.i[2].re
eq_135 : PhC.i[3].re
eq_136 : PhC.i[4].re
eq_137 : PhC.i[5].re
eq_138 : PhC.i[6].re
eq_139 : PhC.i[7].re
eq_140 : PhC.i[8].re
eq_141 : PhB.i[1].im
eq_142 : PhB.i[2].im
eq_143 : PhB.i[3].im
eq_144 : PhB.i[4].im
eq_145 : PhB.i[5].im
eq_146 : PhB.i[6].im
eq_147 : PhB.i[7].im
eq_148 : PhB.i[8].im
eq_149 : PhB.i[1].re
eq_150 : PhB.i[2].re
eq_151 : PhB.i[3].re
eq_152 : PhB.i[4].re
eq_153 : PhB.i[5].re
eq_154 : PhB.i[6].re
eq_155 : PhB.i[7].re
eq_156 : PhB.i[8].re
eq_157 : ground1.pin.iIm[1]
eq_158 : ground1.pin.iIm[2]
eq_159 : ground1.pin.iIm[3]
eq_160 : ground1.pin.iIm[4]
eq_161 : ground1.pin.iIm[5]
eq_162 : ground1.pin.iIm[6]
eq_163 : ground1.pin.iIm[7]
eq_164 : ground1.pin.iIm[8]
eq_165 : ground1.pin.iRe[1]
eq_166 : ground1.pin.iRe[2]
eq_167 : ground1.pin.iRe[3]
eq_168 : ground1.pin.iRe[4]
eq_169 : ground1.pin.iRe[5]
eq_170 : ground1.pin.iRe[6]
eq_171 : ground1.pin.iRe[7]
eq_172 : ground1.pin.iRe[8]
eq_183 : laptop2.I_mag[1]
eq_184 : laptop2.I_mag[2]
eq_185 : laptop2.I_mag[3]
eq_186 : laptop2.I_mag[4]
eq_187 : laptop2.I_mag[5]
eq_188 : laptop2.I_mag[6]
eq_189 : laptop2.I_mag[7]
eq_190 : laptop2.I_mag[8]
eq_191 : laptop2.I_arg[1]
eq_192 : laptop2.I_arg[2]
eq_193 : laptop2.I_arg[3]
eq_194 : laptop2.I_arg[4]
eq_195 : laptop2.I_arg[5]
eq_196 : laptop2.I_arg[6]
eq_197 : laptop2.I_arg[7]
eq_198 : laptop2.I_arg[8]
eq_199 : laptop2.magScale
eq_200 : laptop2.c[1]
eq_201 : laptop2.c[2]
eq_202 : laptop2.c[3]
eq_203 : laptop2.c[4]
eq_204 : laptop2.c[5]
eq_205 : laptop2.c[6]
eq_206 : laptop2.c[7]
eq_207 : led_driver.I_mag[1]
eq_208 : led_driver.I_mag[2]
eq_209 : led_driver.I_mag[3]
eq_210 : led_driver.I_mag[4]
eq_211 : led_driver.I_mag[5]
eq_212 : led_driver.I_mag[6]
eq_213 : led_driver.I_mag[7]
eq_214 : led_driver.I_mag[8]
eq_215 : led_driver.I_arg[1]
eq_216 : led_driver.I_arg[2]
eq_217 : led_driver.I_arg[3]
eq_218 : led_driver.I_arg[4]
eq_219 : led_driver.I_arg[5]
eq_220 : led_driver.I_arg[6]
eq_221 : led_driver.I_arg[7]
eq_222 : led_driver.I_arg[8]
eq_223 : led_driver.magScale
eq_224 : led_driver.c[1]
eq_225 : led_driver.c[2]
eq_226 : led_driver.c[3]
eq_227 : led_driver.c[4]
eq_228 : led_driver.c[5]
eq_229 : led_driver.c[6]
eq_230 : led_driver.c[7]
eq_232 : PhA.theta
eq_233 : PhB.theta
eq_234 : PhC.theta
Unmatched equations: {}
Unmatched variables: {}
----------------------------------------

Initial system contains homotopy, computing homotopy block components...
... block components computed: []
Starting automatic tearing
BiPGraph (2 equations, 2 variables)
Variables: {led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re }
eq_58 : led_driver.loadBase.i[1].re# led_driver.loadBase.i[1].im# // led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
eq_59 : led_driver.loadBase.i[1].im# led_driver.loadBase.i[1].re# // led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re

Initial matching
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_58 eq_59 }
Unmatched variables: {led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re }
----------------------------------------

Matching after initial manipulation
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_58 eq_59 }
Unmatched variables: {led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re }
----------------------------------------

Automatic tearing pair, equation: led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im), tearing with variable: led_driver.loadBase.i[1].im
Automatic tearing pair, equation: led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re, tearing with variable: led_driver.loadBase.i[1].re
Starting automatic tearing
BiPGraph (2 equations, 2 variables)
Variables: {laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re }
eq_40 : laptop2.loadBase.i[1].re# laptop2.loadBase.i[1].im# // laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
eq_41 : laptop2.loadBase.i[1].im# laptop2.loadBase.i[1].re# // laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re

Initial matching
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_40 eq_41 }
Unmatched variables: {laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re }
----------------------------------------

Matching after initial manipulation
----------------------------------------
BiPGraph matching:
Unmatched equations: {eq_40 eq_41 }
Unmatched variables: {laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re }
----------------------------------------

Automatic tearing pair, equation: laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im), tearing with variable: laptop2.loadBase.i[1].im
Automatic tearing pair, equation: laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re, tearing with variable: laptop2.loadBase.i[1].re
--- Meta equation block ---
algorithm


--- Solved equation ---
der(PhA.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
PhA.omega := der(PhA.theta)

--- Solved equation ---
der(PhB.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
PhB.omega := der(PhB.theta)

--- Solved equation ---
der(PhC.theta) := 6.283185307179586 * systemDef.fFund

--- Solved equation ---
PhC.omega := der(PhC.theta)

--- Unsolved linear system (Block 1) of 2 variables ---
Coefficient variability: parameter
Unknown variables:
  led_driver.loadBase.i[1].im
  led_driver.loadBase.i[1].re

Equations:
  led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im)
    Iteration variables: led_driver.loadBase.i[1].im
  led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re
    Iteration variables: led_driver.loadBase.i[1].re

Jacobian:
  |- led_driver.loadBase.v[1].im, - led_driver.loadBase.v[1].re|
  |led_driver.loadBase.v[1].re, - led_driver.loadBase.v[1].im|

--- Solved equation ---
test_DY.idealTransformer1.iPrim[1].re := led_driver.loadBase.i[1].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
test_DY.idealTransformer1.iPrim[1].im := led_driver.loadBase.i[1].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.magScale := (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.c[1] := led_driver.magScale * 0.890432111870432

--- Solved equation ---
led_driver.loadBase.i[2].re := led_driver.c[1] * led_driver.a[1].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[2].re := led_driver.loadBase.i[2].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[2].im := led_driver.c[1] * led_driver.a[1].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[2].im := led_driver.loadBase.i[2].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[2] := led_driver.magScale * 0.7418107134668804

--- Solved equation ---
led_driver.loadBase.i[3].re := led_driver.c[2] * led_driver.a[2].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[3].re := led_driver.loadBase.i[3].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[3].im := led_driver.c[2] * led_driver.a[2].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[3].im := led_driver.loadBase.i[3].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[3] := led_driver.magScale * 0.567293049298617

--- Solved equation ---
led_driver.loadBase.i[4].re := led_driver.c[3] * led_driver.a[3].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[4].re := led_driver.loadBase.i[4].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[4].im := led_driver.c[3] * led_driver.a[3].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[4].im := led_driver.loadBase.i[4].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[4] := led_driver.magScale * 0.3936692199400683

--- Solved equation ---
led_driver.loadBase.i[5].re := led_driver.c[4] * led_driver.a[4].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[5].re := led_driver.loadBase.i[5].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[5].im := led_driver.c[4] * led_driver.a[4].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[5].im := led_driver.loadBase.i[5].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[5] := led_driver.magScale * 0.2525656583874291

--- Solved equation ---
led_driver.loadBase.i[6].re := led_driver.c[5] * led_driver.a[5].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[6].re := led_driver.loadBase.i[6].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[6].im := led_driver.c[5] * led_driver.a[5].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[6].im := led_driver.loadBase.i[6].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[6] := led_driver.magScale * 0.1565031895698116

--- Solved equation ---
led_driver.loadBase.i[7].re := led_driver.c[6] * led_driver.a[6].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[7].re := led_driver.loadBase.i[7].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[7].im := led_driver.c[6] * led_driver.a[6].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[7].im := led_driver.loadBase.i[7].im / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.c[7] := led_driver.magScale * 0.1085784608235925

--- Solved equation ---
led_driver.loadBase.i[8].re := led_driver.c[7] * led_driver.a[7].re

--- Solved equation ---
test_DY.idealTransformer1.iPrim[8].re := led_driver.loadBase.i[8].re / (- test_DY.idealTransformer1.N)

--- Solved equation ---
led_driver.loadBase.i[8].im := led_driver.c[7] * led_driver.a[7].im

--- Solved equation ---
test_DY.idealTransformer1.iPrim[8].im := led_driver.loadBase.i[8].im / (- test_DY.idealTransformer1.N)

--- Unsolved linear system (Block 2) of 2 variables ---
Coefficient variability: parameter
Unknown variables:
  laptop2.loadBase.i[1].im
  laptop2.loadBase.i[1].re

Equations:
  laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im)
    Iteration variables: laptop2.loadBase.i[1].im
  laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re
    Iteration variables: laptop2.loadBase.i[1].re

Jacobian:
  |- laptop2.loadBase.v[1].im, - laptop2.loadBase.v[1].re|
  |laptop2.loadBase.v[1].re, - laptop2.loadBase.v[1].im|

--- Solved equation ---
test_DY.idealTransformer2.iPrim[1].re := laptop2.loadBase.i[1].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
test_DY.idealTransformer2.iPrim[1].im := laptop2.loadBase.i[1].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.magScale := (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.c[1] := laptop2.magScale * 0.9486974344201337

--- Solved equation ---
laptop2.loadBase.i[2].re := laptop2.c[1] * laptop2.a[1].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[2].re := laptop2.loadBase.i[2].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[2].im := laptop2.c[1] * laptop2.a[1].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[2].im := laptop2.loadBase.i[2].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[2] := laptop2.magScale * 0.9221155376813399

--- Solved equation ---
laptop2.loadBase.i[3].re := laptop2.c[2] * laptop2.a[2].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[3].re := laptop2.loadBase.i[3].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[3].im := laptop2.c[2] * laptop2.a[2].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[3].im := laptop2.loadBase.i[3].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[3] := laptop2.magScale * 0.8849332521469448

--- Solved equation ---
laptop2.loadBase.i[4].re := laptop2.c[3] * laptop2.a[3].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[4].re := laptop2.loadBase.i[4].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[4].im := laptop2.c[3] * laptop2.a[3].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[4].im := laptop2.loadBase.i[4].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[4] := laptop2.magScale * 0.8475867045468796

--- Solved equation ---
laptop2.loadBase.i[5].re := laptop2.c[4] * laptop2.a[4].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[5].re := laptop2.loadBase.i[5].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[5].im := laptop2.c[4] * laptop2.a[4].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[5].im := laptop2.loadBase.i[5].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[5] := laptop2.magScale * 0.7944241839808487

--- Solved equation ---
laptop2.loadBase.i[6].re := laptop2.c[5] * laptop2.a[5].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[6].re := laptop2.loadBase.i[6].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[6].im := laptop2.c[5] * laptop2.a[5].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[6].im := laptop2.loadBase.i[6].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[6] := laptop2.magScale * 0.7230242274654483

--- Solved equation ---
laptop2.loadBase.i[7].re := laptop2.c[6] * laptop2.a[6].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[7].re := laptop2.loadBase.i[7].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[7].im := laptop2.c[6] * laptop2.a[6].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[7].im := laptop2.loadBase.i[7].im / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.c[7] := laptop2.magScale * 0.6688914048386135

--- Solved equation ---
laptop2.loadBase.i[8].re := laptop2.c[7] * laptop2.a[7].re

--- Solved equation ---
test_DY.idealTransformer2.iPrim[8].re := laptop2.loadBase.i[8].re / (- test_DY.idealTransformer2.N)

--- Solved equation ---
laptop2.loadBase.i[8].im := laptop2.c[7] * laptop2.a[7].im

--- Solved equation ---
test_DY.idealTransformer2.iPrim[8].im := laptop2.loadBase.i[8].im / (- test_DY.idealTransformer2.N)

--- Meta equation block ---
algorithm


--- Solved equation ---
laptop2.loadBase.omega := der(PhA.theta)

--- Meta equation block ---
algorithm


--- Solved equation ---
led_driver.loadBase.omega := der(PhA.theta)

--- Solved equation ---
r.omega := der(PhA.theta)

--- Solved equation ---
PhA.i[1].im := - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer2.iPrim[1].im

--- Solved equation ---
PhB.i[1].im := - test_DY.idealTransformer2.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im

--- Solved equation ---
PhC.i[1].im := test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im)

--- Solved equation ---
ground.pin.iIm[1] := PhA.i[1].im + PhB.i[1].im + PhC.i[1].im

--- Solved equation ---
PhA.i[2].im := - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer2.iPrim[2].im

--- Solved equation ---
PhB.i[2].im := - test_DY.idealTransformer2.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im

--- Solved equation ---
PhC.i[2].im := test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im)

--- Solved equation ---
ground.pin.iIm[2] := PhA.i[2].im + PhB.i[2].im + PhC.i[2].im

--- Solved equation ---
PhA.i[3].im := - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer2.iPrim[3].im

--- Solved equation ---
PhB.i[3].im := - test_DY.idealTransformer2.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im

--- Solved equation ---
PhC.i[3].im := test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im)

--- Solved equation ---
ground.pin.iIm[3] := PhA.i[3].im + PhB.i[3].im + PhC.i[3].im

--- Solved equation ---
PhA.i[4].im := - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer2.iPrim[4].im

--- Solved equation ---
PhB.i[4].im := - test_DY.idealTransformer2.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im

--- Solved equation ---
PhC.i[4].im := test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im)

--- Solved equation ---
ground.pin.iIm[4] := PhA.i[4].im + PhB.i[4].im + PhC.i[4].im

--- Solved equation ---
PhA.i[5].im := - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer2.iPrim[5].im

--- Solved equation ---
PhB.i[5].im := - test_DY.idealTransformer2.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im

--- Solved equation ---
PhC.i[5].im := test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im)

--- Solved equation ---
ground.pin.iIm[5] := PhA.i[5].im + PhB.i[5].im + PhC.i[5].im

--- Solved equation ---
PhA.i[6].im := - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer2.iPrim[6].im

--- Solved equation ---
PhB.i[6].im := - test_DY.idealTransformer2.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im

--- Solved equation ---
PhC.i[6].im := test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im)

--- Solved equation ---
ground.pin.iIm[6] := PhA.i[6].im + PhB.i[6].im + PhC.i[6].im

--- Solved equation ---
PhA.i[7].im := - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer2.iPrim[7].im

--- Solved equation ---
PhB.i[7].im := - test_DY.idealTransformer2.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im

--- Solved equation ---
PhC.i[7].im := test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im)

--- Solved equation ---
ground.pin.iIm[7] := PhA.i[7].im + PhB.i[7].im + PhC.i[7].im

--- Solved equation ---
PhA.i[8].im := - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer2.iPrim[8].im

--- Solved equation ---
PhB.i[8].im := - test_DY.idealTransformer2.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im

--- Solved equation ---
PhC.i[8].im := test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im)

--- Solved equation ---
ground.pin.iIm[8] := PhA.i[8].im + PhB.i[8].im + PhC.i[8].im

--- Solved equation ---
PhA.i[1].re := - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer2.iPrim[1].re

--- Solved equation ---
PhB.i[1].re := - test_DY.idealTransformer2.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re

--- Solved equation ---
PhC.i[1].re := test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re)

--- Solved equation ---
ground.pin.iRe[1] := PhA.i[1].re + PhB.i[1].re + PhC.i[1].re

--- Solved equation ---
PhA.i[2].re := - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer2.iPrim[2].re

--- Solved equation ---
PhB.i[2].re := - test_DY.idealTransformer2.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re

--- Solved equation ---
PhC.i[2].re := test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re)

--- Solved equation ---
ground.pin.iRe[2] := PhA.i[2].re + PhB.i[2].re + PhC.i[2].re

--- Solved equation ---
PhA.i[3].re := - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer2.iPrim[3].re

--- Solved equation ---
PhB.i[3].re := - test_DY.idealTransformer2.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re

--- Solved equation ---
PhC.i[3].re := test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re)

--- Solved equation ---
ground.pin.iRe[3] := PhA.i[3].re + PhB.i[3].re + PhC.i[3].re

--- Solved equation ---
PhA.i[4].re := - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer2.iPrim[4].re

--- Solved equation ---
PhB.i[4].re := - test_DY.idealTransformer2.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re

--- Solved equation ---
PhC.i[4].re := test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re)

--- Solved equation ---
ground.pin.iRe[4] := PhA.i[4].re + PhB.i[4].re + PhC.i[4].re

--- Solved equation ---
PhA.i[5].re := - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer2.iPrim[5].re

--- Solved equation ---
PhB.i[5].re := - test_DY.idealTransformer2.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re

--- Solved equation ---
PhC.i[5].re := test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re)

--- Solved equation ---
ground.pin.iRe[5] := PhA.i[5].re + PhB.i[5].re + PhC.i[5].re

--- Solved equation ---
PhA.i[6].re := - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer2.iPrim[6].re

--- Solved equation ---
PhB.i[6].re := - test_DY.idealTransformer2.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re

--- Solved equation ---
PhC.i[6].re := test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re)

--- Solved equation ---
ground.pin.iRe[6] := PhA.i[6].re + PhB.i[6].re + PhC.i[6].re

--- Solved equation ---
PhA.i[7].re := - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer2.iPrim[7].re

--- Solved equation ---
PhB.i[7].re := - test_DY.idealTransformer2.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re

--- Solved equation ---
PhC.i[7].re := test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re)

--- Solved equation ---
ground.pin.iRe[7] := PhA.i[7].re + PhB.i[7].re + PhC.i[7].re

--- Solved equation ---
PhA.i[8].re := - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer2.iPrim[8].re

--- Solved equation ---
PhB.i[8].re := - test_DY.idealTransformer2.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re

--- Solved equation ---
PhC.i[8].re := test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re)

--- Solved equation ---
ground.pin.iRe[8] := PhA.i[8].re + PhB.i[8].re + PhC.i[8].re

--- Solved equation ---
ground1.pin.iIm[1] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[1] := - ground1.pin.iIm[1] + laptop2.loadBase.i[1].im + led_driver.loadBase.i[1].im + r.i[1].im

--- Solved equation ---
ground1.pin.iIm[2] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[2] := - ground1.pin.iIm[2] + laptop2.loadBase.i[2].im + led_driver.loadBase.i[2].im + r.i[2].im

--- Solved equation ---
ground1.pin.iIm[3] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[3] := - ground1.pin.iIm[3] + laptop2.loadBase.i[3].im + led_driver.loadBase.i[3].im + r.i[3].im

--- Solved equation ---
ground1.pin.iIm[4] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[4] := - ground1.pin.iIm[4] + laptop2.loadBase.i[4].im + led_driver.loadBase.i[4].im + r.i[4].im

--- Solved equation ---
ground1.pin.iIm[5] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[5] := - ground1.pin.iIm[5] + laptop2.loadBase.i[5].im + led_driver.loadBase.i[5].im + r.i[5].im

--- Solved equation ---
ground1.pin.iIm[6] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[6] := - ground1.pin.iIm[6] + laptop2.loadBase.i[6].im + led_driver.loadBase.i[6].im + r.i[6].im

--- Solved equation ---
ground1.pin.iIm[7] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[7] := - ground1.pin.iIm[7] + laptop2.loadBase.i[7].im + led_driver.loadBase.i[7].im + r.i[7].im

--- Solved equation ---
ground1.pin.iIm[8] := 0

--- Solved equation ---
test_DY.hPin_N.iIm[8] := - ground1.pin.iIm[8] + laptop2.loadBase.i[8].im + led_driver.loadBase.i[8].im + r.i[8].im

--- Solved equation ---
ground1.pin.iRe[1] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[1] := - ground1.pin.iRe[1] + laptop2.loadBase.i[1].re + led_driver.loadBase.i[1].re + r.i[1].re

--- Solved equation ---
ground1.pin.iRe[2] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[2] := - ground1.pin.iRe[2] + laptop2.loadBase.i[2].re + led_driver.loadBase.i[2].re + r.i[2].re

--- Solved equation ---
ground1.pin.iRe[3] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[3] := - ground1.pin.iRe[3] + laptop2.loadBase.i[3].re + led_driver.loadBase.i[3].re + r.i[3].re

--- Solved equation ---
ground1.pin.iRe[4] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[4] := - ground1.pin.iRe[4] + laptop2.loadBase.i[4].re + led_driver.loadBase.i[4].re + r.i[4].re

--- Solved equation ---
ground1.pin.iRe[5] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[5] := - ground1.pin.iRe[5] + laptop2.loadBase.i[5].re + led_driver.loadBase.i[5].re + r.i[5].re

--- Solved equation ---
ground1.pin.iRe[6] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[6] := - ground1.pin.iRe[6] + laptop2.loadBase.i[6].re + led_driver.loadBase.i[6].re + r.i[6].re

--- Solved equation ---
ground1.pin.iRe[7] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[7] := - ground1.pin.iRe[7] + laptop2.loadBase.i[7].re + led_driver.loadBase.i[7].re + r.i[7].re

--- Solved equation ---
ground1.pin.iRe[8] := 0

--- Solved equation ---
test_DY.hPin_N.iRe[8] := - ground1.pin.iRe[8] + laptop2.loadBase.i[8].re + led_driver.loadBase.i[8].re + r.i[8].re

--- Solved equation ---
PhA.theta := 0

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Solved equation ---
PhB.theta := 0

--- Meta equation block ---
HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))

--- Solved equation ---
PhC.theta := 0

--- Meta equation block ---
HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Meta equation block ---
HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta))

--- Solved equation ---
laptop2.I_mag[1] := (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[2] := (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[3] := (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[4] := (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[5] := (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[6] := (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[7] := (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_mag[8] := (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5

--- Solved equation ---
laptop2.I_arg[1] := Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0)

--- Solved equation ---
laptop2.I_arg[2] := Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0)

--- Solved equation ---
laptop2.I_arg[3] := Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0)

--- Solved equation ---
laptop2.I_arg[4] := Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0)

--- Solved equation ---
laptop2.I_arg[5] := Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0)

--- Solved equation ---
laptop2.I_arg[6] := Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0)

--- Solved equation ---
laptop2.I_arg[7] := Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0)

--- Solved equation ---
laptop2.I_arg[8] := Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0)

--- Solved equation ---
led_driver.I_mag[1] := (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[2] := (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[3] := (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[4] := (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[5] := (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[6] := (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[7] := (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_mag[8] := (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5

--- Solved equation ---
led_driver.I_arg[1] := Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0)

--- Solved equation ---
led_driver.I_arg[2] := Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0)

--- Solved equation ---
led_driver.I_arg[3] := Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0)

--- Solved equation ---
led_driver.I_arg[4] := Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0)

--- Solved equation ---
led_driver.I_arg[5] := Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0)

--- Solved equation ---
led_driver.I_arg[6] := Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0)

--- Solved equation ---
led_driver.I_arg[7] := Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0)

--- Solved equation ---
led_driver.I_arg[8] := Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0)

--- Meta equation block ---
algorithm

-------------------------------

Diagnostics for transformed flattened model:
Diagnostics for flattened class HPF.Examples.Demo
Number of independent constants:                 108(  108 scalars)
  Number of Real independent constants:          100(  100 scalars)
  Number of Real independent constants:          100(  100 scalars)
  Number of Integer independent constants:         0(    0 scalars)
  Number of Enum independent constants:            0(    0 scalars)
  Number of Boolean independent constants:         0(    0 scalars)
  Number of String independent constants:          8(    8 scalars)
Number of dependent constants:                     0(    0 scalars)
  Number of Real dependent constants:              0(    0 scalars)
  Number of Integer dependent constants:           0(    0 scalars)
  Number of Enum dependent constants:              0(    0 scalars)
  Number of Boolean dependent constants:           0(    0 scalars)
  Number of String dependent constants:            0(    0 scalars)
Number of independent parameters:                327(  327 scalars)
  Number of Real independent parameters:         278(  278 scalars)
  Number of Integer independent parameters:       26(   26 scalars)
  Number of Enum independent parameters:           0(    0 scalars)
  Number of Boolean independent parameters:       13(   13 scalars)
  Number of String independent parameters:        10(   10 scalars)
Number of dependent parameters:                  466(  466 scalars)
  Number of Real dependent parameters:           455(  455 scalars)
  Number of Integer dependent parameters:         11(   11 scalars)
  Number of Enum dependent parameters:             0(    0 scalars)
  Number of Boolean dependent parameters:          0(    0 scalars)
  Number of String dependent parameters:           0(    0 scalars)
Number of initial parameters:                      0(    0 scalars)
  Number of Real dependent parameters:             0(    0 scalars)
  Number of Integer dependent parameters:          0(    0 scalars)
  Number of Enum dependent parameters:             0(    0 scalars)
  Number of Boolean dependent parameters:          0(    0 scalars)
  Number of String dependent parameters:           0(    0 scalars)
Number of variables:                             220(  220 scalars)
  Number of Real variables:                      220(  220 scalars)
  Number of Integer variables:                     0(    0 scalars)
  Number of Enum variables:                        0(    0 scalars)
  Number of Boolean variables:                     0(    0 scalars)
  Number of String variables:                      0(    0 scalars)
Number of Real differentiated variables:           3(    3 scalars)
Number of Real derivative variables:               3(    3 scalars)
Number of Real continous algebraic variables:    214(  214 scalars)
Number of inputs:                                  0(    0 scalars)
  Number of Real inputs:                           0(    0 scalars)
  Number of Integer inputs:                        0(    0 scalars)
  Number of Enum inputs:                           0(    0 scalars)
  Number of Boolean inputs:                        0(    0 scalars)
  Number of String inputs:                         0(    0 scalars)
Number of discrete variables:                      0(    0 scalars)
  Number of Real discrete variables:               0(    0 scalars)
  Number of Integer discrete variables:            0(    0 scalars)
  Number of Enum discrete variables:               0(    0 scalars)
  Number of Boolean discrete variables:            0(    0 scalars)
  Number of String discrete variables:             0(    0 scalars)
Number of equations:                             230(  217 scalars)
Number of variables with binding expression:       0(    0 scalars)
  Number of Real variables with binding exp:       0(    0 scalars)
  Number of Integer variables binding exp:         0(    0 scalars)
  Number of Enum variables binding exp:            0(    0 scalars)
  Number of Boolean variables binding exp:         0(    0 scalars)
  Number of String variables binding exp:          0(    0 scalars)
Total number of equations:                       230(  217 scalars)
Number of initial equations:                       4(    3 scalars)
Number of event indicators in equations:           0
Number of event indicators in init equations:      0

Independent constants: 
 PhA.v[1].re: number of uses: 0, isLinear: true
 PhA.v[1].im: number of uses: 0, isLinear: true
 PhA.v[2].re: number of uses: 0, isLinear: true
 PhA.v[2].im: number of uses: 0, isLinear: true
 PhA.v[3].re: number of uses: 0, isLinear: true
 PhA.v[3].im: number of uses: 0, isLinear: true
 PhA.v[4].re: number of uses: 0, isLinear: true
 PhA.v[4].im: number of uses: 0, isLinear: true
 PhA.v[5].re: number of uses: 0, isLinear: true
 PhA.v[5].im: number of uses: 0, isLinear: true
 PhA.v[6].re: number of uses: 0, isLinear: true
 PhA.v[6].im: number of uses: 0, isLinear: true
 PhA.v[7].re: number of uses: 0, isLinear: true
 PhA.v[7].im: number of uses: 0, isLinear: true
 PhA.v[8].re: number of uses: 0, isLinear: true
 PhA.v[8].im: number of uses: 0, isLinear: true
 PhA.pin_n.v[1].re: number of uses: 0, isLinear: true
 PhB.v[1].re: number of uses: 0, isLinear: true
 PhB.v[1].im: number of uses: 0, isLinear: true
 PhB.v[2].re: number of uses: 0, isLinear: true
 PhB.v[2].im: number of uses: 0, isLinear: true
 PhB.v[3].re: number of uses: 0, isLinear: true
 PhB.v[3].im: number of uses: 0, isLinear: true
 PhB.v[4].re: number of uses: 0, isLinear: true
 PhB.v[4].im: number of uses: 0, isLinear: true
 PhB.v[5].re: number of uses: 0, isLinear: true
 PhB.v[5].im: number of uses: 0, isLinear: true
 PhB.v[6].re: number of uses: 0, isLinear: true
 PhB.v[6].im: number of uses: 0, isLinear: true
 PhB.v[7].re: number of uses: 0, isLinear: true
 PhB.v[7].im: number of uses: 0, isLinear: true
 PhB.v[8].re: number of uses: 0, isLinear: true
 PhB.v[8].im: number of uses: 0, isLinear: true
 PhC.v[1].re: number of uses: 0, isLinear: true
 PhC.v[1].im: number of uses: 0, isLinear: true
 PhC.v[2].re: number of uses: 0, isLinear: true
 PhC.v[2].im: number of uses: 0, isLinear: true
 PhC.v[3].re: number of uses: 0, isLinear: true
 PhC.v[3].im: number of uses: 0, isLinear: true
 PhC.v[4].re: number of uses: 0, isLinear: true
 PhC.v[4].im: number of uses: 0, isLinear: true
 PhC.v[5].re: number of uses: 0, isLinear: true
 PhC.v[5].im: number of uses: 0, isLinear: true
 PhC.v[6].re: number of uses: 0, isLinear: true
 PhC.v[6].im: number of uses: 0, isLinear: true
 PhC.v[7].re: number of uses: 0, isLinear: true
 PhC.v[7].im: number of uses: 0, isLinear: true
 PhC.v[8].re: number of uses: 0, isLinear: true
 PhC.v[8].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[1].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[1].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[2].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[2].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[3].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[3].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[4].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[4].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[5].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[5].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[6].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[6].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[7].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[7].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[8].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.vPrim[8].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[1].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[1].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[2].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[2].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[3].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[3].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[4].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[4].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[5].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[5].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[6].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[6].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[7].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[7].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[8].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer2.vPrim[8].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[1].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[1].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[2].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[2].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[3].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[3].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[4].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[4].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[5].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[5].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[6].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[6].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[7].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[7].im: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[8].re: number of uses: 0, isLinear: true
 test_DY.idealTransformer3.vPrim[8].im: number of uses: 0, isLinear: true
 laptop2.argS: number of uses: 0, isLinear: true
 led_driver.argS: number of uses: 0, isLinear: true
 ground2.p.v: number of uses: 0, isLinear: true
 PhA.properties.ComponentType: number of uses: 0, isLinear: true
 test_DY.properties.ComponentType: number of uses: 0, isLinear: true
 test_DY.idealTransformer1.properties.ComponentType: number of uses: 0, isLinear: true
 ground.properties.ComponentType: number of uses: 0, isLinear: true
 laptop2.properties.ComponentType: number of uses: 0, isLinear: true
 r.properties.ComponentType: number of uses: 0, isLinear: true
 led_load.properties.ComponentType: number of uses: 0, isLinear: true
 zone_1.properties.ComponentType: number of uses: 0, isLinear: true

Dependent constants: 

Independent parameters: 
 systemDef.fFund: number of uses: 4, isLinear: true, evaluated binding exp: 60
 systemDef.fs: number of uses: 1, isLinear: true, evaluated binding exp: 5000.0
 laptop2.V_Rect: number of uses: 1, isLinear: true, evaluated binding exp: 19.5
 laptop2.efficiency: number of uses: 3, isLinear: true, evaluated binding exp: 0.9
 laptop2.rectifierModel: number of uses: 0, isLinear: true, evaluated binding exp: 0
 led_driver.V_Rect: number of uses: 1, isLinear: true, evaluated binding exp: 24
 led_driver.efficiency: number of uses: 3, isLinear: true, evaluated binding exp: 0.9
 led_driver.rectifierModel: number of uses: 0, isLinear: true, evaluated binding exp: 0
 r.r: number of uses: 16, isLinear: true, evaluated binding exp: 1000000.0
 led_load.pwr: number of uses: 1, isLinear: true, evaluated binding exp: 50
 laptop_load.pwr: number of uses: 1, isLinear: true, evaluated binding exp: 25
 _block_jacobian_check_tol: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-6
 _cs_rel_tol: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-6
 _cs_step_size: number of uses: 0, isLinear: true, evaluated binding exp: 0.001
 _events_default_tol: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-10
 _events_tol_factor: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-4
 _nle_jacobian_finite_difference_delta: number of uses: 0, isLinear: true, evaluated binding exp: 1.490116119384766E-8
 _nle_solver_default_tol: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-10
 _nle_solver_max_residual_scaling_factor: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E10
 _nle_solver_min_residual_scaling_factor: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-10
 _nle_solver_min_tol: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-12
 _nle_solver_regularization_tolerance: number of uses: 0, isLinear: true, evaluated binding exp: -1.0
 _nle_solver_step_limit_factor: number of uses: 0, isLinear: true, evaluated binding exp: 10.0
 _nle_solver_tol_factor: number of uses: 0, isLinear: true, evaluated binding exp: 1.0E-4
 _time_events_default_tol: number of uses: 0, isLinear: true, evaluated binding exp: 2.220446049250313E-14
 PhA.magDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: 491.28990594667346
 PhA.magDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.4635405644252304
 PhA.magDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.0463774223253857
 PhA.magDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2331345715632324
 PhA.magDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.6598617132749682
 PhA.magDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1518565411422124
 PhA.magDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.9105967094709126
 PhA.magDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1386948308207945
 PhA.magDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.5251811665424375
 PhA.magDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0877197456635834
 PhA.magDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.9262797730195742
 PhA.magDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1184440683532766
 PhA.magDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.481422982261235
 PhA.magDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0544090284431237
 PhA.magDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1451474507152328
 PhA.magDataMat[17,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0258533576473125
 PhA.magDataMat[18,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.8951740935763725
 PhA.magDataMat[19,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.035779586777545
 PhA.magDataMat[20,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1306259620277833
 PhA.magDataMat[21,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1030772087446648
 PhA.magDataMat[22,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0294340894198748
 PhA.magDataMat[23,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0944957041462652
 PhA.magDataMat[24,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3245085302933516
 PhA.magDataMat[25,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0390577054549229
 PhA.magDataMat[26,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0340450317134204
 PhA.magDataMat[27,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1097767013072763
 PhA.magDataMat[28,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0470594525429294
 PhA.magDataMat[29,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1228566379285578
 PhA.magDataMat[30,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2164928463914955
 PhA.magDataMat[31,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0342300079933074
 PhA.magDataMat[32,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0348258926394183
 PhA.argDataMat[1,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.5707963267948966
 PhA.argDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0077560921535743
 PhA.argDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.0852246972433012
 PhA.argDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1337983605530348
 PhA.argDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.5679607507970243
 PhA.argDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3371965305429522
 PhA.argDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.0199975129308559
 PhA.argDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.4142373069782015
 PhA.argDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.6504198353240805
 PhA.argDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.715056952812912
 PhA.argDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.5102162003333609
 PhA.argDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.1108023593667606
 PhA.argDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.262421590602965
 PhA.argDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.7236257613676265
 PhA.argDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.1515321243259355
 PhA.argDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.2477226727538361
 PhA.argDataMat[17,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.7754828141248986
 PhA.argDataMat[18,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.663073916674371
 PhA.argDataMat[19,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.0318137713960557
 PhA.argDataMat[20,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2993721368277082
 PhA.argDataMat[21,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.1393837225179722
 PhA.argDataMat[22,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.391777148898547
 PhA.argDataMat[23,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.5648231015885503
 PhA.argDataMat[24,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.356629080481576
 PhA.argDataMat[25,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2671820434478699
 PhA.argDataMat[26,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.3096759301950636
 PhA.argDataMat[27,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1696844071201723
 PhA.argDataMat[28,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.0763985737214103
 PhA.argDataMat[29,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.5594469031924515
 PhA.argDataMat[30,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.2997703855896772
 PhA.argDataMat[31,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.4481215218879092
 PhA.argDataMat[32,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9517083118310508
 PhB.magDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: 492.3540794785275
 PhB.magDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.208496948122041
 PhB.magDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.1805408036097413
 PhB.magDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1693263989961228
 PhB.magDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9106214363027906
 PhB.magDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1195391546137544
 PhB.magDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.6580541328073826
 PhB.magDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1269101445860712
 PhB.magDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3289985189761305
 PhB.magDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0946942856942096
 PhB.magDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.0198413017769763
 PhB.magDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0836821242552161
 PhB.magDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.4924159700118574
 PhB.magDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0668687465332885
 PhB.magDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1143872931492812
 PhB.magDataMat[17,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.076898954125649
 PhB.magDataMat[18,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9655752395607782
 PhB.magDataMat[19,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0349853026484666
 PhB.magDataMat[20,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.226897033607389
 PhB.magDataMat[21,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.098402544910626
 PhB.magDataMat[22,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0652517506228442
 PhB.magDataMat[23,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.08011082638466
 PhB.magDataMat[24,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1620678510443835
 PhB.magDataMat[25,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0400637050971903
 PhB.magDataMat[26,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0561736562706734
 PhB.magDataMat[27,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1331380625697481
 PhB.magDataMat[28,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0296172064955882
 PhB.magDataMat[29,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.094827068391166
 PhB.magDataMat[30,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2157544231279243
 PhB.magDataMat[31,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0180623326640486
 PhB.magDataMat[32,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0434623170353308
 PhB.argDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.086840476097504
 PhB.argDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.5253242170980594
 PhB.argDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.8115418295128152
 PhB.argDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.8595229031828926
 PhB.argDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.8739733224576094
 PhB.argDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.8607178229132786
 PhB.argDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.073331261624584
 PhB.argDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.9351292614081848
 PhB.argDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.1551377562798652
 PhB.argDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.6094031270218976
 PhB.argDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.1810033665310717
 PhB.argDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.8832395214114577
 PhB.argDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.0631873306821448
 PhB.argDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.133736341444569
 PhB.argDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.9370100120292153
 PhB.argDataMat[17,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.5326277680479188
 PhB.argDataMat[18,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.4355335492083865
 PhB.argDataMat[19,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.7058834666324927
 PhB.argDataMat[20,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.82542395065559
 PhB.argDataMat[21,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.9017038801663326
 PhB.argDataMat[22,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.6471531147838383
 PhB.argDataMat[23,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.2664005312148152
 PhB.argDataMat[24,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.233387596536119
 PhB.argDataMat[25,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.373672554709982
 PhB.argDataMat[26,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.8816266227593619
 PhB.argDataMat[27,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.17935104062631
 PhB.argDataMat[28,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.36233434884658
 PhB.argDataMat[29,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.275072088990568
 PhB.argDataMat[30,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9083106039150173
 PhB.argDataMat[31,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.5000963969047283
 PhB.argDataMat[32,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.7980169261979593
 PhC.magDataMat[1,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2719091281810751
 PhC.magDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: 491.7835718293929
 PhC.magDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3388220554753613
 PhC.magDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.2560872424865368
 PhC.magDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0837965376619556
 PhC.magDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.049579074569396
 PhC.magDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0479633900797327
 PhC.magDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.232243217516371
 PhC.magDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0613261670877852
 PhC.magDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3085661753673511
 PhC.magDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0894017215045658
 PhC.magDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.6340384052716668
 PhC.magDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0360394590491708
 PhC.magDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.6080350350042865
 PhC.magDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0144866764815914
 PhC.magDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0616593186094572
 PhC.magDataMat[17,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0526340810138655
 PhC.magDataMat[18,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.8610409933552359
 PhC.magDataMat[19,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0223544380084765
 PhC.magDataMat[20,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1965193072432281
 PhC.magDataMat[21,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0820234182998287
 PhC.magDataMat[22,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0475998645936773
 PhC.magDataMat[23,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1031046389723781
 PhC.magDataMat[24,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2083187534520808
 PhC.magDataMat[25,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0208153705589776
 PhC.magDataMat[26,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0678806501902422
 PhC.magDataMat[27,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1312213892402629
 PhC.magDataMat[28,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0355695042062854
 PhC.magDataMat[29,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1405141155536664
 PhC.magDataMat[30,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1917926361699222
 PhC.magDataMat[31,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0151716866761024
 PhC.magDataMat[32,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0441299911973412
 PhC.argDataMat[1,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.5707963267948966
 PhC.argDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.1002127315831656
 PhC.argDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.626463259293345
 PhC.argDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.213433315249527
 PhC.argDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.9305801732284436
 PhC.argDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.287526674673138
 PhC.argDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.4365080165904245
 PhC.argDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.0814742736872363
 PhC.argDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.384994505036182
 PhC.argDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.0470875569304956
 PhC.argDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.631009325075965
 PhC.argDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.0524997537545646
 PhC.argDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 3.1325135086188496
 PhC.argDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.3307335874922797
 PhC.argDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0369170525554631
 PhC.argDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.98109019446484
 PhC.argDataMat[17,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.5401794110408888
 PhC.argDataMat[18,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.6878100982576986
 PhC.argDataMat[19,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.8960282037310516
 PhC.argDataMat[20,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.905818739906312
 PhC.argDataMat[21,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.8685007111657533
 PhC.argDataMat[22,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9586173036243184
 PhC.argDataMat[23,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.359173994218259
 PhC.argDataMat[24,1]: number of uses: 0, isLinear: true, evaluated binding exp: -3.0830059554674554
 PhC.argDataMat[25,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.345527303073058
 PhC.argDataMat[26,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.6859722132521102
 PhC.argDataMat[27,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.8371613968199139
 PhC.argDataMat[28,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.6180299851214954
 PhC.argDataMat[29,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.891302880891181
 PhC.argDataMat[30,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.9641683759106843
 PhC.argDataMat[31,1]: number of uses: 0, isLinear: true, evaluated binding exp: 3.108553064967207
 PhC.argDataMat[32,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.056675653397591
 laptop2.magDataMat[1,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9999999999999999
 laptop2.magDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9486974344201337
 laptop2.magDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9221155376813399
 laptop2.magDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.8849332521469448
 laptop2.magDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.8475867045468796
 laptop2.magDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.7944241839808487
 laptop2.magDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.7230242274654483
 laptop2.magDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.6688914048386135
 laptop2.magDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.5939253865608557
 laptop2.magDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.5280196623121391
 laptop2.magDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.4568186887780485
 laptop2.magDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3861474201640431
 laptop2.magDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3163533253631282
 laptop2.magDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2534864723066213
 laptop2.magDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1920046370077911
 laptop2.magDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1442126307974456
 laptop2.argDataMat[1,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3053419323150846
 laptop2.argDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.8182357929499515
 laptop2.argDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.5364901833841553
 laptop2.argDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.381193752481799
 laptop2.argDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.9688071004089418
 laptop2.argDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.959495555161772
 laptop2.argDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.4013739855750704
 laptop2.argDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.5329775105321843
 laptop2.argDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.8276649690040103
 laptop2.argDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.1106883983886444
 laptop2.argDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.2426384598738585
 laptop2.argDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.6809000975704675
 laptop2.argDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 2.648460001811645
 laptop2.argDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.2835615514742411
 laptop2.argDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 3.0642644296286683
 laptop2.argDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0716470412434909
 led_driver.magDataMat[1,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.0
 led_driver.magDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.890432111870432
 led_driver.magDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.7418107134668804
 led_driver.magDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.567293049298617
 led_driver.magDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3936692199400683
 led_driver.magDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.2525656583874291
 led_driver.magDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1565031895698116
 led_driver.magDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1085784608235925
 led_driver.magDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1028049066991282
 led_driver.magDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1116701804666674
 led_driver.magDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.1074207968075735
 led_driver.magDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0874748765804625
 led_driver.magDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.05783641101013
 led_driver.magDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0366390283673692
 led_driver.magDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0289014631844665
 led_driver.magDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.0275187725558538
 led_driver.argDataMat[1,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.3875666016022497
 led_driver.argDataMat[2,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.1789648209071406
 led_driver.argDataMat[3,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.6302868785533633
 led_driver.argDataMat[4,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.7953249928799604
 led_driver.argDataMat[5,1]: number of uses: 0, isLinear: true, evaluated binding exp: 3.1273318832610917
 led_driver.argDataMat[6,1]: number of uses: 0, isLinear: true, evaluated binding exp: 0.8908122903345195
 led_driver.argDataMat[7,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.1864005972204819
 led_driver.argDataMat[8,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.999284764233698
 led_driver.argDataMat[9,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.4699218316090397
 led_driver.argDataMat[10,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.606821589236838
 led_driver.argDataMat[11,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.844685963688736
 led_driver.argDataMat[12,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.1601646456077166
 led_driver.argDataMat[13,1]: number of uses: 0, isLinear: true, evaluated binding exp: -1.0323815181519134
 led_driver.argDataMat[14,1]: number of uses: 0, isLinear: true, evaluated binding exp: -2.9611753908140344
 led_driver.argDataMat[15,1]: number of uses: 0, isLinear: true, evaluated binding exp: 1.5581822303336441
 led_driver.argDataMat[16,1]: number of uses: 0, isLinear: true, evaluated binding exp: -0.353240856878104
 systemDef.hrms[1]: number of uses: 0, isLinear: true, evaluated binding exp: 1
 systemDef.hrms[2]: number of uses: 2, isLinear: true, evaluated binding exp: 3
 systemDef.hrms[3]: number of uses: 2, isLinear: true, evaluated binding exp: 5
 systemDef.hrms[4]: number of uses: 2, isLinear: true, evaluated binding exp: 7
 systemDef.hrms[5]: number of uses: 2, isLinear: true, evaluated binding exp: 9
 systemDef.hrms[6]: number of uses: 2, isLinear: true, evaluated binding exp: 11
 systemDef.hrms[7]: number of uses: 2, isLinear: true, evaluated binding exp: 13
 systemDef.hrms[8]: number of uses: 2, isLinear: true, evaluated binding exp: 15
 systemDef.numPh: number of uses: 0, isLinear: true, evaluated binding exp: 3
 test_DY.N: number of uses: 3, isLinear: true, evaluated binding exp: 10
 _block_solver_experimental_mode: number of uses: 0, isLinear: true, evaluated binding exp: 0
 _cs_experimental_mode: number of uses: 0, isLinear: true, evaluated binding exp: 0
 _cs_solver: number of uses: 0, isLinear: true, evaluated binding exp: 0
 _iteration_variable_scaling: number of uses: 0, isLinear: true, evaluated binding exp: 1
 _log_level: number of uses: 0, isLinear: true, evaluated binding exp: 3
 _nle_active_bounds_mode: number of uses: 0, isLinear: true, evaluated binding exp: 0
 _nle_jacobian_calculation_mode: number of uses: 0, isLinear: true, evaluated binding exp: 0
 _nle_jacobian_update_mode: number of uses: 0, isLinear: true, evaluated binding exp: 2
 _nle_solver_exit_criterion: number of uses: 0, isLinear: true, evaluated binding exp: 3
 _nle_solver_max_iter: number of uses: 0, isLinear: true, evaluated binding exp: 100
 _nle_solver_max_iter_no_jacobian: number of uses: 0, isLinear: true, evaluated binding exp: 10
 _residual_equation_scaling: number of uses: 0, isLinear: true, evaluated binding exp: 1
 systemDef.numHrm: number of uses: 0, isLinear: true, evaluated binding exp: 8
 PhA.matDim[1]: number of uses: 0, isLinear: true, evaluated binding exp: 32
 PhA.matDim[2]: number of uses: 0, isLinear: true, evaluated binding exp: 1
 laptop2.matDim[1]: number of uses: 0, isLinear: true, evaluated binding exp: 16
 _block_jacobian_check: number of uses: 0, isLinear: true, evaluated binding exp: false
 _block_solver_profiling: number of uses: 0, isLinear: true, evaluated binding exp: false
 _enforce_bounds: number of uses: 0, isLinear: true, evaluated binding exp: true
 _nle_brent_ignore_error: number of uses: 0, isLinear: true, evaluated binding exp: false
 _nle_solver_check_jac_cond: number of uses: 0, isLinear: true, evaluated binding exp: false
 _nle_solver_use_last_integrator_step: number of uses: 0, isLinear: true, evaluated binding exp: true
 _nle_solver_use_nominals_as_fallback: number of uses: 0, isLinear: true, evaluated binding exp: true
 _rescale_after_singular_jac: number of uses: 0, isLinear: true, evaluated binding exp: true
 _rescale_each_step: number of uses: 0, isLinear: true, evaluated binding exp: false
 _runtime_log_to_file: number of uses: 0, isLinear: true, evaluated binding exp: false
 _use_Brent_in_1d: number of uses: 0, isLinear: true, evaluated binding exp: true
 _use_jacobian_equilibration: number of uses: 0, isLinear: true, evaluated binding exp: false
 _use_newton_for_brent: number of uses: 0, isLinear: true, evaluated binding exp: true
 PhA.fileName: number of uses: 0, isLinear: true, evaluated binding exp: "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat"
 PhA.resourceRetVal: number of uses: 0, isLinear: true, evaluated binding exp: "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat"
 PhB.fileName: number of uses: 0, isLinear: true, evaluated binding exp: "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat"
 PhB.resourceRetVal: number of uses: 0, isLinear: true, evaluated binding exp: "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat"
 PhC.fileName: number of uses: 0, isLinear: true, evaluated binding exp: "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat"
 PhC.resourceRetVal: number of uses: 0, isLinear: true, evaluated binding exp: "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat"
 laptop2.modelFileName: number of uses: 0, isLinear: true, evaluated binding exp: "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat"
 laptop2.resourceRetValue: number of uses: 0, isLinear: true, evaluated binding exp: "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat"
 led_driver.modelFileName: number of uses: 0, isLinear: true, evaluated binding exp: "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat"
 led_driver.resourceRetValue: number of uses: 0, isLinear: true, evaluated binding exp: "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat"

Dependent parameters: 
 temp_180[1,1]: number of uses: 2, isLinear: true
 temp_180[2,1]: number of uses: 2, isLinear: true
 temp_180[3,1]: number of uses: 2, isLinear: true
 temp_180[4,1]: number of uses: 2, isLinear: true
 temp_180[5,1]: number of uses: 2, isLinear: true
 temp_180[6,1]: number of uses: 2, isLinear: true
 temp_180[7,1]: number of uses: 2, isLinear: true
 temp_180[8,1]: number of uses: 2, isLinear: true
 temp_180[9,1]: number of uses: 2, isLinear: true
 temp_180[10,1]: number of uses: 2, isLinear: true
 temp_180[11,1]: number of uses: 2, isLinear: true
 temp_180[12,1]: number of uses: 2, isLinear: true
 temp_180[13,1]: number of uses: 2, isLinear: true
 temp_180[14,1]: number of uses: 2, isLinear: true
 temp_180[15,1]: number of uses: 2, isLinear: true
 temp_180[16,1]: number of uses: 2, isLinear: true
 temp_180[17,1]: number of uses: 2, isLinear: true
 temp_180[18,1]: number of uses: 2, isLinear: true
 temp_180[19,1]: number of uses: 2, isLinear: true
 temp_180[20,1]: number of uses: 2, isLinear: true
 temp_180[21,1]: number of uses: 2, isLinear: true
 temp_180[22,1]: number of uses: 2, isLinear: true
 temp_180[23,1]: number of uses: 2, isLinear: true
 temp_180[24,1]: number of uses: 2, isLinear: true
 temp_180[25,1]: number of uses: 2, isLinear: true
 temp_180[26,1]: number of uses: 2, isLinear: true
 temp_180[27,1]: number of uses: 2, isLinear: true
 temp_180[28,1]: number of uses: 2, isLinear: true
 temp_180[29,1]: number of uses: 2, isLinear: true
 temp_180[30,1]: number of uses: 2, isLinear: true
 temp_180[31,1]: number of uses: 2, isLinear: true
 temp_180[32,1]: number of uses: 2, isLinear: true
 temp_181[1,1]: number of uses: 2, isLinear: true
 temp_181[2,1]: number of uses: 2, isLinear: true
 temp_181[3,1]: number of uses: 2, isLinear: true
 temp_181[4,1]: number of uses: 2, isLinear: true
 temp_181[5,1]: number of uses: 2, isLinear: true
 temp_181[6,1]: number of uses: 2, isLinear: true
 temp_181[7,1]: number of uses: 2, isLinear: true
 temp_181[8,1]: number of uses: 2, isLinear: true
 temp_181[9,1]: number of uses: 2, isLinear: true
 temp_181[10,1]: number of uses: 2, isLinear: true
 temp_181[11,1]: number of uses: 2, isLinear: true
 temp_181[12,1]: number of uses: 2, isLinear: true
 temp_181[13,1]: number of uses: 2, isLinear: true
 temp_181[14,1]: number of uses: 2, isLinear: true
 temp_181[15,1]: number of uses: 2, isLinear: true
 temp_181[16,1]: number of uses: 2, isLinear: true
 temp_181[17,1]: number of uses: 2, isLinear: true
 temp_181[18,1]: number of uses: 2, isLinear: true
 temp_181[19,1]: number of uses: 2, isLinear: true
 temp_181[20,1]: number of uses: 2, isLinear: true
 temp_181[21,1]: number of uses: 2, isLinear: true
 temp_181[22,1]: number of uses: 2, isLinear: true
 temp_181[23,1]: number of uses: 2, isLinear: true
 temp_181[24,1]: number of uses: 2, isLinear: true
 temp_181[25,1]: number of uses: 2, isLinear: true
 temp_181[26,1]: number of uses: 2, isLinear: true
 temp_181[27,1]: number of uses: 2, isLinear: true
 temp_181[28,1]: number of uses: 2, isLinear: true
 temp_181[29,1]: number of uses: 2, isLinear: true
 temp_181[30,1]: number of uses: 2, isLinear: true
 temp_181[31,1]: number of uses: 2, isLinear: true
 temp_181[32,1]: number of uses: 2, isLinear: true
 temp_183[1,1]: number of uses: 2, isLinear: true
 temp_183[2,1]: number of uses: 2, isLinear: true
 temp_183[3,1]: number of uses: 2, isLinear: true
 temp_183[4,1]: number of uses: 2, isLinear: true
 temp_183[5,1]: number of uses: 2, isLinear: true
 temp_183[6,1]: number of uses: 2, isLinear: true
 temp_183[7,1]: number of uses: 2, isLinear: true
 temp_183[8,1]: number of uses: 2, isLinear: true
 temp_183[9,1]: number of uses: 2, isLinear: true
 temp_183[10,1]: number of uses: 2, isLinear: true
 temp_183[11,1]: number of uses: 2, isLinear: true
 temp_183[12,1]: number of uses: 2, isLinear: true
 temp_183[13,1]: number of uses: 2, isLinear: true
 temp_183[14,1]: number of uses: 2, isLinear: true
 temp_183[15,1]: number of uses: 2, isLinear: true
 temp_183[16,1]: number of uses: 2, isLinear: true
 temp_183[17,1]: number of uses: 2, isLinear: true
 temp_183[18,1]: number of uses: 2, isLinear: true
 temp_183[19,1]: number of uses: 2, isLinear: true
 temp_183[20,1]: number of uses: 2, isLinear: true
 temp_183[21,1]: number of uses: 2, isLinear: true
 temp_183[22,1]: number of uses: 2, isLinear: true
 temp_183[23,1]: number of uses: 2, isLinear: true
 temp_183[24,1]: number of uses: 2, isLinear: true
 temp_183[25,1]: number of uses: 2, isLinear: true
 temp_183[26,1]: number of uses: 2, isLinear: true
 temp_183[27,1]: number of uses: 2, isLinear: true
 temp_183[28,1]: number of uses: 2, isLinear: true
 temp_183[29,1]: number of uses: 2, isLinear: true
 temp_183[30,1]: number of uses: 2, isLinear: true
 temp_183[31,1]: number of uses: 2, isLinear: true
 temp_183[32,1]: number of uses: 2, isLinear: true
 temp_184[1,1]: number of uses: 2, isLinear: true
 temp_184[2,1]: number of uses: 2, isLinear: true
 temp_184[3,1]: number of uses: 2, isLinear: true
 temp_184[4,1]: number of uses: 2, isLinear: true
 temp_184[5,1]: number of uses: 2, isLinear: true
 temp_184[6,1]: number of uses: 2, isLinear: true
 temp_184[7,1]: number of uses: 2, isLinear: true
 temp_184[8,1]: number of uses: 2, isLinear: true
 temp_184[9,1]: number of uses: 2, isLinear: true
 temp_184[10,1]: number of uses: 2, isLinear: true
 temp_184[11,1]: number of uses: 2, isLinear: true
 temp_184[12,1]: number of uses: 2, isLinear: true
 temp_184[13,1]: number of uses: 2, isLinear: true
 temp_184[14,1]: number of uses: 2, isLinear: true
 temp_184[15,1]: number of uses: 2, isLinear: true
 temp_184[16,1]: number of uses: 2, isLinear: true
 temp_184[17,1]: number of uses: 2, isLinear: true
 temp_184[18,1]: number of uses: 2, isLinear: true
 temp_184[19,1]: number of uses: 2, isLinear: true
 temp_184[20,1]: number of uses: 2, isLinear: true
 temp_184[21,1]: number of uses: 2, isLinear: true
 temp_184[22,1]: number of uses: 2, isLinear: true
 temp_184[23,1]: number of uses: 2, isLinear: true
 temp_184[24,1]: number of uses: 2, isLinear: true
 temp_184[25,1]: number of uses: 2, isLinear: true
 temp_184[26,1]: number of uses: 2, isLinear: true
 temp_184[27,1]: number of uses: 2, isLinear: true
 temp_184[28,1]: number of uses: 2, isLinear: true
 temp_184[29,1]: number of uses: 2, isLinear: true
 temp_184[30,1]: number of uses: 2, isLinear: true
 temp_184[31,1]: number of uses: 2, isLinear: true
 temp_184[32,1]: number of uses: 2, isLinear: true
 temp_186[1,1]: number of uses: 2, isLinear: true
 temp_186[2,1]: number of uses: 2, isLinear: true
 temp_186[3,1]: number of uses: 2, isLinear: true
 temp_186[4,1]: number of uses: 2, isLinear: true
 temp_186[5,1]: number of uses: 2, isLinear: true
 temp_186[6,1]: number of uses: 2, isLinear: true
 temp_186[7,1]: number of uses: 2, isLinear: true
 temp_186[8,1]: number of uses: 2, isLinear: true
 temp_186[9,1]: number of uses: 2, isLinear: true
 temp_186[10,1]: number of uses: 2, isLinear: true
 temp_186[11,1]: number of uses: 2, isLinear: true
 temp_186[12,1]: number of uses: 2, isLinear: true
 temp_186[13,1]: number of uses: 2, isLinear: true
 temp_186[14,1]: number of uses: 2, isLinear: true
 temp_186[15,1]: number of uses: 2, isLinear: true
 temp_186[16,1]: number of uses: 2, isLinear: true
 temp_186[17,1]: number of uses: 2, isLinear: true
 temp_186[18,1]: number of uses: 2, isLinear: true
 temp_186[19,1]: number of uses: 2, isLinear: true
 temp_186[20,1]: number of uses: 2, isLinear: true
 temp_186[21,1]: number of uses: 2, isLinear: true
 temp_186[22,1]: number of uses: 2, isLinear: true
 temp_186[23,1]: number of uses: 2, isLinear: true
 temp_186[24,1]: number of uses: 2, isLinear: true
 temp_186[25,1]: number of uses: 2, isLinear: true
 temp_186[26,1]: number of uses: 2, isLinear: true
 temp_186[27,1]: number of uses: 2, isLinear: true
 temp_186[28,1]: number of uses: 2, isLinear: true
 temp_186[29,1]: number of uses: 2, isLinear: true
 temp_186[30,1]: number of uses: 2, isLinear: true
 temp_186[31,1]: number of uses: 2, isLinear: true
 temp_186[32,1]: number of uses: 2, isLinear: true
 temp_187[1,1]: number of uses: 2, isLinear: true
 temp_187[2,1]: number of uses: 2, isLinear: true
 temp_187[3,1]: number of uses: 2, isLinear: true
 temp_187[4,1]: number of uses: 2, isLinear: true
 temp_187[5,1]: number of uses: 2, isLinear: true
 temp_187[6,1]: number of uses: 2, isLinear: true
 temp_187[7,1]: number of uses: 2, isLinear: true
 temp_187[8,1]: number of uses: 2, isLinear: true
 temp_187[9,1]: number of uses: 2, isLinear: true
 temp_187[10,1]: number of uses: 2, isLinear: true
 temp_187[11,1]: number of uses: 2, isLinear: true
 temp_187[12,1]: number of uses: 2, isLinear: true
 temp_187[13,1]: number of uses: 2, isLinear: true
 temp_187[14,1]: number of uses: 2, isLinear: true
 temp_187[15,1]: number of uses: 2, isLinear: true
 temp_187[16,1]: number of uses: 2, isLinear: true
 temp_187[17,1]: number of uses: 2, isLinear: true
 temp_187[18,1]: number of uses: 2, isLinear: true
 temp_187[19,1]: number of uses: 2, isLinear: true
 temp_187[20,1]: number of uses: 2, isLinear: true
 temp_187[21,1]: number of uses: 2, isLinear: true
 temp_187[22,1]: number of uses: 2, isLinear: true
 temp_187[23,1]: number of uses: 2, isLinear: true
 temp_187[24,1]: number of uses: 2, isLinear: true
 temp_187[25,1]: number of uses: 2, isLinear: true
 temp_187[26,1]: number of uses: 2, isLinear: true
 temp_187[27,1]: number of uses: 2, isLinear: true
 temp_187[28,1]: number of uses: 2, isLinear: true
 temp_187[29,1]: number of uses: 2, isLinear: true
 temp_187[30,1]: number of uses: 2, isLinear: true
 temp_187[31,1]: number of uses: 2, isLinear: true
 temp_187[32,1]: number of uses: 2, isLinear: true
 temp_189[1,1]: number of uses: 2, isLinear: true
 temp_189[2,1]: number of uses: 2, isLinear: true
 temp_189[3,1]: number of uses: 2, isLinear: true
 temp_189[4,1]: number of uses: 2, isLinear: true
 temp_189[5,1]: number of uses: 2, isLinear: true
 temp_189[6,1]: number of uses: 2, isLinear: true
 temp_189[7,1]: number of uses: 2, isLinear: true
 temp_189[8,1]: number of uses: 2, isLinear: true
 temp_189[9,1]: number of uses: 2, isLinear: true
 temp_189[10,1]: number of uses: 2, isLinear: true
 temp_189[11,1]: number of uses: 2, isLinear: true
 temp_189[12,1]: number of uses: 2, isLinear: true
 temp_189[13,1]: number of uses: 2, isLinear: true
 temp_189[14,1]: number of uses: 2, isLinear: true
 temp_189[15,1]: number of uses: 2, isLinear: true
 temp_189[16,1]: number of uses: 2, isLinear: true
 temp_190[1,1]: number of uses: 2, isLinear: true
 temp_190[2,1]: number of uses: 2, isLinear: true
 temp_190[3,1]: number of uses: 2, isLinear: true
 temp_190[4,1]: number of uses: 2, isLinear: true
 temp_190[5,1]: number of uses: 2, isLinear: true
 temp_190[6,1]: number of uses: 2, isLinear: true
 temp_190[7,1]: number of uses: 2, isLinear: true
 temp_190[8,1]: number of uses: 2, isLinear: true
 temp_190[9,1]: number of uses: 2, isLinear: true
 temp_190[10,1]: number of uses: 2, isLinear: true
 temp_190[11,1]: number of uses: 2, isLinear: true
 temp_190[12,1]: number of uses: 2, isLinear: true
 temp_190[13,1]: number of uses: 2, isLinear: true
 temp_190[14,1]: number of uses: 2, isLinear: true
 temp_190[15,1]: number of uses: 2, isLinear: true
 temp_190[16,1]: number of uses: 2, isLinear: true
 temp_192[1,1]: number of uses: 2, isLinear: true
 temp_192[2,1]: number of uses: 2, isLinear: true
 temp_192[3,1]: number of uses: 2, isLinear: true
 temp_192[4,1]: number of uses: 2, isLinear: true
 temp_192[5,1]: number of uses: 2, isLinear: true
 temp_192[6,1]: number of uses: 2, isLinear: true
 temp_192[7,1]: number of uses: 2, isLinear: true
 temp_192[8,1]: number of uses: 2, isLinear: true
 temp_192[9,1]: number of uses: 2, isLinear: true
 temp_192[10,1]: number of uses: 2, isLinear: true
 temp_192[11,1]: number of uses: 2, isLinear: true
 temp_192[12,1]: number of uses: 2, isLinear: true
 temp_192[13,1]: number of uses: 2, isLinear: true
 temp_192[14,1]: number of uses: 2, isLinear: true
 temp_192[15,1]: number of uses: 2, isLinear: true
 temp_192[16,1]: number of uses: 2, isLinear: true
 temp_193[1,1]: number of uses: 2, isLinear: true
 temp_193[2,1]: number of uses: 2, isLinear: true
 temp_193[3,1]: number of uses: 2, isLinear: true
 temp_193[4,1]: number of uses: 2, isLinear: true
 temp_193[5,1]: number of uses: 2, isLinear: true
 temp_193[6,1]: number of uses: 2, isLinear: true
 temp_193[7,1]: number of uses: 2, isLinear: true
 temp_193[8,1]: number of uses: 2, isLinear: true
 temp_193[9,1]: number of uses: 2, isLinear: true
 temp_193[10,1]: number of uses: 2, isLinear: true
 temp_193[11,1]: number of uses: 2, isLinear: true
 temp_193[12,1]: number of uses: 2, isLinear: true
 temp_193[13,1]: number of uses: 2, isLinear: true
 temp_193[14,1]: number of uses: 2, isLinear: true
 temp_193[15,1]: number of uses: 2, isLinear: true
 temp_193[16,1]: number of uses: 2, isLinear: true
 test_DY.idealTransformer1.N: number of uses: 25, isLinear: true
 test_DY.idealTransformer2.N: number of uses: 25, isLinear: true
 test_DY.idealTransformer3.N: number of uses: 25, isLinear: true
 laptop2.vDC.V: number of uses: 3, isLinear: true
 led_driver.vDC.V: number of uses: 3, isLinear: true
 temp_457: number of uses: 3, isLinear: true
 temp_472: number of uses: 3, isLinear: true
 temp_487: number of uses: 3, isLinear: true
 temp_502: number of uses: 3, isLinear: true
 temp_517: number of uses: 3, isLinear: true
 temp_532: number of uses: 3, isLinear: true
 temp_547: number of uses: 3, isLinear: true
 temp_562: number of uses: 3, isLinear: true
 temp_857: number of uses: 3, isLinear: true
 temp_872: number of uses: 3, isLinear: true
 temp_887: number of uses: 3, isLinear: true
 temp_902: number of uses: 3, isLinear: true
 temp_917: number of uses: 3, isLinear: true
 temp_932: number of uses: 3, isLinear: true
 temp_947: number of uses: 3, isLinear: true
 temp_962: number of uses: 3, isLinear: true
 temp_1257: number of uses: 3, isLinear: true
 temp_1272: number of uses: 3, isLinear: true
 temp_1287: number of uses: 3, isLinear: true
 temp_1302: number of uses: 3, isLinear: true
 temp_1317: number of uses: 3, isLinear: true
 temp_1332: number of uses: 3, isLinear: true
 temp_1347: number of uses: 3, isLinear: true
 temp_1362: number of uses: 3, isLinear: true
 laptop_load.i: number of uses: 4, isLinear: true
 led_load.i: number of uses: 4, isLinear: true
 led_driver.loadBase.v[1].re: number of uses: 12, isLinear: true
 led_driver.loadBase.v[1].im: number of uses: 12, isLinear: true
 led_driver.loadBase.v[2].re: number of uses: 3, isLinear: true
 led_driver.loadBase.v[2].im: number of uses: 3, isLinear: true
 led_driver.loadBase.v[3].re: number of uses: 3, isLinear: true
 led_driver.loadBase.v[3].im: number of uses: 3, isLinear: true
 led_driver.loadBase.v[4].re: number of uses: 3, isLinear: true
 led_driver.loadBase.v[4].im: number of uses: 3, isLinear: true
 led_driver.loadBase.v[5].re: number of uses: 3, isLinear: true
 led_driver.loadBase.v[5].im: number of uses: 3, isLinear: true
 led_driver.loadBase.v[6].re: number of uses: 3, isLinear: true
 led_driver.loadBase.v[6].im: number of uses: 3, isLinear: true
 led_driver.loadBase.v[7].re: number of uses: 3, isLinear: true
 led_driver.loadBase.v[7].im: number of uses: 3, isLinear: true
 led_driver.loadBase.v[8].re: number of uses: 3, isLinear: true
 led_driver.loadBase.v[8].im: number of uses: 3, isLinear: true
 laptop2.loadBase.v[1].re: number of uses: 12, isLinear: true
 laptop2.loadBase.v[1].im: number of uses: 12, isLinear: true
 laptop2.loadBase.v[2].re: number of uses: 3, isLinear: true
 laptop2.loadBase.v[2].im: number of uses: 3, isLinear: true
 laptop2.loadBase.v[3].re: number of uses: 3, isLinear: true
 laptop2.loadBase.v[3].im: number of uses: 3, isLinear: true
 laptop2.loadBase.v[4].re: number of uses: 3, isLinear: true
 laptop2.loadBase.v[4].im: number of uses: 3, isLinear: true
 laptop2.loadBase.v[5].re: number of uses: 3, isLinear: true
 laptop2.loadBase.v[5].im: number of uses: 3, isLinear: true
 laptop2.loadBase.v[6].re: number of uses: 3, isLinear: true
 laptop2.loadBase.v[6].im: number of uses: 3, isLinear: true
 laptop2.loadBase.v[7].re: number of uses: 3, isLinear: true
 laptop2.loadBase.v[7].im: number of uses: 3, isLinear: true
 laptop2.loadBase.v[8].re: number of uses: 3, isLinear: true
 laptop2.loadBase.v[8].im: number of uses: 3, isLinear: true
 r.v[1].re: number of uses: 4, isLinear: true
 r.v[1].im: number of uses: 4, isLinear: true
 r.v[2].re: number of uses: 2, isLinear: true
 r.v[2].im: number of uses: 2, isLinear: true
 r.v[3].re: number of uses: 2, isLinear: true
 r.v[3].im: number of uses: 2, isLinear: true
 r.v[4].re: number of uses: 2, isLinear: true
 r.v[4].im: number of uses: 2, isLinear: true
 r.v[5].re: number of uses: 2, isLinear: true
 r.v[5].im: number of uses: 2, isLinear: true
 r.v[6].re: number of uses: 2, isLinear: true
 r.v[6].im: number of uses: 2, isLinear: true
 r.v[7].re: number of uses: 2, isLinear: true
 r.v[7].im: number of uses: 2, isLinear: true
 r.v[8].re: number of uses: 2, isLinear: true
 r.v[8].im: number of uses: 2, isLinear: true
 ground3.p.i: number of uses: 1, isLinear: true
 laptop2.P: number of uses: 4, isLinear: true
 ground2.p.i: number of uses: 1, isLinear: true
 led_driver.P: number of uses: 4, isLinear: true
 led_driver.V_mag[1]: number of uses: 1, isLinear: true
 led_driver.V_arg[1]: number of uses: 1, isLinear: true
 led_driver.argAdj[1]: number of uses: 3, isLinear: true
 led_driver.argAdj[2]: number of uses: 3, isLinear: true
 led_driver.argAdj[3]: number of uses: 3, isLinear: true
 led_driver.argAdj[4]: number of uses: 3, isLinear: true
 led_driver.argAdj[5]: number of uses: 3, isLinear: true
 led_driver.argAdj[6]: number of uses: 3, isLinear: true
 led_driver.argAdj[7]: number of uses: 3, isLinear: true
 led_driver.V_mag[2]: number of uses: 1, isLinear: true
 led_driver.V_arg[2]: number of uses: 1, isLinear: true
 led_driver.V_mag[3]: number of uses: 1, isLinear: true
 led_driver.V_arg[3]: number of uses: 1, isLinear: true
 led_driver.V_mag[4]: number of uses: 1, isLinear: true
 led_driver.V_arg[4]: number of uses: 1, isLinear: true
 led_driver.V_mag[5]: number of uses: 1, isLinear: true
 led_driver.V_arg[5]: number of uses: 1, isLinear: true
 led_driver.V_mag[6]: number of uses: 1, isLinear: true
 led_driver.V_arg[6]: number of uses: 1, isLinear: true
 led_driver.V_mag[7]: number of uses: 1, isLinear: true
 led_driver.V_arg[7]: number of uses: 1, isLinear: true
 led_driver.V_mag[8]: number of uses: 1, isLinear: true
 led_driver.V_arg[8]: number of uses: 1, isLinear: true
 laptop2.V_mag[1]: number of uses: 1, isLinear: true
 laptop2.V_arg[1]: number of uses: 1, isLinear: true
 laptop2.argAdj[1]: number of uses: 3, isLinear: true
 laptop2.argAdj[2]: number of uses: 3, isLinear: true
 laptop2.argAdj[3]: number of uses: 3, isLinear: true
 laptop2.argAdj[4]: number of uses: 3, isLinear: true
 laptop2.argAdj[5]: number of uses: 3, isLinear: true
 laptop2.argAdj[6]: number of uses: 3, isLinear: true
 laptop2.argAdj[7]: number of uses: 3, isLinear: true
 laptop2.V_mag[2]: number of uses: 1, isLinear: true
 laptop2.V_arg[2]: number of uses: 1, isLinear: true
 laptop2.V_mag[3]: number of uses: 1, isLinear: true
 laptop2.V_arg[3]: number of uses: 1, isLinear: true
 laptop2.V_mag[4]: number of uses: 1, isLinear: true
 laptop2.V_arg[4]: number of uses: 1, isLinear: true
 laptop2.V_mag[5]: number of uses: 1, isLinear: true
 laptop2.V_arg[5]: number of uses: 1, isLinear: true
 laptop2.V_mag[6]: number of uses: 1, isLinear: true
 laptop2.V_arg[6]: number of uses: 1, isLinear: true
 laptop2.V_mag[7]: number of uses: 1, isLinear: true
 laptop2.V_arg[7]: number of uses: 1, isLinear: true
 laptop2.V_mag[8]: number of uses: 1, isLinear: true
 laptop2.V_arg[8]: number of uses: 1, isLinear: true
 r.i[1].re: number of uses: 5, isLinear: true
 r.vFundAbs: number of uses: 1, isLinear: true
 r.vFundArg: number of uses: 1, isLinear: true
 r.i[1].im: number of uses: 5, isLinear: true
 r.i[2].re: number of uses: 3, isLinear: true
 r.i[2].im: number of uses: 3, isLinear: true
 r.i[3].re: number of uses: 3, isLinear: true
 r.i[3].im: number of uses: 3, isLinear: true
 r.i[4].re: number of uses: 3, isLinear: true
 r.i[4].im: number of uses: 3, isLinear: true
 r.i[5].re: number of uses: 3, isLinear: true
 r.i[5].im: number of uses: 3, isLinear: true
 r.i[6].re: number of uses: 3, isLinear: true
 r.i[6].im: number of uses: 3, isLinear: true
 r.i[7].re: number of uses: 3, isLinear: true
 r.i[7].im: number of uses: 3, isLinear: true
 r.i[8].re: number of uses: 3, isLinear: true
 r.i[8].im: number of uses: 3, isLinear: true
 laptop2.S: number of uses: 2, isLinear: true
 zone_2.u: number of uses: 1, isLinear: true
 led_driver.S: number of uses: 2, isLinear: true
 zone_1.u: number of uses: 1, isLinear: true
 led_driver.a[1].re: number of uses: 2, isLinear: true
 led_driver.a[1].im: number of uses: 2, isLinear: true
 led_driver.a[2].re: number of uses: 2, isLinear: true
 led_driver.a[2].im: number of uses: 2, isLinear: true
 led_driver.a[3].re: number of uses: 2, isLinear: true
 led_driver.a[3].im: number of uses: 2, isLinear: true
 led_driver.a[4].re: number of uses: 2, isLinear: true
 led_driver.a[4].im: number of uses: 2, isLinear: true
 led_driver.a[5].re: number of uses: 2, isLinear: true
 led_driver.a[5].im: number of uses: 2, isLinear: true
 led_driver.a[6].re: number of uses: 2, isLinear: true
 led_driver.a[6].im: number of uses: 2, isLinear: true
 led_driver.a[7].re: number of uses: 2, isLinear: true
 led_driver.a[7].im: number of uses: 2, isLinear: true
 laptop2.a[1].re: number of uses: 2, isLinear: true
 laptop2.a[1].im: number of uses: 2, isLinear: true
 laptop2.a[2].re: number of uses: 2, isLinear: true
 laptop2.a[2].im: number of uses: 2, isLinear: true
 laptop2.a[3].re: number of uses: 2, isLinear: true
 laptop2.a[3].im: number of uses: 2, isLinear: true
 laptop2.a[4].re: number of uses: 2, isLinear: true
 laptop2.a[4].im: number of uses: 2, isLinear: true
 laptop2.a[5].re: number of uses: 2, isLinear: true
 laptop2.a[5].im: number of uses: 2, isLinear: true
 laptop2.a[6].re: number of uses: 2, isLinear: true
 laptop2.a[6].im: number of uses: 2, isLinear: true
 laptop2.a[7].re: number of uses: 2, isLinear: true
 laptop2.a[7].im: number of uses: 2, isLinear: true
 test_DY.idealTransformer3.iPrim[1].re: number of uses: 3, isLinear: true
 r.iFundAbs: number of uses: 1, isLinear: true
 r.iFundArg: number of uses: 1, isLinear: true
 test_DY.idealTransformer3.iPrim[1].im: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[2].re: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[2].im: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[3].re: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[3].im: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[4].re: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[4].im: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[5].re: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[5].im: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[6].re: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[6].im: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[7].re: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[7].im: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[8].re: number of uses: 3, isLinear: true
 test_DY.idealTransformer3.iPrim[8].im: number of uses: 3, isLinear: true
 laptop2.Q: number of uses: 2, isLinear: true
 led_driver.Q: number of uses: 2, isLinear: true
 temp_179[1]: number of uses: 2, isLinear: true
 temp_179[2]: number of uses: 2, isLinear: true
 temp_182[1]: number of uses: 2, isLinear: true
 temp_182[2]: number of uses: 2, isLinear: true
 temp_185[1]: number of uses: 2, isLinear: true
 temp_185[2]: number of uses: 2, isLinear: true
 temp_188[1]: number of uses: 2, isLinear: true
 temp_188[2]: number of uses: 2, isLinear: true
 temp_191[1]: number of uses: 2, isLinear: true
 temp_191[2]: number of uses: 2, isLinear: true
 systemDef.N: number of uses: 1, isLinear: true

Differentiated variables: 
 PhA.theta: number of uses: 17, isLinear: false
 PhB.theta: number of uses: 3, isLinear: false
 PhC.theta: number of uses: 3, isLinear: false

Derivative variables: 
 der(PhA.theta): number of uses: 5, isLinear: true
 der(PhB.theta): number of uses: 2, isLinear: true
 der(PhC.theta): number of uses: 2, isLinear: true

Discrete variables: 

Algebraic real variables: 
 PhA.i[1].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[1].im: number of uses: 2, isLinear: true, alias: no
 PhA.i[2].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[2].im: number of uses: 2, isLinear: true, alias: no
 PhA.i[3].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[3].im: number of uses: 2, isLinear: true, alias: no
 PhA.i[4].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[4].im: number of uses: 2, isLinear: true, alias: no
 PhA.i[5].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[5].im: number of uses: 2, isLinear: true, alias: no
 PhA.i[6].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[6].im: number of uses: 2, isLinear: true, alias: no
 PhA.i[7].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[7].im: number of uses: 2, isLinear: true, alias: no
 PhA.i[8].re: number of uses: 2, isLinear: true, alias: no
 PhA.i[8].im: number of uses: 2, isLinear: true, alias: no
 PhA.omega: number of uses: 1, isLinear: true, alias: no
 PhB.i[1].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[1].im: number of uses: 2, isLinear: true, alias: no
 PhB.i[2].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[2].im: number of uses: 2, isLinear: true, alias: no
 PhB.i[3].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[3].im: number of uses: 2, isLinear: true, alias: no
 PhB.i[4].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[4].im: number of uses: 2, isLinear: true, alias: no
 PhB.i[5].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[5].im: number of uses: 2, isLinear: true, alias: no
 PhB.i[6].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[6].im: number of uses: 2, isLinear: true, alias: no
 PhB.i[7].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[7].im: number of uses: 2, isLinear: true, alias: no
 PhB.i[8].re: number of uses: 2, isLinear: true, alias: no
 PhB.i[8].im: number of uses: 2, isLinear: true, alias: no
 PhB.omega: number of uses: 1, isLinear: true, alias: no
 PhC.i[1].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[1].im: number of uses: 2, isLinear: true, alias: no
 PhC.i[2].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[2].im: number of uses: 2, isLinear: true, alias: no
 PhC.i[3].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[3].im: number of uses: 2, isLinear: true, alias: no
 PhC.i[4].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[4].im: number of uses: 2, isLinear: true, alias: no
 PhC.i[5].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[5].im: number of uses: 2, isLinear: true, alias: no
 PhC.i[6].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[6].im: number of uses: 2, isLinear: true, alias: no
 PhC.i[7].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[7].im: number of uses: 2, isLinear: true, alias: no
 PhC.i[8].re: number of uses: 2, isLinear: true, alias: no
 PhC.i[8].im: number of uses: 2, isLinear: true, alias: no
 PhC.omega: number of uses: 1, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[1].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[1].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[2].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[2].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[3].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[3].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[4].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[4].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[5].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[5].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[6].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[6].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[7].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[7].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[8].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer1.iPrim[8].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[1].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[1].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[2].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[2].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[3].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[3].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[4].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[4].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[5].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[5].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[6].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[6].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[7].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[7].im: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[8].re: number of uses: 3, isLinear: true, alias: no
 test_DY.idealTransformer2.iPrim[8].im: number of uses: 3, isLinear: true, alias: no
 test_DY.hPin_N.iIm[1]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iIm[2]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iIm[3]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iIm[4]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iIm[5]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iIm[6]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iIm[7]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iIm[8]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[1]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[2]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[3]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[4]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[5]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[6]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[7]: number of uses: 1, isLinear: true, alias: no
 test_DY.hPin_N.iRe[8]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[1]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[2]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[3]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[4]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[5]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[6]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[7]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iIm[8]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[1]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[2]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[3]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[4]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[5]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[6]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[7]: number of uses: 1, isLinear: true, alias: no
 ground.pin.iRe[8]: number of uses: 1, isLinear: true, alias: no
 laptop2.loadBase.i[1].re: number of uses: 7, isLinear: false, alias: no
 laptop2.loadBase.i[1].im: number of uses: 7, isLinear: false, alias: no
 laptop2.loadBase.i[2].re: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[2].im: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[3].re: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[3].im: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[4].re: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[4].im: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[5].re: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[5].im: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[6].re: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[6].im: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[7].re: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[7].im: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[8].re: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.i[8].im: number of uses: 5, isLinear: false, alias: no
 laptop2.loadBase.omega: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[1]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[2]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[3]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[4]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[5]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[6]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[7]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_mag[8]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[1]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[2]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[3]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[4]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[5]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[6]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[7]: number of uses: 1, isLinear: true, alias: no
 laptop2.I_arg[8]: number of uses: 1, isLinear: true, alias: no
 laptop2.magScale: number of uses: 8, isLinear: true, alias: no
 laptop2.c[1]: number of uses: 3, isLinear: true, alias: no
 laptop2.c[2]: number of uses: 3, isLinear: true, alias: no
 laptop2.c[3]: number of uses: 3, isLinear: true, alias: no
 laptop2.c[4]: number of uses: 3, isLinear: true, alias: no
 laptop2.c[5]: number of uses: 3, isLinear: true, alias: no
 laptop2.c[6]: number of uses: 3, isLinear: true, alias: no
 laptop2.c[7]: number of uses: 3, isLinear: true, alias: no
 led_driver.loadBase.i[1].re: number of uses: 7, isLinear: false, alias: no
 led_driver.loadBase.i[1].im: number of uses: 7, isLinear: false, alias: no
 led_driver.loadBase.i[2].re: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[2].im: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[3].re: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[3].im: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[4].re: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[4].im: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[5].re: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[5].im: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[6].re: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[6].im: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[7].re: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[7].im: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[8].re: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.i[8].im: number of uses: 5, isLinear: false, alias: no
 led_driver.loadBase.omega: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[1]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[2]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[3]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[4]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[5]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[6]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[7]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_mag[8]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[1]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[2]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[3]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[4]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[5]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[6]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[7]: number of uses: 1, isLinear: true, alias: no
 led_driver.I_arg[8]: number of uses: 1, isLinear: true, alias: no
 led_driver.magScale: number of uses: 8, isLinear: true, alias: no
 led_driver.c[1]: number of uses: 3, isLinear: true, alias: no
 led_driver.c[2]: number of uses: 3, isLinear: true, alias: no
 led_driver.c[3]: number of uses: 3, isLinear: true, alias: no
 led_driver.c[4]: number of uses: 3, isLinear: true, alias: no
 led_driver.c[5]: number of uses: 3, isLinear: true, alias: no
 led_driver.c[6]: number of uses: 3, isLinear: true, alias: no
 led_driver.c[7]: number of uses: 3, isLinear: true, alias: no
 ground1.pin.iIm[1]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iIm[2]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iIm[3]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iIm[4]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iIm[5]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iIm[6]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iIm[7]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iIm[8]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[1]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[2]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[3]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[4]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[5]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[6]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[7]: number of uses: 2, isLinear: true, alias: no
 ground1.pin.iRe[8]: number of uses: 2, isLinear: true, alias: no
 r.omega: number of uses: 1, isLinear: true, alias: no

Input variables: 

Alias sets:
{PhA.i[1].re(start=0), PhA.pin_p.iRe[1], -PhA.pin_n.iRe[1], -test_DY.pinPrim_A.iRe[1]}
{PhA.i[2].re(start=0), PhA.pin_p.iRe[2], -PhA.pin_n.iRe[2], -test_DY.pinPrim_A.iRe[2]}
{PhA.i[3].re(start=0), PhA.pin_p.iRe[3], -PhA.pin_n.iRe[3], -test_DY.pinPrim_A.iRe[3]}
{PhA.i[4].re(start=0), PhA.pin_p.iRe[4], -PhA.pin_n.iRe[4], -test_DY.pinPrim_A.iRe[4]}
{PhA.i[5].re(start=0), PhA.pin_p.iRe[5], -PhA.pin_n.iRe[5], -test_DY.pinPrim_A.iRe[5]}
{PhA.i[6].re(start=0), PhA.pin_p.iRe[6], -PhA.pin_n.iRe[6], -test_DY.pinPrim_A.iRe[6]}
{PhA.i[7].re(start=0), PhA.pin_p.iRe[7], -PhA.pin_n.iRe[7], -test_DY.pinPrim_A.iRe[7]}
{PhA.i[8].re(start=0), PhA.pin_p.iRe[8], -PhA.pin_n.iRe[8], -test_DY.pinPrim_A.iRe[8]}
{PhA.i[1].im(start=0), PhA.pin_p.iIm[1], -PhA.pin_n.iIm[1], -test_DY.pinPrim_A.iIm[1]}
{PhA.i[2].im(start=0), PhA.pin_p.iIm[2], -PhA.pin_n.iIm[2], -test_DY.pinPrim_A.iIm[2]}
{PhA.i[3].im(start=0), PhA.pin_p.iIm[3], -PhA.pin_n.iIm[3], -test_DY.pinPrim_A.iIm[3]}
{PhA.i[4].im(start=0), PhA.pin_p.iIm[4], -PhA.pin_n.iIm[4], -test_DY.pinPrim_A.iIm[4]}
{PhA.i[5].im(start=0), PhA.pin_p.iIm[5], -PhA.pin_n.iIm[5], -test_DY.pinPrim_A.iIm[5]}
{PhA.i[6].im(start=0), PhA.pin_p.iIm[6], -PhA.pin_n.iIm[6], -test_DY.pinPrim_A.iIm[6]}
{PhA.i[7].im(start=0), PhA.pin_p.iIm[7], -PhA.pin_n.iIm[7], -test_DY.pinPrim_A.iIm[7]}
{PhA.i[8].im(start=0), PhA.pin_p.iIm[8], -PhA.pin_n.iIm[8], -test_DY.pinPrim_A.iIm[8]}
{PhB.theta(start=0), PhB.pin_p.reference.theta(start=0), PhB.pin_n.reference.theta(start=0)}
{PhB.i[1].re(start=0), PhB.pin_p.iRe[1], -PhB.pin_n.iRe[1], -test_DY.pinPrim_B.iRe[1]}
{PhB.i[2].re(start=0), PhB.pin_p.iRe[2], -PhB.pin_n.iRe[2], -test_DY.pinPrim_B.iRe[2]}
{PhB.i[3].re(start=0), PhB.pin_p.iRe[3], -PhB.pin_n.iRe[3], -test_DY.pinPrim_B.iRe[3]}
{PhB.i[4].re(start=0), PhB.pin_p.iRe[4], -PhB.pin_n.iRe[4], -test_DY.pinPrim_B.iRe[4]}
{PhB.i[5].re(start=0), PhB.pin_p.iRe[5], -PhB.pin_n.iRe[5], -test_DY.pinPrim_B.iRe[5]}
{PhB.i[6].re(start=0), PhB.pin_p.iRe[6], -PhB.pin_n.iRe[6], -test_DY.pinPrim_B.iRe[6]}
{PhB.i[7].re(start=0), PhB.pin_p.iRe[7], -PhB.pin_n.iRe[7], -test_DY.pinPrim_B.iRe[7]}
{PhB.i[8].re(start=0), PhB.pin_p.iRe[8], -PhB.pin_n.iRe[8], -test_DY.pinPrim_B.iRe[8]}
{PhB.i[1].im(start=0), PhB.pin_p.iIm[1], -PhB.pin_n.iIm[1], -test_DY.pinPrim_B.iIm[1]}
{PhB.i[2].im(start=0), PhB.pin_p.iIm[2], -PhB.pin_n.iIm[2], -test_DY.pinPrim_B.iIm[2]}
{PhB.i[3].im(start=0), PhB.pin_p.iIm[3], -PhB.pin_n.iIm[3], -test_DY.pinPrim_B.iIm[3]}
{PhB.i[4].im(start=0), PhB.pin_p.iIm[4], -PhB.pin_n.iIm[4], -test_DY.pinPrim_B.iIm[4]}
{PhB.i[5].im(start=0), PhB.pin_p.iIm[5], -PhB.pin_n.iIm[5], -test_DY.pinPrim_B.iIm[5]}
{PhB.i[6].im(start=0), PhB.pin_p.iIm[6], -PhB.pin_n.iIm[6], -test_DY.pinPrim_B.iIm[6]}
{PhB.i[7].im(start=0), PhB.pin_p.iIm[7], -PhB.pin_n.iIm[7], -test_DY.pinPrim_B.iIm[7]}
{PhB.i[8].im(start=0), PhB.pin_p.iIm[8], -PhB.pin_n.iIm[8], -test_DY.pinPrim_B.iIm[8]}
{PhC.theta(start=0), PhC.pin_p.reference.theta(start=0), PhC.pin_n.reference.theta(start=0)}
{PhC.i[1].re(start=0), PhC.pin_p.iRe[1], -PhC.pin_n.iRe[1], -test_DY.pinPrim_C.iRe[1]}
{PhC.i[2].re(start=0), PhC.pin_p.iRe[2], -PhC.pin_n.iRe[2], -test_DY.pinPrim_C.iRe[2]}
{PhC.i[3].re(start=0), PhC.pin_p.iRe[3], -PhC.pin_n.iRe[3], -test_DY.pinPrim_C.iRe[3]}
{PhC.i[4].re(start=0), PhC.pin_p.iRe[4], -PhC.pin_n.iRe[4], -test_DY.pinPrim_C.iRe[4]}
{PhC.i[5].re(start=0), PhC.pin_p.iRe[5], -PhC.pin_n.iRe[5], -test_DY.pinPrim_C.iRe[5]}
{PhC.i[6].re(start=0), PhC.pin_p.iRe[6], -PhC.pin_n.iRe[6], -test_DY.pinPrim_C.iRe[6]}
{PhC.i[7].re(start=0), PhC.pin_p.iRe[7], -PhC.pin_n.iRe[7], -test_DY.pinPrim_C.iRe[7]}
{PhC.i[8].re(start=0), PhC.pin_p.iRe[8], -PhC.pin_n.iRe[8], -test_DY.pinPrim_C.iRe[8]}
{PhC.i[1].im(start=0), PhC.pin_p.iIm[1], -PhC.pin_n.iIm[1], -test_DY.pinPrim_C.iIm[1]}
{PhC.i[2].im(start=0), PhC.pin_p.iIm[2], -PhC.pin_n.iIm[2], -test_DY.pinPrim_C.iIm[2]}
{PhC.i[3].im(start=0), PhC.pin_p.iIm[3], -PhC.pin_n.iIm[3], -test_DY.pinPrim_C.iIm[3]}
{PhC.i[4].im(start=0), PhC.pin_p.iIm[4], -PhC.pin_n.iIm[4], -test_DY.pinPrim_C.iIm[4]}
{PhC.i[5].im(start=0), PhC.pin_p.iIm[5], -PhC.pin_n.iIm[5], -test_DY.pinPrim_C.iIm[5]}
{PhC.i[6].im(start=0), PhC.pin_p.iIm[6], -PhC.pin_n.iIm[6], -test_DY.pinPrim_C.iIm[6]}
{PhC.i[7].im(start=0), PhC.pin_p.iIm[7], -PhC.pin_n.iIm[7], -test_DY.pinPrim_C.iIm[7]}
{PhC.i[8].im(start=0), PhC.pin_p.iIm[8], -PhC.pin_n.iIm[8], -test_DY.pinPrim_C.iIm[8]}
{test_DY.idealTransformer1.iPrim[1].re, test_DY.idealTransformer1.pinP_Prim.iRe[1], -test_DY.idealTransformer1.pinN_Prim.iRe[1]}
{test_DY.idealTransformer1.iPrim[2].re, test_DY.idealTransformer1.pinP_Prim.iRe[2], -test_DY.idealTransformer1.pinN_Prim.iRe[2]}
{test_DY.idealTransformer1.iPrim[3].re, test_DY.idealTransformer1.pinP_Prim.iRe[3], -test_DY.idealTransformer1.pinN_Prim.iRe[3]}
{test_DY.idealTransformer1.iPrim[4].re, test_DY.idealTransformer1.pinP_Prim.iRe[4], -test_DY.idealTransformer1.pinN_Prim.iRe[4]}
{test_DY.idealTransformer1.iPrim[5].re, test_DY.idealTransformer1.pinP_Prim.iRe[5], -test_DY.idealTransformer1.pinN_Prim.iRe[5]}
{test_DY.idealTransformer1.iPrim[6].re, test_DY.idealTransformer1.pinP_Prim.iRe[6], -test_DY.idealTransformer1.pinN_Prim.iRe[6]}
{test_DY.idealTransformer1.iPrim[7].re, test_DY.idealTransformer1.pinP_Prim.iRe[7], -test_DY.idealTransformer1.pinN_Prim.iRe[7]}
{test_DY.idealTransformer1.iPrim[8].re, test_DY.idealTransformer1.pinP_Prim.iRe[8], -test_DY.idealTransformer1.pinN_Prim.iRe[8]}
{test_DY.idealTransformer1.iPrim[1].im, test_DY.idealTransformer1.pinP_Prim.iIm[1], -test_DY.idealTransformer1.pinN_Prim.iIm[1]}
{test_DY.idealTransformer1.iPrim[2].im, test_DY.idealTransformer1.pinP_Prim.iIm[2], -test_DY.idealTransformer1.pinN_Prim.iIm[2]}
{test_DY.idealTransformer1.iPrim[3].im, test_DY.idealTransformer1.pinP_Prim.iIm[3], -test_DY.idealTransformer1.pinN_Prim.iIm[3]}
{test_DY.idealTransformer1.iPrim[4].im, test_DY.idealTransformer1.pinP_Prim.iIm[4], -test_DY.idealTransformer1.pinN_Prim.iIm[4]}
{test_DY.idealTransformer1.iPrim[5].im, test_DY.idealTransformer1.pinP_Prim.iIm[5], -test_DY.idealTransformer1.pinN_Prim.iIm[5]}
{test_DY.idealTransformer1.iPrim[6].im, test_DY.idealTransformer1.pinP_Prim.iIm[6], -test_DY.idealTransformer1.pinN_Prim.iIm[6]}
{test_DY.idealTransformer1.iPrim[7].im, test_DY.idealTransformer1.pinP_Prim.iIm[7], -test_DY.idealTransformer1.pinN_Prim.iIm[7]}
{test_DY.idealTransformer1.iPrim[8].im, test_DY.idealTransformer1.pinP_Prim.iIm[8], -test_DY.idealTransformer1.pinN_Prim.iIm[8]}
{-led_driver.loadBase.i[1].re(start=0), test_DY.idealTransformer1.iSec[1].re, test_DY.idealTransformer1.pinP_Sec.iRe[1], -test_DY.idealTransformer1.pinN_Sec.iRe[1], -led_driver.hPin_P.iRe[1], test_DY.pinSec_A.iRe[1], -led_driver.loadBase.pin_p.iRe[1], led_driver.loadBase.pin_n.iRe[1], led_driver.hPin_N.iRe[1]}
{-led_driver.loadBase.i[2].re(start=0), test_DY.idealTransformer1.iSec[2].re, test_DY.idealTransformer1.pinP_Sec.iRe[2], -test_DY.idealTransformer1.pinN_Sec.iRe[2], -led_driver.hPin_P.iRe[2], test_DY.pinSec_A.iRe[2], -led_driver.loadBase.pin_p.iRe[2], led_driver.loadBase.pin_n.iRe[2], led_driver.hPin_N.iRe[2]}
{-led_driver.loadBase.i[3].re(start=0), test_DY.idealTransformer1.iSec[3].re, test_DY.idealTransformer1.pinP_Sec.iRe[3], -test_DY.idealTransformer1.pinN_Sec.iRe[3], -led_driver.hPin_P.iRe[3], test_DY.pinSec_A.iRe[3], -led_driver.loadBase.pin_p.iRe[3], led_driver.loadBase.pin_n.iRe[3], led_driver.hPin_N.iRe[3]}
{-led_driver.loadBase.i[4].re(start=0), test_DY.idealTransformer1.iSec[4].re, test_DY.idealTransformer1.pinP_Sec.iRe[4], -test_DY.idealTransformer1.pinN_Sec.iRe[4], -led_driver.hPin_P.iRe[4], test_DY.pinSec_A.iRe[4], -led_driver.loadBase.pin_p.iRe[4], led_driver.loadBase.pin_n.iRe[4], led_driver.hPin_N.iRe[4]}
{-led_driver.loadBase.i[5].re(start=0), test_DY.idealTransformer1.iSec[5].re, test_DY.idealTransformer1.pinP_Sec.iRe[5], -test_DY.idealTransformer1.pinN_Sec.iRe[5], -led_driver.hPin_P.iRe[5], test_DY.pinSec_A.iRe[5], -led_driver.loadBase.pin_p.iRe[5], led_driver.loadBase.pin_n.iRe[5], led_driver.hPin_N.iRe[5]}
{-led_driver.loadBase.i[6].re(start=0), test_DY.idealTransformer1.iSec[6].re, test_DY.idealTransformer1.pinP_Sec.iRe[6], -test_DY.idealTransformer1.pinN_Sec.iRe[6], -led_driver.hPin_P.iRe[6], test_DY.pinSec_A.iRe[6], -led_driver.loadBase.pin_p.iRe[6], led_driver.loadBase.pin_n.iRe[6], led_driver.hPin_N.iRe[6]}
{-led_driver.loadBase.i[7].re(start=0), test_DY.idealTransformer1.iSec[7].re, test_DY.idealTransformer1.pinP_Sec.iRe[7], -test_DY.idealTransformer1.pinN_Sec.iRe[7], -led_driver.hPin_P.iRe[7], test_DY.pinSec_A.iRe[7], -led_driver.loadBase.pin_p.iRe[7], led_driver.loadBase.pin_n.iRe[7], led_driver.hPin_N.iRe[7]}
{-led_driver.loadBase.i[8].re(start=0), test_DY.idealTransformer1.iSec[8].re, test_DY.idealTransformer1.pinP_Sec.iRe[8], -test_DY.idealTransformer1.pinN_Sec.iRe[8], -led_driver.hPin_P.iRe[8], test_DY.pinSec_A.iRe[8], -led_driver.loadBase.pin_p.iRe[8], led_driver.loadBase.pin_n.iRe[8], led_driver.hPin_N.iRe[8]}
{-led_driver.loadBase.i[1].im(start=0), test_DY.idealTransformer1.iSec[1].im, test_DY.idealTransformer1.pinP_Sec.iIm[1], -test_DY.idealTransformer1.pinN_Sec.iIm[1], -led_driver.hPin_P.iIm[1], test_DY.pinSec_A.iIm[1], temp_1906, -led_driver.loadBase.pin_p.iIm[1], led_driver.loadBase.pin_n.iIm[1], led_driver.hPin_N.iIm[1]}
{-led_driver.loadBase.i[2].im(start=0), test_DY.idealTransformer1.iSec[2].im, test_DY.idealTransformer1.pinP_Sec.iIm[2], -test_DY.idealTransformer1.pinN_Sec.iIm[2], -led_driver.hPin_P.iIm[2], test_DY.pinSec_A.iIm[2], -led_driver.loadBase.pin_p.iIm[2], led_driver.loadBase.pin_n.iIm[2], led_driver.hPin_N.iIm[2]}
{-led_driver.loadBase.i[3].im(start=0), test_DY.idealTransformer1.iSec[3].im, test_DY.idealTransformer1.pinP_Sec.iIm[3], -test_DY.idealTransformer1.pinN_Sec.iIm[3], -led_driver.hPin_P.iIm[3], test_DY.pinSec_A.iIm[3], -led_driver.loadBase.pin_p.iIm[3], led_driver.loadBase.pin_n.iIm[3], led_driver.hPin_N.iIm[3]}
{-led_driver.loadBase.i[4].im(start=0), test_DY.idealTransformer1.iSec[4].im, test_DY.idealTransformer1.pinP_Sec.iIm[4], -test_DY.idealTransformer1.pinN_Sec.iIm[4], -led_driver.hPin_P.iIm[4], test_DY.pinSec_A.iIm[4], -led_driver.loadBase.pin_p.iIm[4], led_driver.loadBase.pin_n.iIm[4], led_driver.hPin_N.iIm[4]}
{-led_driver.loadBase.i[5].im(start=0), test_DY.idealTransformer1.iSec[5].im, test_DY.idealTransformer1.pinP_Sec.iIm[5], -test_DY.idealTransformer1.pinN_Sec.iIm[5], -led_driver.hPin_P.iIm[5], test_DY.pinSec_A.iIm[5], -led_driver.loadBase.pin_p.iIm[5], led_driver.loadBase.pin_n.iIm[5], led_driver.hPin_N.iIm[5]}
{-led_driver.loadBase.i[6].im(start=0), test_DY.idealTransformer1.iSec[6].im, test_DY.idealTransformer1.pinP_Sec.iIm[6], -test_DY.idealTransformer1.pinN_Sec.iIm[6], -led_driver.hPin_P.iIm[6], test_DY.pinSec_A.iIm[6], -led_driver.loadBase.pin_p.iIm[6], led_driver.loadBase.pin_n.iIm[6], led_driver.hPin_N.iIm[6]}
{-led_driver.loadBase.i[7].im(start=0), test_DY.idealTransformer1.iSec[7].im, test_DY.idealTransformer1.pinP_Sec.iIm[7], -test_DY.idealTransformer1.pinN_Sec.iIm[7], -led_driver.hPin_P.iIm[7], test_DY.pinSec_A.iIm[7], -led_driver.loadBase.pin_p.iIm[7], led_driver.loadBase.pin_n.iIm[7], led_driver.hPin_N.iIm[7]}
{-led_driver.loadBase.i[8].im(start=0), test_DY.idealTransformer1.iSec[8].im, test_DY.idealTransformer1.pinP_Sec.iIm[8], -test_DY.idealTransformer1.pinN_Sec.iIm[8], -led_driver.hPin_P.iIm[8], test_DY.pinSec_A.iIm[8], -led_driver.loadBase.pin_p.iIm[8], led_driver.loadBase.pin_n.iIm[8], led_driver.hPin_N.iIm[8]}
{test_DY.idealTransformer2.iPrim[1].re, test_DY.idealTransformer2.pinP_Prim.iRe[1], -test_DY.idealTransformer2.pinN_Prim.iRe[1]}
{test_DY.idealTransformer2.iPrim[2].re, test_DY.idealTransformer2.pinP_Prim.iRe[2], -test_DY.idealTransformer2.pinN_Prim.iRe[2]}
{test_DY.idealTransformer2.iPrim[3].re, test_DY.idealTransformer2.pinP_Prim.iRe[3], -test_DY.idealTransformer2.pinN_Prim.iRe[3]}
{test_DY.idealTransformer2.iPrim[4].re, test_DY.idealTransformer2.pinP_Prim.iRe[4], -test_DY.idealTransformer2.pinN_Prim.iRe[4]}
{test_DY.idealTransformer2.iPrim[5].re, test_DY.idealTransformer2.pinP_Prim.iRe[5], -test_DY.idealTransformer2.pinN_Prim.iRe[5]}
{test_DY.idealTransformer2.iPrim[6].re, test_DY.idealTransformer2.pinP_Prim.iRe[6], -test_DY.idealTransformer2.pinN_Prim.iRe[6]}
{test_DY.idealTransformer2.iPrim[7].re, test_DY.idealTransformer2.pinP_Prim.iRe[7], -test_DY.idealTransformer2.pinN_Prim.iRe[7]}
{test_DY.idealTransformer2.iPrim[8].re, test_DY.idealTransformer2.pinP_Prim.iRe[8], -test_DY.idealTransformer2.pinN_Prim.iRe[8]}
{test_DY.idealTransformer2.iPrim[1].im, test_DY.idealTransformer2.pinP_Prim.iIm[1], -test_DY.idealTransformer2.pinN_Prim.iIm[1]}
{test_DY.idealTransformer2.iPrim[2].im, test_DY.idealTransformer2.pinP_Prim.iIm[2], -test_DY.idealTransformer2.pinN_Prim.iIm[2]}
{test_DY.idealTransformer2.iPrim[3].im, test_DY.idealTransformer2.pinP_Prim.iIm[3], -test_DY.idealTransformer2.pinN_Prim.iIm[3]}
{test_DY.idealTransformer2.iPrim[4].im, test_DY.idealTransformer2.pinP_Prim.iIm[4], -test_DY.idealTransformer2.pinN_Prim.iIm[4]}
{test_DY.idealTransformer2.iPrim[5].im, test_DY.idealTransformer2.pinP_Prim.iIm[5], -test_DY.idealTransformer2.pinN_Prim.iIm[5]}
{test_DY.idealTransformer2.iPrim[6].im, test_DY.idealTransformer2.pinP_Prim.iIm[6], -test_DY.idealTransformer2.pinN_Prim.iIm[6]}
{test_DY.idealTransformer2.iPrim[7].im, test_DY.idealTransformer2.pinP_Prim.iIm[7], -test_DY.idealTransformer2.pinN_Prim.iIm[7]}
{test_DY.idealTransformer2.iPrim[8].im, test_DY.idealTransformer2.pinP_Prim.iIm[8], -test_DY.idealTransformer2.pinN_Prim.iIm[8]}
{-laptop2.loadBase.i[1].re(start=0), test_DY.idealTransformer2.iSec[1].re, test_DY.idealTransformer2.pinP_Sec.iRe[1], -test_DY.idealTransformer2.pinN_Sec.iRe[1], -laptop2.hPin_P.iRe[1], test_DY.pinSec_B.iRe[1], -laptop2.loadBase.pin_p.iRe[1], laptop2.loadBase.pin_n.iRe[1], laptop2.hPin_N.iRe[1]}
{-laptop2.loadBase.i[2].re(start=0), test_DY.idealTransformer2.iSec[2].re, test_DY.idealTransformer2.pinP_Sec.iRe[2], -test_DY.idealTransformer2.pinN_Sec.iRe[2], -laptop2.hPin_P.iRe[2], test_DY.pinSec_B.iRe[2], -laptop2.loadBase.pin_p.iRe[2], laptop2.loadBase.pin_n.iRe[2], laptop2.hPin_N.iRe[2]}
{-laptop2.loadBase.i[3].re(start=0), test_DY.idealTransformer2.iSec[3].re, test_DY.idealTransformer2.pinP_Sec.iRe[3], -test_DY.idealTransformer2.pinN_Sec.iRe[3], -laptop2.hPin_P.iRe[3], test_DY.pinSec_B.iRe[3], -laptop2.loadBase.pin_p.iRe[3], laptop2.loadBase.pin_n.iRe[3], laptop2.hPin_N.iRe[3]}
{-laptop2.loadBase.i[4].re(start=0), test_DY.idealTransformer2.iSec[4].re, test_DY.idealTransformer2.pinP_Sec.iRe[4], -test_DY.idealTransformer2.pinN_Sec.iRe[4], -laptop2.hPin_P.iRe[4], test_DY.pinSec_B.iRe[4], -laptop2.loadBase.pin_p.iRe[4], laptop2.loadBase.pin_n.iRe[4], laptop2.hPin_N.iRe[4]}
{-laptop2.loadBase.i[5].re(start=0), test_DY.idealTransformer2.iSec[5].re, test_DY.idealTransformer2.pinP_Sec.iRe[5], -test_DY.idealTransformer2.pinN_Sec.iRe[5], -laptop2.hPin_P.iRe[5], test_DY.pinSec_B.iRe[5], -laptop2.loadBase.pin_p.iRe[5], laptop2.loadBase.pin_n.iRe[5], laptop2.hPin_N.iRe[5]}
{-laptop2.loadBase.i[6].re(start=0), test_DY.idealTransformer2.iSec[6].re, test_DY.idealTransformer2.pinP_Sec.iRe[6], -test_DY.idealTransformer2.pinN_Sec.iRe[6], -laptop2.hPin_P.iRe[6], test_DY.pinSec_B.iRe[6], -laptop2.loadBase.pin_p.iRe[6], laptop2.loadBase.pin_n.iRe[6], laptop2.hPin_N.iRe[6]}
{-laptop2.loadBase.i[7].re(start=0), test_DY.idealTransformer2.iSec[7].re, test_DY.idealTransformer2.pinP_Sec.iRe[7], -test_DY.idealTransformer2.pinN_Sec.iRe[7], -laptop2.hPin_P.iRe[7], test_DY.pinSec_B.iRe[7], -laptop2.loadBase.pin_p.iRe[7], laptop2.loadBase.pin_n.iRe[7], laptop2.hPin_N.iRe[7]}
{-laptop2.loadBase.i[8].re(start=0), test_DY.idealTransformer2.iSec[8].re, test_DY.idealTransformer2.pinP_Sec.iRe[8], -test_DY.idealTransformer2.pinN_Sec.iRe[8], -laptop2.hPin_P.iRe[8], test_DY.pinSec_B.iRe[8], -laptop2.loadBase.pin_p.iRe[8], laptop2.loadBase.pin_n.iRe[8], laptop2.hPin_N.iRe[8]}
{-laptop2.loadBase.i[1].im(start=0), test_DY.idealTransformer2.iSec[1].im, test_DY.idealTransformer2.pinP_Sec.iIm[1], -test_DY.idealTransformer2.pinN_Sec.iIm[1], -laptop2.hPin_P.iIm[1], test_DY.pinSec_B.iIm[1], temp_1698, -laptop2.loadBase.pin_p.iIm[1], laptop2.loadBase.pin_n.iIm[1], laptop2.hPin_N.iIm[1]}
{-laptop2.loadBase.i[2].im(start=0), test_DY.idealTransformer2.iSec[2].im, test_DY.idealTransformer2.pinP_Sec.iIm[2], -test_DY.idealTransformer2.pinN_Sec.iIm[2], -laptop2.hPin_P.iIm[2], test_DY.pinSec_B.iIm[2], -laptop2.loadBase.pin_p.iIm[2], laptop2.loadBase.pin_n.iIm[2], laptop2.hPin_N.iIm[2]}
{-laptop2.loadBase.i[3].im(start=0), test_DY.idealTransformer2.iSec[3].im, test_DY.idealTransformer2.pinP_Sec.iIm[3], -test_DY.idealTransformer2.pinN_Sec.iIm[3], -laptop2.hPin_P.iIm[3], test_DY.pinSec_B.iIm[3], -laptop2.loadBase.pin_p.iIm[3], laptop2.loadBase.pin_n.iIm[3], laptop2.hPin_N.iIm[3]}
{-laptop2.loadBase.i[4].im(start=0), test_DY.idealTransformer2.iSec[4].im, test_DY.idealTransformer2.pinP_Sec.iIm[4], -test_DY.idealTransformer2.pinN_Sec.iIm[4], -laptop2.hPin_P.iIm[4], test_DY.pinSec_B.iIm[4], -laptop2.loadBase.pin_p.iIm[4], laptop2.loadBase.pin_n.iIm[4], laptop2.hPin_N.iIm[4]}
{-laptop2.loadBase.i[5].im(start=0), test_DY.idealTransformer2.iSec[5].im, test_DY.idealTransformer2.pinP_Sec.iIm[5], -test_DY.idealTransformer2.pinN_Sec.iIm[5], -laptop2.hPin_P.iIm[5], test_DY.pinSec_B.iIm[5], -laptop2.loadBase.pin_p.iIm[5], laptop2.loadBase.pin_n.iIm[5], laptop2.hPin_N.iIm[5]}
{-laptop2.loadBase.i[6].im(start=0), test_DY.idealTransformer2.iSec[6].im, test_DY.idealTransformer2.pinP_Sec.iIm[6], -test_DY.idealTransformer2.pinN_Sec.iIm[6], -laptop2.hPin_P.iIm[6], test_DY.pinSec_B.iIm[6], -laptop2.loadBase.pin_p.iIm[6], laptop2.loadBase.pin_n.iIm[6], laptop2.hPin_N.iIm[6]}
{-laptop2.loadBase.i[7].im(start=0), test_DY.idealTransformer2.iSec[7].im, test_DY.idealTransformer2.pinP_Sec.iIm[7], -test_DY.idealTransformer2.pinN_Sec.iIm[7], -laptop2.hPin_P.iIm[7], test_DY.pinSec_B.iIm[7], -laptop2.loadBase.pin_p.iIm[7], laptop2.loadBase.pin_n.iIm[7], laptop2.hPin_N.iIm[7]}
{-laptop2.loadBase.i[8].im(start=0), test_DY.idealTransformer2.iSec[8].im, test_DY.idealTransformer2.pinP_Sec.iIm[8], -test_DY.idealTransformer2.pinN_Sec.iIm[8], -laptop2.hPin_P.iIm[8], test_DY.pinSec_B.iIm[8], -laptop2.loadBase.pin_p.iIm[8], laptop2.loadBase.pin_n.iIm[8], laptop2.hPin_N.iIm[8]}
{test_DY.idealTransformer3.iPrim[1].re, test_DY.idealTransformer3.pinP_Prim.iRe[1], -test_DY.idealTransformer3.pinN_Prim.iRe[1]}
{test_DY.idealTransformer3.iPrim[2].re, test_DY.idealTransformer3.pinP_Prim.iRe[2], -test_DY.idealTransformer3.pinN_Prim.iRe[2]}
{test_DY.idealTransformer3.iPrim[3].re, test_DY.idealTransformer3.pinP_Prim.iRe[3], -test_DY.idealTransformer3.pinN_Prim.iRe[3]}
{test_DY.idealTransformer3.iPrim[4].re, test_DY.idealTransformer3.pinP_Prim.iRe[4], -test_DY.idealTransformer3.pinN_Prim.iRe[4]}
{test_DY.idealTransformer3.iPrim[5].re, test_DY.idealTransformer3.pinP_Prim.iRe[5], -test_DY.idealTransformer3.pinN_Prim.iRe[5]}
{test_DY.idealTransformer3.iPrim[6].re, test_DY.idealTransformer3.pinP_Prim.iRe[6], -test_DY.idealTransformer3.pinN_Prim.iRe[6]}
{test_DY.idealTransformer3.iPrim[7].re, test_DY.idealTransformer3.pinP_Prim.iRe[7], -test_DY.idealTransformer3.pinN_Prim.iRe[7]}
{test_DY.idealTransformer3.iPrim[8].re, test_DY.idealTransformer3.pinP_Prim.iRe[8], -test_DY.idealTransformer3.pinN_Prim.iRe[8]}
{test_DY.idealTransformer3.iPrim[1].im, test_DY.idealTransformer3.pinP_Prim.iIm[1], -test_DY.idealTransformer3.pinN_Prim.iIm[1]}
{test_DY.idealTransformer3.iPrim[2].im, test_DY.idealTransformer3.pinP_Prim.iIm[2], -test_DY.idealTransformer3.pinN_Prim.iIm[2]}
{test_DY.idealTransformer3.iPrim[3].im, test_DY.idealTransformer3.pinP_Prim.iIm[3], -test_DY.idealTransformer3.pinN_Prim.iIm[3]}
{test_DY.idealTransformer3.iPrim[4].im, test_DY.idealTransformer3.pinP_Prim.iIm[4], -test_DY.idealTransformer3.pinN_Prim.iIm[4]}
{test_DY.idealTransformer3.iPrim[5].im, test_DY.idealTransformer3.pinP_Prim.iIm[5], -test_DY.idealTransformer3.pinN_Prim.iIm[5]}
{test_DY.idealTransformer3.iPrim[6].im, test_DY.idealTransformer3.pinP_Prim.iIm[6], -test_DY.idealTransformer3.pinN_Prim.iIm[6]}
{test_DY.idealTransformer3.iPrim[7].im, test_DY.idealTransformer3.pinP_Prim.iIm[7], -test_DY.idealTransformer3.pinN_Prim.iIm[7]}
{test_DY.idealTransformer3.iPrim[8].im, test_DY.idealTransformer3.pinP_Prim.iIm[8], -test_DY.idealTransformer3.pinN_Prim.iIm[8]}
{-r.i[1].re(start=0), test_DY.idealTransformer3.iSec[1].re, test_DY.idealTransformer3.pinP_Sec.iRe[1], -test_DY.idealTransformer3.pinN_Sec.iRe[1], -r.pin_p.iRe[1], r.pin_n.iRe[1], test_DY.pinSec_C.iRe[1]}
{-r.i[2].re(start=0), test_DY.idealTransformer3.iSec[2].re, test_DY.idealTransformer3.pinP_Sec.iRe[2], -test_DY.idealTransformer3.pinN_Sec.iRe[2], -r.pin_p.iRe[2], r.pin_n.iRe[2], test_DY.pinSec_C.iRe[2]}
{-r.i[3].re(start=0), test_DY.idealTransformer3.iSec[3].re, test_DY.idealTransformer3.pinP_Sec.iRe[3], -test_DY.idealTransformer3.pinN_Sec.iRe[3], -r.pin_p.iRe[3], r.pin_n.iRe[3], test_DY.pinSec_C.iRe[3]}
{-r.i[4].re(start=0), test_DY.idealTransformer3.iSec[4].re, test_DY.idealTransformer3.pinP_Sec.iRe[4], -test_DY.idealTransformer3.pinN_Sec.iRe[4], -r.pin_p.iRe[4], r.pin_n.iRe[4], test_DY.pinSec_C.iRe[4]}
{-r.i[5].re(start=0), test_DY.idealTransformer3.iSec[5].re, test_DY.idealTransformer3.pinP_Sec.iRe[5], -test_DY.idealTransformer3.pinN_Sec.iRe[5], -r.pin_p.iRe[5], r.pin_n.iRe[5], test_DY.pinSec_C.iRe[5]}
{-r.i[6].re(start=0), test_DY.idealTransformer3.iSec[6].re, test_DY.idealTransformer3.pinP_Sec.iRe[6], -test_DY.idealTransformer3.pinN_Sec.iRe[6], -r.pin_p.iRe[6], r.pin_n.iRe[6], test_DY.pinSec_C.iRe[6]}
{-r.i[7].re(start=0), test_DY.idealTransformer3.iSec[7].re, test_DY.idealTransformer3.pinP_Sec.iRe[7], -test_DY.idealTransformer3.pinN_Sec.iRe[7], -r.pin_p.iRe[7], r.pin_n.iRe[7], test_DY.pinSec_C.iRe[7]}
{-r.i[8].re(start=0), test_DY.idealTransformer3.iSec[8].re, test_DY.idealTransformer3.pinP_Sec.iRe[8], -test_DY.idealTransformer3.pinN_Sec.iRe[8], -r.pin_p.iRe[8], r.pin_n.iRe[8], test_DY.pinSec_C.iRe[8]}
{-r.i[1].im(start=0), test_DY.idealTransformer3.iSec[1].im, test_DY.idealTransformer3.pinP_Sec.iIm[1], -test_DY.idealTransformer3.pinN_Sec.iIm[1], -r.pin_p.iIm[1], r.pin_n.iIm[1], test_DY.pinSec_C.iIm[1]}
{-r.i[2].im(start=0), test_DY.idealTransformer3.iSec[2].im, test_DY.idealTransformer3.pinP_Sec.iIm[2], -test_DY.idealTransformer3.pinN_Sec.iIm[2], -r.pin_p.iIm[2], r.pin_n.iIm[2], test_DY.pinSec_C.iIm[2]}
{-r.i[3].im(start=0), test_DY.idealTransformer3.iSec[3].im, test_DY.idealTransformer3.pinP_Sec.iIm[3], -test_DY.idealTransformer3.pinN_Sec.iIm[3], -r.pin_p.iIm[3], r.pin_n.iIm[3], test_DY.pinSec_C.iIm[3]}
{-r.i[4].im(start=0), test_DY.idealTransformer3.iSec[4].im, test_DY.idealTransformer3.pinP_Sec.iIm[4], -test_DY.idealTransformer3.pinN_Sec.iIm[4], -r.pin_p.iIm[4], r.pin_n.iIm[4], test_DY.pinSec_C.iIm[4]}
{-r.i[5].im(start=0), test_DY.idealTransformer3.iSec[5].im, test_DY.idealTransformer3.pinP_Sec.iIm[5], -test_DY.idealTransformer3.pinN_Sec.iIm[5], -r.pin_p.iIm[5], r.pin_n.iIm[5], test_DY.pinSec_C.iIm[5]}
{-r.i[6].im(start=0), test_DY.idealTransformer3.iSec[6].im, test_DY.idealTransformer3.pinP_Sec.iIm[6], -test_DY.idealTransformer3.pinN_Sec.iIm[6], -r.pin_p.iIm[6], r.pin_n.iIm[6], test_DY.pinSec_C.iIm[6]}
{-r.i[7].im(start=0), test_DY.idealTransformer3.iSec[7].im, test_DY.idealTransformer3.pinP_Sec.iIm[7], -test_DY.idealTransformer3.pinN_Sec.iIm[7], -r.pin_p.iIm[7], r.pin_n.iIm[7], test_DY.pinSec_C.iIm[7]}
{-r.i[8].im(start=0), test_DY.idealTransformer3.iSec[8].im, test_DY.idealTransformer3.pinP_Sec.iIm[8], -test_DY.idealTransformer3.pinN_Sec.iIm[8], -r.pin_p.iIm[8], r.pin_n.iIm[8], test_DY.pinSec_C.iIm[8]}
{laptop2.P, temp_129.re}
{laptop2.Q(start=1), temp_129.im}
{led_driver.P, temp_146.re}
{led_driver.Q(start=1), temp_146.im}
{PhA.theta(start=0), r.pin_p.reference.theta(start=0), r.pin_n.reference.theta(start=0), ground1.pin.reference.theta(start=0), laptop2.hPin_N.reference.theta(start=0), led_driver.hPin_N.reference.theta(start=0), test_DY.idealTransformer1.pinP_Prim.reference.theta(start=0), test_DY.idealTransformer1.pinN_Prim.reference.theta(start=0), test_DY.idealTransformer1.pinP_Sec.reference.theta(start=0), test_DY.idealTransformer1.pinN_Sec.reference.theta(start=0), test_DY.idealTransformer2.pinP_Prim.reference.theta(start=0), test_DY.idealTransformer2.pinN_Prim.reference.theta(start=0), test_DY.idealTransformer2.pinP_Sec.reference.theta(start=0), test_DY.idealTransformer2.pinN_Sec.reference.theta(start=0), PhA.pin_p.reference.theta(start=0), PhA.pin_n.reference.theta(start=0), test_DY.pinPrim_A.reference.theta(start=0), ground.pin.reference.theta(start=0), test_DY.idealTransformer3.pinP_Prim.reference.theta(start=0), test_DY.idealTransformer3.pinN_Prim.reference.theta(start=0), test_DY.idealTransformer3.pinP_Sec.reference.theta(start=0), test_DY.idealTransformer3.pinN_Sec.reference.theta(start=0), test_DY.pinPrim_C.reference.theta(start=0), test_DY.hPin_N.reference.theta(start=0), test_DY.pinSec_A.reference.theta(start=0), test_DY.pinPrim_B.reference.theta(start=0), test_DY.pinSec_B.reference.theta(start=0), test_DY.pinSec_C.reference.theta(start=0), led_driver.hPin_P.reference.theta(start=0), laptop2.hPin_P.reference.theta(start=0), led_driver.loadBase.pin_p.reference.theta(start=0), led_driver.loadBase.pin_n.reference.theta(start=0), laptop2.loadBase.pin_p.reference.theta(start=0), laptop2.loadBase.pin_n.reference.theta(start=0)}
{led_load.i, led_load.p.i, -led_load.n.i, -led_driver.pin_p.i, -led_driver.vDC.p.i, led_driver.vDC.n.i, -led_driver.vDC.i, led_driver.pin_n.i}
{laptop_load.i, laptop_load.p.i, -laptop_load.n.i, -laptop2.pin_p.i, -laptop2.vDC.p.i, laptop2.vDC.n.i, -laptop2.vDC.i, laptop2.pin_n.i}
{zone_1.u, zone_1.dummyRealVar_1, led_driver.PLoss}
{zone_2.u, zone_2.dummyRealVar_1, laptop2.PLoss}
{ground2.p.v, PhA.pin_n.v[1].im, PhB.pin_n.v[1].im, PhC.pin_n.v[1].im, ground.pin.v[1].im, PhA.pin_n.v[2].im, PhB.pin_n.v[2].im, PhC.pin_n.v[2].im, ground.pin.v[2].im, PhA.pin_n.v[3].im, PhB.pin_n.v[3].im, PhC.pin_n.v[3].im, ground.pin.v[3].im, PhA.pin_n.v[4].im, PhB.pin_n.v[4].im, PhC.pin_n.v[4].im, ground.pin.v[4].im, PhA.pin_n.v[5].im, PhB.pin_n.v[5].im, PhC.pin_n.v[5].im, ground.pin.v[5].im, PhA.pin_n.v[6].im, PhB.pin_n.v[6].im, PhC.pin_n.v[6].im, ground.pin.v[6].im, PhA.pin_n.v[7].im, PhB.pin_n.v[7].im, PhC.pin_n.v[7].im, ground.pin.v[7].im, PhA.pin_n.v[8].im, PhB.pin_n.v[8].im, PhC.pin_n.v[8].im, ground.pin.v[8].im, ground1.pin.v[1].im, laptop2.hPin_N.v[1].im, led_driver.hPin_N.v[1].im, r.pin_n.v[1].im, test_DY.hPin_N.v[1].im, test_DY.idealTransformer1.pinN_Sec.v[1].im, test_DY.idealTransformer2.pinN_Sec.v[1].im, test_DY.idealTransformer3.pinN_Sec.v[1].im, laptop2.loadBase.pin_n.v[1].im, led_driver.loadBase.pin_n.v[1].im, ground1.pin.v[2].im, laptop2.hPin_N.v[2].im, led_driver.hPin_N.v[2].im, r.pin_n.v[2].im, test_DY.hPin_N.v[2].im, test_DY.idealTransformer1.pinN_Sec.v[2].im, test_DY.idealTransformer2.pinN_Sec.v[2].im, test_DY.idealTransformer3.pinN_Sec.v[2].im, laptop2.loadBase.pin_n.v[2].im, led_driver.loadBase.pin_n.v[2].im, ground1.pin.v[3].im, laptop2.hPin_N.v[3].im, led_driver.hPin_N.v[3].im, r.pin_n.v[3].im, test_DY.hPin_N.v[3].im, test_DY.idealTransformer1.pinN_Sec.v[3].im, test_DY.idealTransformer2.pinN_Sec.v[3].im, test_DY.idealTransformer3.pinN_Sec.v[3].im, laptop2.loadBase.pin_n.v[3].im, led_driver.loadBase.pin_n.v[3].im, ground1.pin.v[4].im, laptop2.hPin_N.v[4].im, led_driver.hPin_N.v[4].im, r.pin_n.v[4].im, test_DY.hPin_N.v[4].im, test_DY.idealTransformer1.pinN_Sec.v[4].im, test_DY.idealTransformer2.pinN_Sec.v[4].im, test_DY.idealTransformer3.pinN_Sec.v[4].im, laptop2.loadBase.pin_n.v[4].im, led_driver.loadBase.pin_n.v[4].im, ground1.pin.v[5].im, laptop2.hPin_N.v[5].im, led_driver.hPin_N.v[5].im, r.pin_n.v[5].im, test_DY.hPin_N.v[5].im, test_DY.idealTransformer1.pinN_Sec.v[5].im, test_DY.idealTransformer2.pinN_Sec.v[5].im, test_DY.idealTransformer3.pinN_Sec.v[5].im, laptop2.loadBase.pin_n.v[5].im, led_driver.loadBase.pin_n.v[5].im, ground1.pin.v[6].im, laptop2.hPin_N.v[6].im, led_driver.hPin_N.v[6].im, r.pin_n.v[6].im, test_DY.hPin_N.v[6].im, test_DY.idealTransformer1.pinN_Sec.v[6].im, test_DY.idealTransformer2.pinN_Sec.v[6].im, test_DY.idealTransformer3.pinN_Sec.v[6].im, laptop2.loadBase.pin_n.v[6].im, led_driver.loadBase.pin_n.v[6].im, ground1.pin.v[7].im, laptop2.hPin_N.v[7].im, led_driver.hPin_N.v[7].im, r.pin_n.v[7].im, test_DY.hPin_N.v[7].im, test_DY.idealTransformer1.pinN_Sec.v[7].im, test_DY.idealTransformer2.pinN_Sec.v[7].im, test_DY.idealTransformer3.pinN_Sec.v[7].im, laptop2.loadBase.pin_n.v[7].im, led_driver.loadBase.pin_n.v[7].im, ground1.pin.v[8].im, laptop2.hPin_N.v[8].im, led_driver.hPin_N.v[8].im, r.pin_n.v[8].im, test_DY.hPin_N.v[8].im, test_DY.idealTransformer1.pinN_Sec.v[8].im, test_DY.idealTransformer2.pinN_Sec.v[8].im, test_DY.idealTransformer3.pinN_Sec.v[8].im, laptop2.loadBase.pin_n.v[8].im, led_driver.loadBase.pin_n.v[8].im, led_driver.pin_n.v, led_load.n.v, led_driver.vDC.n.v, ground3.p.v, laptop2.pin_n.v, laptop_load.n.v, laptop2.vDC.n.v, temp_448.im, temp_463.im, temp_478.im, temp_493.im, temp_508.im, temp_523.im, temp_538.im, temp_553.im, temp_568.im, temp_583.im, temp_598.im, temp_613.im, temp_628.im, temp_643.im, temp_658.im, temp_673.im, temp_848.im, temp_863.im, temp_878.im, temp_893.im, temp_908.im, temp_923.im, temp_938.im, temp_953.im, temp_968.im, temp_983.im, temp_998.im, temp_1013.im, temp_1028.im, temp_1043.im, temp_1058.im, temp_1073.im, temp_1248.im, temp_1263.im, temp_1278.im, temp_1293.im, temp_1308.im, temp_1323.im, temp_1338.im, temp_1353.im, temp_1368.im, temp_1383.im, temp_1398.im, temp_1413.im, temp_1428.im, temp_1443.im, temp_1458.im, temp_1473.im, temp_1703.im, temp_1718.im, temp_1733.im, temp_1748.im, temp_1763.im, temp_1778.im, temp_1793.im, temp_1911.im, temp_1926.im, temp_1941.im, temp_1956.im, temp_1971.im, temp_1986.im, temp_2001.im}
{PhA.pin_n.v[1].re, PhB.pin_n.v[1].re, PhC.pin_n.v[1].re, ground.pin.v[1].re, PhA.pin_n.v[2].re, PhB.pin_n.v[2].re, PhC.pin_n.v[2].re, ground.pin.v[2].re, PhA.pin_n.v[3].re, PhB.pin_n.v[3].re, PhC.pin_n.v[3].re, ground.pin.v[3].re, PhA.pin_n.v[4].re, PhB.pin_n.v[4].re, PhC.pin_n.v[4].re, ground.pin.v[4].re, PhA.pin_n.v[5].re, PhB.pin_n.v[5].re, PhC.pin_n.v[5].re, ground.pin.v[5].re, PhA.pin_n.v[6].re, PhB.pin_n.v[6].re, PhC.pin_n.v[6].re, ground.pin.v[6].re, PhA.pin_n.v[7].re, PhB.pin_n.v[7].re, PhC.pin_n.v[7].re, ground.pin.v[7].re, PhA.pin_n.v[8].re, PhB.pin_n.v[8].re, PhC.pin_n.v[8].re, ground.pin.v[8].re, ground1.pin.v[1].re, laptop2.hPin_N.v[1].re, led_driver.hPin_N.v[1].re, r.pin_n.v[1].re, test_DY.hPin_N.v[1].re, test_DY.idealTransformer1.pinN_Sec.v[1].re, test_DY.idealTransformer2.pinN_Sec.v[1].re, test_DY.idealTransformer3.pinN_Sec.v[1].re, laptop2.loadBase.pin_n.v[1].re, led_driver.loadBase.pin_n.v[1].re, ground1.pin.v[2].re, laptop2.hPin_N.v[2].re, led_driver.hPin_N.v[2].re, r.pin_n.v[2].re, test_DY.hPin_N.v[2].re, test_DY.idealTransformer1.pinN_Sec.v[2].re, test_DY.idealTransformer2.pinN_Sec.v[2].re, test_DY.idealTransformer3.pinN_Sec.v[2].re, laptop2.loadBase.pin_n.v[2].re, led_driver.loadBase.pin_n.v[2].re, ground1.pin.v[3].re, laptop2.hPin_N.v[3].re, led_driver.hPin_N.v[3].re, r.pin_n.v[3].re, test_DY.hPin_N.v[3].re, test_DY.idealTransformer1.pinN_Sec.v[3].re, test_DY.idealTransformer2.pinN_Sec.v[3].re, test_DY.idealTransformer3.pinN_Sec.v[3].re, laptop2.loadBase.pin_n.v[3].re, led_driver.loadBase.pin_n.v[3].re, ground1.pin.v[4].re, laptop2.hPin_N.v[4].re, led_driver.hPin_N.v[4].re, r.pin_n.v[4].re, test_DY.hPin_N.v[4].re, test_DY.idealTransformer1.pinN_Sec.v[4].re, test_DY.idealTransformer2.pinN_Sec.v[4].re, test_DY.idealTransformer3.pinN_Sec.v[4].re, laptop2.loadBase.pin_n.v[4].re, led_driver.loadBase.pin_n.v[4].re, ground1.pin.v[5].re, laptop2.hPin_N.v[5].re, led_driver.hPin_N.v[5].re, r.pin_n.v[5].re, test_DY.hPin_N.v[5].re, test_DY.idealTransformer1.pinN_Sec.v[5].re, test_DY.idealTransformer2.pinN_Sec.v[5].re, test_DY.idealTransformer3.pinN_Sec.v[5].re, laptop2.loadBase.pin_n.v[5].re, led_driver.loadBase.pin_n.v[5].re, ground1.pin.v[6].re, laptop2.hPin_N.v[6].re, led_driver.hPin_N.v[6].re, r.pin_n.v[6].re, test_DY.hPin_N.v[6].re, test_DY.idealTransformer1.pinN_Sec.v[6].re, test_DY.idealTransformer2.pinN_Sec.v[6].re, test_DY.idealTransformer3.pinN_Sec.v[6].re, laptop2.loadBase.pin_n.v[6].re, led_driver.loadBase.pin_n.v[6].re, ground1.pin.v[7].re, laptop2.hPin_N.v[7].re, led_driver.hPin_N.v[7].re, r.pin_n.v[7].re, test_DY.hPin_N.v[7].re, test_DY.idealTransformer1.pinN_Sec.v[7].re, test_DY.idealTransformer2.pinN_Sec.v[7].re, test_DY.idealTransformer3.pinN_Sec.v[7].re, laptop2.loadBase.pin_n.v[7].re, led_driver.loadBase.pin_n.v[7].re, ground1.pin.v[8].re, laptop2.hPin_N.v[8].re, led_driver.hPin_N.v[8].re, r.pin_n.v[8].re, test_DY.hPin_N.v[8].re, test_DY.idealTransformer1.pinN_Sec.v[8].re, test_DY.idealTransformer2.pinN_Sec.v[8].re, test_DY.idealTransformer3.pinN_Sec.v[8].re, laptop2.loadBase.pin_n.v[8].re, led_driver.loadBase.pin_n.v[8].re}
{led_driver.loadBase.v[1].im(start=0), led_driver.hPin_P.v[1].im, test_DY.pinSec_A.v[1].im, test_DY.idealTransformer1.pinP_Sec.v[1].im, led_driver.loadBase.pin_p.v[1].im, test_DY.idealTransformer1.vSec[1].im}
{led_driver.loadBase.v[1].re(start=0), led_driver.hPin_P.v[1].re, test_DY.pinSec_A.v[1].re, test_DY.idealTransformer1.pinP_Sec.v[1].re, led_driver.loadBase.pin_p.v[1].re, test_DY.idealTransformer1.vSec[1].re}
{led_driver.loadBase.v[2].im(start=0), led_driver.hPin_P.v[2].im, test_DY.pinSec_A.v[2].im, test_DY.idealTransformer1.pinP_Sec.v[2].im, led_driver.loadBase.pin_p.v[2].im, test_DY.idealTransformer1.vSec[2].im}
{led_driver.loadBase.v[2].re(start=0), led_driver.hPin_P.v[2].re, test_DY.pinSec_A.v[2].re, test_DY.idealTransformer1.pinP_Sec.v[2].re, led_driver.loadBase.pin_p.v[2].re, test_DY.idealTransformer1.vSec[2].re}
{led_driver.loadBase.v[3].im(start=0), led_driver.hPin_P.v[3].im, test_DY.pinSec_A.v[3].im, test_DY.idealTransformer1.pinP_Sec.v[3].im, led_driver.loadBase.pin_p.v[3].im, test_DY.idealTransformer1.vSec[3].im}
{led_driver.loadBase.v[3].re(start=0), led_driver.hPin_P.v[3].re, test_DY.pinSec_A.v[3].re, test_DY.idealTransformer1.pinP_Sec.v[3].re, led_driver.loadBase.pin_p.v[3].re, test_DY.idealTransformer1.vSec[3].re}
{led_driver.loadBase.v[4].im(start=0), led_driver.hPin_P.v[4].im, test_DY.pinSec_A.v[4].im, test_DY.idealTransformer1.pinP_Sec.v[4].im, led_driver.loadBase.pin_p.v[4].im, test_DY.idealTransformer1.vSec[4].im}
{led_driver.loadBase.v[4].re(start=0), led_driver.hPin_P.v[4].re, test_DY.pinSec_A.v[4].re, test_DY.idealTransformer1.pinP_Sec.v[4].re, led_driver.loadBase.pin_p.v[4].re, test_DY.idealTransformer1.vSec[4].re}
{led_driver.loadBase.v[5].im(start=0), led_driver.hPin_P.v[5].im, test_DY.pinSec_A.v[5].im, test_DY.idealTransformer1.pinP_Sec.v[5].im, led_driver.loadBase.pin_p.v[5].im, test_DY.idealTransformer1.vSec[5].im}
{led_driver.loadBase.v[5].re(start=0), led_driver.hPin_P.v[5].re, test_DY.pinSec_A.v[5].re, test_DY.idealTransformer1.pinP_Sec.v[5].re, led_driver.loadBase.pin_p.v[5].re, test_DY.idealTransformer1.vSec[5].re}
{led_driver.loadBase.v[6].im(start=0), led_driver.hPin_P.v[6].im, test_DY.pinSec_A.v[6].im, test_DY.idealTransformer1.pinP_Sec.v[6].im, led_driver.loadBase.pin_p.v[6].im, test_DY.idealTransformer1.vSec[6].im}
{led_driver.loadBase.v[6].re(start=0), led_driver.hPin_P.v[6].re, test_DY.pinSec_A.v[6].re, test_DY.idealTransformer1.pinP_Sec.v[6].re, led_driver.loadBase.pin_p.v[6].re, test_DY.idealTransformer1.vSec[6].re}
{led_driver.loadBase.v[7].im(start=0), led_driver.hPin_P.v[7].im, test_DY.pinSec_A.v[7].im, test_DY.idealTransformer1.pinP_Sec.v[7].im, led_driver.loadBase.pin_p.v[7].im, test_DY.idealTransformer1.vSec[7].im}
{led_driver.loadBase.v[7].re(start=0), led_driver.hPin_P.v[7].re, test_DY.pinSec_A.v[7].re, test_DY.idealTransformer1.pinP_Sec.v[7].re, led_driver.loadBase.pin_p.v[7].re, test_DY.idealTransformer1.vSec[7].re}
{led_driver.loadBase.v[8].im(start=0), led_driver.hPin_P.v[8].im, test_DY.pinSec_A.v[8].im, test_DY.idealTransformer1.pinP_Sec.v[8].im, led_driver.loadBase.pin_p.v[8].im, test_DY.idealTransformer1.vSec[8].im}
{led_driver.loadBase.v[8].re(start=0), led_driver.hPin_P.v[8].re, test_DY.pinSec_A.v[8].re, test_DY.idealTransformer1.pinP_Sec.v[8].re, led_driver.loadBase.pin_p.v[8].re, test_DY.idealTransformer1.vSec[8].re}
{laptop2.loadBase.v[1].im(start=0), laptop2.hPin_P.v[1].im, test_DY.pinSec_B.v[1].im, test_DY.idealTransformer2.pinP_Sec.v[1].im, laptop2.loadBase.pin_p.v[1].im, test_DY.idealTransformer2.vSec[1].im}
{laptop2.loadBase.v[1].re(start=0), laptop2.hPin_P.v[1].re, test_DY.pinSec_B.v[1].re, test_DY.idealTransformer2.pinP_Sec.v[1].re, laptop2.loadBase.pin_p.v[1].re, test_DY.idealTransformer2.vSec[1].re}
{laptop2.loadBase.v[2].im(start=0), laptop2.hPin_P.v[2].im, test_DY.pinSec_B.v[2].im, test_DY.idealTransformer2.pinP_Sec.v[2].im, laptop2.loadBase.pin_p.v[2].im, test_DY.idealTransformer2.vSec[2].im}
{laptop2.loadBase.v[2].re(start=0), laptop2.hPin_P.v[2].re, test_DY.pinSec_B.v[2].re, test_DY.idealTransformer2.pinP_Sec.v[2].re, laptop2.loadBase.pin_p.v[2].re, test_DY.idealTransformer2.vSec[2].re}
{laptop2.loadBase.v[3].im(start=0), laptop2.hPin_P.v[3].im, test_DY.pinSec_B.v[3].im, test_DY.idealTransformer2.pinP_Sec.v[3].im, laptop2.loadBase.pin_p.v[3].im, test_DY.idealTransformer2.vSec[3].im}
{laptop2.loadBase.v[3].re(start=0), laptop2.hPin_P.v[3].re, test_DY.pinSec_B.v[3].re, test_DY.idealTransformer2.pinP_Sec.v[3].re, laptop2.loadBase.pin_p.v[3].re, test_DY.idealTransformer2.vSec[3].re}
{laptop2.loadBase.v[4].im(start=0), laptop2.hPin_P.v[4].im, test_DY.pinSec_B.v[4].im, test_DY.idealTransformer2.pinP_Sec.v[4].im, laptop2.loadBase.pin_p.v[4].im, test_DY.idealTransformer2.vSec[4].im}
{laptop2.loadBase.v[4].re(start=0), laptop2.hPin_P.v[4].re, test_DY.pinSec_B.v[4].re, test_DY.idealTransformer2.pinP_Sec.v[4].re, laptop2.loadBase.pin_p.v[4].re, test_DY.idealTransformer2.vSec[4].re}
{laptop2.loadBase.v[5].im(start=0), laptop2.hPin_P.v[5].im, test_DY.pinSec_B.v[5].im, test_DY.idealTransformer2.pinP_Sec.v[5].im, laptop2.loadBase.pin_p.v[5].im, test_DY.idealTransformer2.vSec[5].im}
{laptop2.loadBase.v[5].re(start=0), laptop2.hPin_P.v[5].re, test_DY.pinSec_B.v[5].re, test_DY.idealTransformer2.pinP_Sec.v[5].re, laptop2.loadBase.pin_p.v[5].re, test_DY.idealTransformer2.vSec[5].re}
{laptop2.loadBase.v[6].im(start=0), laptop2.hPin_P.v[6].im, test_DY.pinSec_B.v[6].im, test_DY.idealTransformer2.pinP_Sec.v[6].im, laptop2.loadBase.pin_p.v[6].im, test_DY.idealTransformer2.vSec[6].im}
{laptop2.loadBase.v[6].re(start=0), laptop2.hPin_P.v[6].re, test_DY.pinSec_B.v[6].re, test_DY.idealTransformer2.pinP_Sec.v[6].re, laptop2.loadBase.pin_p.v[6].re, test_DY.idealTransformer2.vSec[6].re}
{laptop2.loadBase.v[7].im(start=0), laptop2.hPin_P.v[7].im, test_DY.pinSec_B.v[7].im, test_DY.idealTransformer2.pinP_Sec.v[7].im, laptop2.loadBase.pin_p.v[7].im, test_DY.idealTransformer2.vSec[7].im}
{laptop2.loadBase.v[7].re(start=0), laptop2.hPin_P.v[7].re, test_DY.pinSec_B.v[7].re, test_DY.idealTransformer2.pinP_Sec.v[7].re, laptop2.loadBase.pin_p.v[7].re, test_DY.idealTransformer2.vSec[7].re}
{laptop2.loadBase.v[8].im(start=0), laptop2.hPin_P.v[8].im, test_DY.pinSec_B.v[8].im, test_DY.idealTransformer2.pinP_Sec.v[8].im, laptop2.loadBase.pin_p.v[8].im, test_DY.idealTransformer2.vSec[8].im}
{laptop2.loadBase.v[8].re(start=0), laptop2.hPin_P.v[8].re, test_DY.pinSec_B.v[8].re, test_DY.idealTransformer2.pinP_Sec.v[8].re, laptop2.loadBase.pin_p.v[8].re, test_DY.idealTransformer2.vSec[8].re}
{r.v[1].im(start=0), r.pin_p.v[1].im, test_DY.pinSec_C.v[1].im, test_DY.idealTransformer3.pinP_Sec.v[1].im, test_DY.idealTransformer3.vSec[1].im}
{r.v[1].re(start=0), r.pin_p.v[1].re, test_DY.pinSec_C.v[1].re, test_DY.idealTransformer3.pinP_Sec.v[1].re, test_DY.idealTransformer3.vSec[1].re}
{r.v[2].im(start=0), r.pin_p.v[2].im, test_DY.pinSec_C.v[2].im, test_DY.idealTransformer3.pinP_Sec.v[2].im, test_DY.idealTransformer3.vSec[2].im}
{r.v[2].re(start=0), r.pin_p.v[2].re, test_DY.pinSec_C.v[2].re, test_DY.idealTransformer3.pinP_Sec.v[2].re, test_DY.idealTransformer3.vSec[2].re}
{r.v[3].im(start=0), r.pin_p.v[3].im, test_DY.pinSec_C.v[3].im, test_DY.idealTransformer3.pinP_Sec.v[3].im, test_DY.idealTransformer3.vSec[3].im}
{r.v[3].re(start=0), r.pin_p.v[3].re, test_DY.pinSec_C.v[3].re, test_DY.idealTransformer3.pinP_Sec.v[3].re, test_DY.idealTransformer3.vSec[3].re}
{r.v[4].im(start=0), r.pin_p.v[4].im, test_DY.pinSec_C.v[4].im, test_DY.idealTransformer3.pinP_Sec.v[4].im, test_DY.idealTransformer3.vSec[4].im}
{r.v[4].re(start=0), r.pin_p.v[4].re, test_DY.pinSec_C.v[4].re, test_DY.idealTransformer3.pinP_Sec.v[4].re, test_DY.idealTransformer3.vSec[4].re}
{r.v[5].im(start=0), r.pin_p.v[5].im, test_DY.pinSec_C.v[5].im, test_DY.idealTransformer3.pinP_Sec.v[5].im, test_DY.idealTransformer3.vSec[5].im}
{r.v[5].re(start=0), r.pin_p.v[5].re, test_DY.pinSec_C.v[5].re, test_DY.idealTransformer3.pinP_Sec.v[5].re, test_DY.idealTransformer3.vSec[5].re}
{r.v[6].im(start=0), r.pin_p.v[6].im, test_DY.pinSec_C.v[6].im, test_DY.idealTransformer3.pinP_Sec.v[6].im, test_DY.idealTransformer3.vSec[6].im}
{r.v[6].re(start=0), r.pin_p.v[6].re, test_DY.pinSec_C.v[6].re, test_DY.idealTransformer3.pinP_Sec.v[6].re, test_DY.idealTransformer3.vSec[6].re}
{r.v[7].im(start=0), r.pin_p.v[7].im, test_DY.pinSec_C.v[7].im, test_DY.idealTransformer3.pinP_Sec.v[7].im, test_DY.idealTransformer3.vSec[7].im}
{r.v[7].re(start=0), r.pin_p.v[7].re, test_DY.pinSec_C.v[7].re, test_DY.idealTransformer3.pinP_Sec.v[7].re, test_DY.idealTransformer3.vSec[7].re}
{r.v[8].im(start=0), r.pin_p.v[8].im, test_DY.pinSec_C.v[8].im, test_DY.idealTransformer3.pinP_Sec.v[8].im, test_DY.idealTransformer3.vSec[8].im}
{r.v[8].re(start=0), r.pin_p.v[8].re, test_DY.pinSec_C.v[8].re, test_DY.idealTransformer3.pinP_Sec.v[8].re, test_DY.idealTransformer3.vSec[8].re}
{led_driver.vDC.V(start=1), led_driver.pin_p.v, led_load.p.v, led_driver.vDC.p.v, led_driver.vDC.v, led_load.v}
{laptop2.vDC.V(start=1), laptop2.pin_p.v, laptop_load.p.v, laptop2.vDC.p.v, laptop2.vDC.v, laptop_load.v}
{PhA.v[1].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[1].re, test_DY.idealTransformer2.pinN_Prim.v[1].re, PhA.pin_p.v[1].re, test_DY.pinPrim_A.v[1].re}
{PhA.v[2].im(start=0), test_DY.idealTransformer1.pinP_Prim.v[2].im, test_DY.idealTransformer2.pinN_Prim.v[2].im, PhA.pin_p.v[2].im, test_DY.pinPrim_A.v[2].im}
{PhA.v[2].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[2].re, test_DY.idealTransformer2.pinN_Prim.v[2].re, PhA.pin_p.v[2].re, test_DY.pinPrim_A.v[2].re}
{PhA.v[3].im(start=0), test_DY.idealTransformer1.pinP_Prim.v[3].im, test_DY.idealTransformer2.pinN_Prim.v[3].im, PhA.pin_p.v[3].im, test_DY.pinPrim_A.v[3].im}
{PhA.v[3].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[3].re, test_DY.idealTransformer2.pinN_Prim.v[3].re, PhA.pin_p.v[3].re, test_DY.pinPrim_A.v[3].re}
{PhA.v[4].im(start=0), test_DY.idealTransformer1.pinP_Prim.v[4].im, test_DY.idealTransformer2.pinN_Prim.v[4].im, PhA.pin_p.v[4].im, test_DY.pinPrim_A.v[4].im}
{PhA.v[4].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[4].re, test_DY.idealTransformer2.pinN_Prim.v[4].re, PhA.pin_p.v[4].re, test_DY.pinPrim_A.v[4].re}
{PhA.v[5].im(start=0), test_DY.idealTransformer1.pinP_Prim.v[5].im, test_DY.idealTransformer2.pinN_Prim.v[5].im, PhA.pin_p.v[5].im, test_DY.pinPrim_A.v[5].im}
{PhA.v[5].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[5].re, test_DY.idealTransformer2.pinN_Prim.v[5].re, PhA.pin_p.v[5].re, test_DY.pinPrim_A.v[5].re}
{PhA.v[6].im(start=0), test_DY.idealTransformer1.pinP_Prim.v[6].im, test_DY.idealTransformer2.pinN_Prim.v[6].im, PhA.pin_p.v[6].im, test_DY.pinPrim_A.v[6].im}
{PhA.v[6].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[6].re, test_DY.idealTransformer2.pinN_Prim.v[6].re, PhA.pin_p.v[6].re, test_DY.pinPrim_A.v[6].re}
{PhA.v[7].im(start=0), test_DY.idealTransformer1.pinP_Prim.v[7].im, test_DY.idealTransformer2.pinN_Prim.v[7].im, PhA.pin_p.v[7].im, test_DY.pinPrim_A.v[7].im}
{PhA.v[7].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[7].re, test_DY.idealTransformer2.pinN_Prim.v[7].re, PhA.pin_p.v[7].re, test_DY.pinPrim_A.v[7].re}
{PhA.v[8].im(start=0), test_DY.idealTransformer1.pinP_Prim.v[8].im, test_DY.idealTransformer2.pinN_Prim.v[8].im, PhA.pin_p.v[8].im, test_DY.pinPrim_A.v[8].im}
{PhA.v[8].re(start=0), test_DY.idealTransformer1.pinP_Prim.v[8].re, test_DY.idealTransformer2.pinN_Prim.v[8].re, PhA.pin_p.v[8].re, test_DY.pinPrim_A.v[8].re}
{PhC.v[1].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[1].im, test_DY.idealTransformer3.pinP_Prim.v[1].im, PhC.pin_p.v[1].im, test_DY.pinPrim_C.v[1].im}
{PhC.v[1].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[1].re, test_DY.idealTransformer3.pinP_Prim.v[1].re, PhC.pin_p.v[1].re, test_DY.pinPrim_C.v[1].re}
{PhC.v[2].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[2].im, test_DY.idealTransformer3.pinP_Prim.v[2].im, PhC.pin_p.v[2].im, test_DY.pinPrim_C.v[2].im}
{PhC.v[2].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[2].re, test_DY.idealTransformer3.pinP_Prim.v[2].re, PhC.pin_p.v[2].re, test_DY.pinPrim_C.v[2].re}
{PhC.v[3].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[3].im, test_DY.idealTransformer3.pinP_Prim.v[3].im, PhC.pin_p.v[3].im, test_DY.pinPrim_C.v[3].im}
{PhC.v[3].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[3].re, test_DY.idealTransformer3.pinP_Prim.v[3].re, PhC.pin_p.v[3].re, test_DY.pinPrim_C.v[3].re}
{PhC.v[4].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[4].im, test_DY.idealTransformer3.pinP_Prim.v[4].im, PhC.pin_p.v[4].im, test_DY.pinPrim_C.v[4].im}
{PhC.v[4].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[4].re, test_DY.idealTransformer3.pinP_Prim.v[4].re, PhC.pin_p.v[4].re, test_DY.pinPrim_C.v[4].re}
{PhC.v[5].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[5].im, test_DY.idealTransformer3.pinP_Prim.v[5].im, PhC.pin_p.v[5].im, test_DY.pinPrim_C.v[5].im}
{PhC.v[5].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[5].re, test_DY.idealTransformer3.pinP_Prim.v[5].re, PhC.pin_p.v[5].re, test_DY.pinPrim_C.v[5].re}
{PhC.v[6].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[6].im, test_DY.idealTransformer3.pinP_Prim.v[6].im, PhC.pin_p.v[6].im, test_DY.pinPrim_C.v[6].im}
{PhC.v[6].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[6].re, test_DY.idealTransformer3.pinP_Prim.v[6].re, PhC.pin_p.v[6].re, test_DY.pinPrim_C.v[6].re}
{PhC.v[7].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[7].im, test_DY.idealTransformer3.pinP_Prim.v[7].im, PhC.pin_p.v[7].im, test_DY.pinPrim_C.v[7].im}
{PhC.v[7].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[7].re, test_DY.idealTransformer3.pinP_Prim.v[7].re, PhC.pin_p.v[7].re, test_DY.pinPrim_C.v[7].re}
{PhC.v[8].im(start=0), test_DY.idealTransformer1.pinN_Prim.v[8].im, test_DY.idealTransformer3.pinP_Prim.v[8].im, PhC.pin_p.v[8].im, test_DY.pinPrim_C.v[8].im}
{PhC.v[8].re(start=0), test_DY.idealTransformer1.pinN_Prim.v[8].re, test_DY.idealTransformer3.pinP_Prim.v[8].re, PhC.pin_p.v[8].re, test_DY.pinPrim_C.v[8].re}
{PhB.v[1].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[1].re, test_DY.idealTransformer3.pinN_Prim.v[1].re, PhB.pin_p.v[1].re, test_DY.pinPrim_B.v[1].re}
{PhB.v[2].im(start=0), test_DY.idealTransformer2.pinP_Prim.v[2].im, test_DY.idealTransformer3.pinN_Prim.v[2].im, PhB.pin_p.v[2].im, test_DY.pinPrim_B.v[2].im}
{PhB.v[2].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[2].re, test_DY.idealTransformer3.pinN_Prim.v[2].re, PhB.pin_p.v[2].re, test_DY.pinPrim_B.v[2].re}
{PhB.v[3].im(start=0), test_DY.idealTransformer2.pinP_Prim.v[3].im, test_DY.idealTransformer3.pinN_Prim.v[3].im, PhB.pin_p.v[3].im, test_DY.pinPrim_B.v[3].im}
{PhB.v[3].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[3].re, test_DY.idealTransformer3.pinN_Prim.v[3].re, PhB.pin_p.v[3].re, test_DY.pinPrim_B.v[3].re}
{PhB.v[4].im(start=0), test_DY.idealTransformer2.pinP_Prim.v[4].im, test_DY.idealTransformer3.pinN_Prim.v[4].im, PhB.pin_p.v[4].im, test_DY.pinPrim_B.v[4].im}
{PhB.v[4].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[4].re, test_DY.idealTransformer3.pinN_Prim.v[4].re, PhB.pin_p.v[4].re, test_DY.pinPrim_B.v[4].re}
{PhB.v[5].im(start=0), test_DY.idealTransformer2.pinP_Prim.v[5].im, test_DY.idealTransformer3.pinN_Prim.v[5].im, PhB.pin_p.v[5].im, test_DY.pinPrim_B.v[5].im}
{PhB.v[5].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[5].re, test_DY.idealTransformer3.pinN_Prim.v[5].re, PhB.pin_p.v[5].re, test_DY.pinPrim_B.v[5].re}
{PhB.v[6].im(start=0), test_DY.idealTransformer2.pinP_Prim.v[6].im, test_DY.idealTransformer3.pinN_Prim.v[6].im, PhB.pin_p.v[6].im, test_DY.pinPrim_B.v[6].im}
{PhB.v[6].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[6].re, test_DY.idealTransformer3.pinN_Prim.v[6].re, PhB.pin_p.v[6].re, test_DY.pinPrim_B.v[6].re}
{PhB.v[7].im(start=0), test_DY.idealTransformer2.pinP_Prim.v[7].im, test_DY.idealTransformer3.pinN_Prim.v[7].im, PhB.pin_p.v[7].im, test_DY.pinPrim_B.v[7].im}
{PhB.v[7].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[7].re, test_DY.idealTransformer3.pinN_Prim.v[7].re, PhB.pin_p.v[7].re, test_DY.pinPrim_B.v[7].re}
{PhB.v[8].im(start=0), test_DY.idealTransformer2.pinP_Prim.v[8].im, test_DY.idealTransformer3.pinN_Prim.v[8].im, PhB.pin_p.v[8].im, test_DY.pinPrim_B.v[8].im}
{PhB.v[8].re(start=0), test_DY.idealTransformer2.pinP_Prim.v[8].re, test_DY.idealTransformer3.pinN_Prim.v[8].re, PhB.pin_p.v[8].re, test_DY.pinPrim_B.v[8].re}
{systemDef.numHrm, PhA.pin_p.h, PhA.pin_n.h, PhB.pin_p.h, PhB.pin_n.h, PhC.pin_p.h, PhC.pin_n.h, test_DY.idealTransformer1.pinP_Prim.h, test_DY.idealTransformer1.pinN_Prim.h, test_DY.idealTransformer1.pinP_Sec.h, test_DY.idealTransformer1.pinN_Sec.h, test_DY.idealTransformer2.pinP_Prim.h, test_DY.idealTransformer2.pinN_Prim.h, test_DY.idealTransformer2.pinP_Sec.h, test_DY.idealTransformer2.pinN_Sec.h, test_DY.idealTransformer3.pinP_Prim.h, test_DY.idealTransformer3.pinN_Prim.h, test_DY.idealTransformer3.pinP_Sec.h, test_DY.idealTransformer3.pinN_Sec.h, test_DY.pinPrim_A.h, test_DY.pinPrim_B.h, test_DY.pinPrim_C.h, test_DY.pinSec_A.h, test_DY.pinSec_B.h, test_DY.pinSec_C.h, test_DY.hPin_N.h, ground.pin.h, laptop2.hPin_P.h, laptop2.hPin_N.h, laptop2.loadBase.pin_p.h, laptop2.loadBase.pin_n.h, led_driver.hPin_P.h, led_driver.hPin_N.h, led_driver.loadBase.pin_p.h, led_driver.loadBase.pin_n.h, ground1.pin.h, r.pin_p.h, r.pin_n.h}
{PhA.matDim[1], PhB.matDim[1], PhC.matDim[1]}
{PhA.matDim[2], PhB.matDim[2], PhC.matDim[2], laptop2.matDim[2], led_driver.matDim[2]}
{PhA.argDataMat[1,1], PhB.argDataMat[1,1]}
{laptop2.matDim[1], led_driver.matDim[1]}
{PhA.v[1].im(start=0), PhA.magDataMat[1,1], test_DY.idealTransformer1.pinP_Prim.v[1].im, test_DY.idealTransformer2.pinN_Prim.v[1].im, PhA.pin_p.v[1].im, test_DY.pinPrim_A.v[1].im}
{PhA.properties.ComponentType, PhB.properties.ComponentType, PhC.properties.ComponentType}
{PhB.v[1].im(start=0), PhB.magDataMat[1,1], test_DY.idealTransformer2.pinP_Prim.v[1].im, test_DY.idealTransformer3.pinN_Prim.v[1].im, PhB.pin_p.v[1].im, test_DY.pinPrim_B.v[1].im}
{test_DY.idealTransformer1.properties.ComponentType, test_DY.idealTransformer2.properties.ComponentType, test_DY.idealTransformer3.properties.ComponentType}
{laptop2.properties.ComponentType, led_driver.properties.ComponentType}
{ground.properties.ComponentType, ground1.properties.ComponentType}
{led_load.properties.ComponentType, laptop_load.properties.ComponentType}
{zone_1.properties.ComponentType, zone_2.properties.ComponentType}
1426 variables can be eliminated

Incidence:
 eq 0:
 eq 1: der(PhA.theta)
 eq 2: der(PhA.theta) PhA.omega
 eq 3: der(PhB.theta)
 eq 4: der(PhB.theta) PhB.omega
 eq 5: der(PhC.theta)
 eq 6: der(PhC.theta) PhC.omega
 eq 7: led_driver.loadBase.i[1].re test_DY.idealTransformer1.iPrim[1].re
 eq 8: led_driver.loadBase.i[1].im test_DY.idealTransformer1.iPrim[1].im
 eq 9: led_driver.loadBase.i[2].re test_DY.idealTransformer1.iPrim[2].re
 eq 10: led_driver.loadBase.i[2].im test_DY.idealTransformer1.iPrim[2].im
 eq 11: led_driver.loadBase.i[3].re test_DY.idealTransformer1.iPrim[3].re
 eq 12: led_driver.loadBase.i[3].im test_DY.idealTransformer1.iPrim[3].im
 eq 13: led_driver.loadBase.i[4].re test_DY.idealTransformer1.iPrim[4].re
 eq 14: led_driver.loadBase.i[4].im test_DY.idealTransformer1.iPrim[4].im
 eq 15: led_driver.loadBase.i[5].re test_DY.idealTransformer1.iPrim[5].re
 eq 16: led_driver.loadBase.i[5].im test_DY.idealTransformer1.iPrim[5].im
 eq 17: led_driver.loadBase.i[6].re test_DY.idealTransformer1.iPrim[6].re
 eq 18: led_driver.loadBase.i[6].im test_DY.idealTransformer1.iPrim[6].im
 eq 19: led_driver.loadBase.i[7].re test_DY.idealTransformer1.iPrim[7].re
 eq 20: led_driver.loadBase.i[7].im test_DY.idealTransformer1.iPrim[7].im
 eq 21: led_driver.loadBase.i[8].re test_DY.idealTransformer1.iPrim[8].re
 eq 22: led_driver.loadBase.i[8].im test_DY.idealTransformer1.iPrim[8].im
 eq 23: laptop2.loadBase.i[1].re test_DY.idealTransformer2.iPrim[1].re
 eq 24: laptop2.loadBase.i[1].im test_DY.idealTransformer2.iPrim[1].im
 eq 25: laptop2.loadBase.i[2].re test_DY.idealTransformer2.iPrim[2].re
 eq 26: laptop2.loadBase.i[2].im test_DY.idealTransformer2.iPrim[2].im
 eq 27: laptop2.loadBase.i[3].re test_DY.idealTransformer2.iPrim[3].re
 eq 28: laptop2.loadBase.i[3].im test_DY.idealTransformer2.iPrim[3].im
 eq 29: laptop2.loadBase.i[4].re test_DY.idealTransformer2.iPrim[4].re
 eq 30: laptop2.loadBase.i[4].im test_DY.idealTransformer2.iPrim[4].im
 eq 31: laptop2.loadBase.i[5].re test_DY.idealTransformer2.iPrim[5].re
 eq 32: laptop2.loadBase.i[5].im test_DY.idealTransformer2.iPrim[5].im
 eq 33: laptop2.loadBase.i[6].re test_DY.idealTransformer2.iPrim[6].re
 eq 34: laptop2.loadBase.i[6].im test_DY.idealTransformer2.iPrim[6].im
 eq 35: laptop2.loadBase.i[7].re test_DY.idealTransformer2.iPrim[7].re
 eq 36: laptop2.loadBase.i[7].im test_DY.idealTransformer2.iPrim[7].im
 eq 37: laptop2.loadBase.i[8].re test_DY.idealTransformer2.iPrim[8].re
 eq 38: laptop2.loadBase.i[8].im test_DY.idealTransformer2.iPrim[8].im
 eq 39: laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im
 eq 40: laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re
 eq 41: laptop2.loadBase.i[2].re laptop2.c[1]
 eq 42: laptop2.loadBase.i[2].im laptop2.c[1]
 eq 43: laptop2.loadBase.i[3].re laptop2.c[2]
 eq 44: laptop2.loadBase.i[3].im laptop2.c[2]
 eq 45: laptop2.loadBase.i[4].re laptop2.c[3]
 eq 46: laptop2.loadBase.i[4].im laptop2.c[3]
 eq 47: laptop2.loadBase.i[5].re laptop2.c[4]
 eq 48: laptop2.loadBase.i[5].im laptop2.c[4]
 eq 49: laptop2.loadBase.i[6].re laptop2.c[5]
 eq 50: laptop2.loadBase.i[6].im laptop2.c[5]
 eq 51: laptop2.loadBase.i[7].re laptop2.c[6]
 eq 52: laptop2.loadBase.i[7].im laptop2.c[6]
 eq 53: laptop2.loadBase.i[8].re laptop2.c[7]
 eq 54: laptop2.loadBase.i[8].im laptop2.c[7]
 eq 55:
 eq 56: der(PhA.theta) laptop2.loadBase.omega
 eq 57: led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im
 eq 58: led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re
 eq 59: led_driver.loadBase.i[2].re led_driver.c[1]
 eq 60: led_driver.loadBase.i[2].im led_driver.c[1]
 eq 61: led_driver.loadBase.i[3].re led_driver.c[2]
 eq 62: led_driver.loadBase.i[3].im led_driver.c[2]
 eq 63: led_driver.loadBase.i[4].re led_driver.c[3]
 eq 64: led_driver.loadBase.i[4].im led_driver.c[3]
 eq 65: led_driver.loadBase.i[5].re led_driver.c[4]
 eq 66: led_driver.loadBase.i[5].im led_driver.c[4]
 eq 67: led_driver.loadBase.i[6].re led_driver.c[5]
 eq 68: led_driver.loadBase.i[6].im led_driver.c[5]
 eq 69: led_driver.loadBase.i[7].re led_driver.c[6]
 eq 70: led_driver.loadBase.i[7].im led_driver.c[6]
 eq 71: led_driver.loadBase.i[8].re led_driver.c[7]
 eq 72: led_driver.loadBase.i[8].im led_driver.c[7]
 eq 73:
 eq 74: der(PhA.theta) led_driver.loadBase.omega
 eq 75: der(PhA.theta) r.omega
 eq 76: PhA.i[1].im PhB.i[1].im PhC.i[1].im ground.pin.iIm[1]
 eq 77: PhA.i[2].im PhB.i[2].im PhC.i[2].im ground.pin.iIm[2]
 eq 78: PhA.i[3].im PhB.i[3].im PhC.i[3].im ground.pin.iIm[3]
 eq 79: PhA.i[4].im PhB.i[4].im PhC.i[4].im ground.pin.iIm[4]
 eq 80: PhA.i[5].im PhB.i[5].im PhC.i[5].im ground.pin.iIm[5]
 eq 81: PhA.i[6].im PhB.i[6].im PhC.i[6].im ground.pin.iIm[6]
 eq 82: PhA.i[7].im PhB.i[7].im PhC.i[7].im ground.pin.iIm[7]
 eq 83: PhA.i[8].im PhB.i[8].im PhC.i[8].im ground.pin.iIm[8]
 eq 84: PhA.i[1].re PhB.i[1].re PhC.i[1].re ground.pin.iRe[1]
 eq 85: PhA.i[2].re PhB.i[2].re PhC.i[2].re ground.pin.iRe[2]
 eq 86: PhA.i[3].re PhB.i[3].re PhC.i[3].re ground.pin.iRe[3]
 eq 87: PhA.i[4].re PhB.i[4].re PhC.i[4].re ground.pin.iRe[4]
 eq 88: PhA.i[5].re PhB.i[5].re PhC.i[5].re ground.pin.iRe[5]
 eq 89: PhA.i[6].re PhB.i[6].re PhC.i[6].re ground.pin.iRe[6]
 eq 90: PhA.i[7].re PhB.i[7].re PhC.i[7].re ground.pin.iRe[7]
 eq 91: PhA.i[8].re PhB.i[8].re PhC.i[8].re ground.pin.iRe[8]
 eq 92: ground1.pin.iIm[1] laptop2.loadBase.i[1].im led_driver.loadBase.i[1].im test_DY.hPin_N.iIm[1]
 eq 93: ground1.pin.iIm[2] laptop2.loadBase.i[2].im led_driver.loadBase.i[2].im test_DY.hPin_N.iIm[2]
 eq 94: ground1.pin.iIm[3] laptop2.loadBase.i[3].im led_driver.loadBase.i[3].im test_DY.hPin_N.iIm[3]
 eq 95: ground1.pin.iIm[4] laptop2.loadBase.i[4].im led_driver.loadBase.i[4].im test_DY.hPin_N.iIm[4]
 eq 96: ground1.pin.iIm[5] laptop2.loadBase.i[5].im led_driver.loadBase.i[5].im test_DY.hPin_N.iIm[5]
 eq 97: ground1.pin.iIm[6] laptop2.loadBase.i[6].im led_driver.loadBase.i[6].im test_DY.hPin_N.iIm[6]
 eq 98: ground1.pin.iIm[7] laptop2.loadBase.i[7].im led_driver.loadBase.i[7].im test_DY.hPin_N.iIm[7]
 eq 99: ground1.pin.iIm[8] laptop2.loadBase.i[8].im led_driver.loadBase.i[8].im test_DY.hPin_N.iIm[8]
 eq 100: ground1.pin.iRe[1] laptop2.loadBase.i[1].re led_driver.loadBase.i[1].re test_DY.hPin_N.iRe[1]
 eq 101: ground1.pin.iRe[2] laptop2.loadBase.i[2].re led_driver.loadBase.i[2].re test_DY.hPin_N.iRe[2]
 eq 102: ground1.pin.iRe[3] laptop2.loadBase.i[3].re led_driver.loadBase.i[3].re test_DY.hPin_N.iRe[3]
 eq 103: ground1.pin.iRe[4] laptop2.loadBase.i[4].re led_driver.loadBase.i[4].re test_DY.hPin_N.iRe[4]
 eq 104: ground1.pin.iRe[5] laptop2.loadBase.i[5].re led_driver.loadBase.i[5].re test_DY.hPin_N.iRe[5]
 eq 105: ground1.pin.iRe[6] laptop2.loadBase.i[6].re led_driver.loadBase.i[6].re test_DY.hPin_N.iRe[6]
 eq 106: ground1.pin.iRe[7] laptop2.loadBase.i[7].re led_driver.loadBase.i[7].re test_DY.hPin_N.iRe[7]
 eq 107: ground1.pin.iRe[8] laptop2.loadBase.i[8].re led_driver.loadBase.i[8].re test_DY.hPin_N.iRe[8]
 eq 108: test_DY.idealTransformer1.iPrim[1].im test_DY.idealTransformer2.iPrim[1].im PhA.i[1].im
 eq 109: test_DY.idealTransformer1.iPrim[2].im test_DY.idealTransformer2.iPrim[2].im PhA.i[2].im
 eq 110: test_DY.idealTransformer1.iPrim[3].im test_DY.idealTransformer2.iPrim[3].im PhA.i[3].im
 eq 111: test_DY.idealTransformer1.iPrim[4].im test_DY.idealTransformer2.iPrim[4].im PhA.i[4].im
 eq 112: test_DY.idealTransformer1.iPrim[5].im test_DY.idealTransformer2.iPrim[5].im PhA.i[5].im
 eq 113: test_DY.idealTransformer1.iPrim[6].im test_DY.idealTransformer2.iPrim[6].im PhA.i[6].im
 eq 114: test_DY.idealTransformer1.iPrim[7].im test_DY.idealTransformer2.iPrim[7].im PhA.i[7].im
 eq 115: test_DY.idealTransformer1.iPrim[8].im test_DY.idealTransformer2.iPrim[8].im PhA.i[8].im
 eq 116: test_DY.idealTransformer1.iPrim[1].re test_DY.idealTransformer2.iPrim[1].re PhA.i[1].re
 eq 117: test_DY.idealTransformer1.iPrim[2].re test_DY.idealTransformer2.iPrim[2].re PhA.i[2].re
 eq 118: test_DY.idealTransformer1.iPrim[3].re test_DY.idealTransformer2.iPrim[3].re PhA.i[3].re
 eq 119: test_DY.idealTransformer1.iPrim[4].re test_DY.idealTransformer2.iPrim[4].re PhA.i[4].re
 eq 120: test_DY.idealTransformer1.iPrim[5].re test_DY.idealTransformer2.iPrim[5].re PhA.i[5].re
 eq 121: test_DY.idealTransformer1.iPrim[6].re test_DY.idealTransformer2.iPrim[6].re PhA.i[6].re
 eq 122: test_DY.idealTransformer1.iPrim[7].re test_DY.idealTransformer2.iPrim[7].re PhA.i[7].re
 eq 123: test_DY.idealTransformer1.iPrim[8].re test_DY.idealTransformer2.iPrim[8].re PhA.i[8].re
 eq 124: test_DY.idealTransformer1.iPrim[1].im PhC.i[1].im
 eq 125: test_DY.idealTransformer1.iPrim[2].im PhC.i[2].im
 eq 126: test_DY.idealTransformer1.iPrim[3].im PhC.i[3].im
 eq 127: test_DY.idealTransformer1.iPrim[4].im PhC.i[4].im
 eq 128: test_DY.idealTransformer1.iPrim[5].im PhC.i[5].im
 eq 129: test_DY.idealTransformer1.iPrim[6].im PhC.i[6].im
 eq 130: test_DY.idealTransformer1.iPrim[7].im PhC.i[7].im
 eq 131: test_DY.idealTransformer1.iPrim[8].im PhC.i[8].im
 eq 132: test_DY.idealTransformer1.iPrim[1].re PhC.i[1].re
 eq 133: test_DY.idealTransformer1.iPrim[2].re PhC.i[2].re
 eq 134: test_DY.idealTransformer1.iPrim[3].re PhC.i[3].re
 eq 135: test_DY.idealTransformer1.iPrim[4].re PhC.i[4].re
 eq 136: test_DY.idealTransformer1.iPrim[5].re PhC.i[5].re
 eq 137: test_DY.idealTransformer1.iPrim[6].re PhC.i[6].re
 eq 138: test_DY.idealTransformer1.iPrim[7].re PhC.i[7].re
 eq 139: test_DY.idealTransformer1.iPrim[8].re PhC.i[8].re
 eq 140: test_DY.idealTransformer2.iPrim[1].im PhB.i[1].im
 eq 141: test_DY.idealTransformer2.iPrim[2].im PhB.i[2].im
 eq 142: test_DY.idealTransformer2.iPrim[3].im PhB.i[3].im
 eq 143: test_DY.idealTransformer2.iPrim[4].im PhB.i[4].im
 eq 144: test_DY.idealTransformer2.iPrim[5].im PhB.i[5].im
 eq 145: test_DY.idealTransformer2.iPrim[6].im PhB.i[6].im
 eq 146: test_DY.idealTransformer2.iPrim[7].im PhB.i[7].im
 eq 147: test_DY.idealTransformer2.iPrim[8].im PhB.i[8].im
 eq 148: test_DY.idealTransformer2.iPrim[1].re PhB.i[1].re
 eq 149: test_DY.idealTransformer2.iPrim[2].re PhB.i[2].re
 eq 150: test_DY.idealTransformer2.iPrim[3].re PhB.i[3].re
 eq 151: test_DY.idealTransformer2.iPrim[4].re PhB.i[4].re
 eq 152: test_DY.idealTransformer2.iPrim[5].re PhB.i[5].re
 eq 153: test_DY.idealTransformer2.iPrim[6].re PhB.i[6].re
 eq 154: test_DY.idealTransformer2.iPrim[7].re PhB.i[7].re
 eq 155: test_DY.idealTransformer2.iPrim[8].re PhB.i[8].re
 eq 156: ground1.pin.iIm[1]
 eq 157: ground1.pin.iIm[2]
 eq 158: ground1.pin.iIm[3]
 eq 159: ground1.pin.iIm[4]
 eq 160: ground1.pin.iIm[5]
 eq 161: ground1.pin.iIm[6]
 eq 162: ground1.pin.iIm[7]
 eq 163: ground1.pin.iIm[8]
 eq 164: ground1.pin.iRe[1]
 eq 165: ground1.pin.iRe[2]
 eq 166: ground1.pin.iRe[3]
 eq 167: ground1.pin.iRe[4]
 eq 168: ground1.pin.iRe[5]
 eq 169: ground1.pin.iRe[6]
 eq 170: ground1.pin.iRe[7]
 eq 171: ground1.pin.iRe[8]
 eq 172:
 eq 173:
 eq 174:
 eq 175:
 eq 176:
 eq 177:
 eq 178:
 eq 179:
 eq 180:
 eq 181:
 eq 182: laptop2.I_mag[1] laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im
 eq 183: laptop2.I_mag[2] laptop2.loadBase.i[2].re laptop2.loadBase.i[2].im
 eq 184: laptop2.I_mag[3] laptop2.loadBase.i[3].re laptop2.loadBase.i[3].im
 eq 185: laptop2.I_mag[4] laptop2.loadBase.i[4].re laptop2.loadBase.i[4].im
 eq 186: laptop2.I_mag[5] laptop2.loadBase.i[5].re laptop2.loadBase.i[5].im
 eq 187: laptop2.I_mag[6] laptop2.loadBase.i[6].re laptop2.loadBase.i[6].im
 eq 188: laptop2.I_mag[7] laptop2.loadBase.i[7].re laptop2.loadBase.i[7].im
 eq 189: laptop2.I_mag[8] laptop2.loadBase.i[8].re laptop2.loadBase.i[8].im
 eq 190: laptop2.I_arg[1] laptop2.loadBase.i[1].im laptop2.loadBase.i[1].re
 eq 191: laptop2.I_arg[2] laptop2.loadBase.i[2].im laptop2.loadBase.i[2].re
 eq 192: laptop2.I_arg[3] laptop2.loadBase.i[3].im laptop2.loadBase.i[3].re
 eq 193: laptop2.I_arg[4] laptop2.loadBase.i[4].im laptop2.loadBase.i[4].re
 eq 194: laptop2.I_arg[5] laptop2.loadBase.i[5].im laptop2.loadBase.i[5].re
 eq 195: laptop2.I_arg[6] laptop2.loadBase.i[6].im laptop2.loadBase.i[6].re
 eq 196: laptop2.I_arg[7] laptop2.loadBase.i[7].im laptop2.loadBase.i[7].re
 eq 197: laptop2.I_arg[8] laptop2.loadBase.i[8].im laptop2.loadBase.i[8].re
 eq 198: laptop2.magScale laptop2.loadBase.i[1].re laptop2.loadBase.i[1].im
 eq 199: laptop2.c[1] laptop2.magScale
 eq 200: laptop2.c[2] laptop2.magScale
 eq 201: laptop2.c[3] laptop2.magScale
 eq 202: laptop2.c[4] laptop2.magScale
 eq 203: laptop2.c[5] laptop2.magScale
 eq 204: laptop2.c[6] laptop2.magScale
 eq 205: laptop2.c[7] laptop2.magScale
 eq 206: led_driver.I_mag[1] led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im
 eq 207: led_driver.I_mag[2] led_driver.loadBase.i[2].re led_driver.loadBase.i[2].im
 eq 208: led_driver.I_mag[3] led_driver.loadBase.i[3].re led_driver.loadBase.i[3].im
 eq 209: led_driver.I_mag[4] led_driver.loadBase.i[4].re led_driver.loadBase.i[4].im
 eq 210: led_driver.I_mag[5] led_driver.loadBase.i[5].re led_driver.loadBase.i[5].im
 eq 211: led_driver.I_mag[6] led_driver.loadBase.i[6].re led_driver.loadBase.i[6].im
 eq 212: led_driver.I_mag[7] led_driver.loadBase.i[7].re led_driver.loadBase.i[7].im
 eq 213: led_driver.I_mag[8] led_driver.loadBase.i[8].re led_driver.loadBase.i[8].im
 eq 214: led_driver.I_arg[1] led_driver.loadBase.i[1].im led_driver.loadBase.i[1].re
 eq 215: led_driver.I_arg[2] led_driver.loadBase.i[2].im led_driver.loadBase.i[2].re
 eq 216: led_driver.I_arg[3] led_driver.loadBase.i[3].im led_driver.loadBase.i[3].re
 eq 217: led_driver.I_arg[4] led_driver.loadBase.i[4].im led_driver.loadBase.i[4].re
 eq 218: led_driver.I_arg[5] led_driver.loadBase.i[5].im led_driver.loadBase.i[5].re
 eq 219: led_driver.I_arg[6] led_driver.loadBase.i[6].im led_driver.loadBase.i[6].re
 eq 220: led_driver.I_arg[7] led_driver.loadBase.i[7].im led_driver.loadBase.i[7].re
 eq 221: led_driver.I_arg[8] led_driver.loadBase.i[8].im led_driver.loadBase.i[8].re
 eq 222: led_driver.magScale led_driver.loadBase.i[1].re led_driver.loadBase.i[1].im
 eq 223: led_driver.c[1] led_driver.magScale
 eq 224: led_driver.c[2] led_driver.magScale
 eq 225: led_driver.c[3] led_driver.magScale
 eq 226: led_driver.c[4] led_driver.magScale
 eq 227: led_driver.c[5] led_driver.magScale
 eq 228: led_driver.c[6] led_driver.magScale
 eq 229: led_driver.c[7] led_driver.magScale

Variable dependencies:
Oh dear, the model has way to many variables (1121)!
Current limit is set to 500, you can change this by changing the option 'diagnostics_limit'.


Connection sets: 375 sets
Connection set (flow): {PhA.pin_p.iIm[1:8] (i), test_DY.pinPrim_A.iIm[1:8] (i)}
Connection set (flow): {PhA.pin_p.iRe[1:8] (i), test_DY.pinPrim_A.iRe[1:8] (i)}
Connection set (potential): {PhA.pin_p.v[1].im (i), test_DY.pinPrim_A.v[1].im (i)}
Connection set (potential): {PhA.pin_p.v[1].re (i), test_DY.pinPrim_A.v[1].re (i)}
Connection set (potential): {PhA.pin_p.v[2].im (i), test_DY.pinPrim_A.v[2].im (i)}
Connection set (potential): {PhA.pin_p.v[2].re (i), test_DY.pinPrim_A.v[2].re (i)}
Connection set (potential): {PhA.pin_p.v[3].im (i), test_DY.pinPrim_A.v[3].im (i)}
Connection set (potential): {PhA.pin_p.v[3].re (i), test_DY.pinPrim_A.v[3].re (i)}
Connection set (potential): {PhA.pin_p.v[4].im (i), test_DY.pinPrim_A.v[4].im (i)}
Connection set (potential): {PhA.pin_p.v[4].re (i), test_DY.pinPrim_A.v[4].re (i)}
Connection set (potential): {PhA.pin_p.v[5].im (i), test_DY.pinPrim_A.v[5].im (i)}
Connection set (potential): {PhA.pin_p.v[5].re (i), test_DY.pinPrim_A.v[5].re (i)}
Connection set (potential): {PhA.pin_p.v[6].im (i), test_DY.pinPrim_A.v[6].im (i)}
Connection set (potential): {PhA.pin_p.v[6].re (i), test_DY.pinPrim_A.v[6].re (i)}
Connection set (potential): {PhA.pin_p.v[7].im (i), test_DY.pinPrim_A.v[7].im (i)}
Connection set (potential): {PhA.pin_p.v[7].re (i), test_DY.pinPrim_A.v[7].re (i)}
Connection set (potential): {PhA.pin_p.v[8].im (i), test_DY.pinPrim_A.v[8].im (i)}
Connection set (potential): {PhA.pin_p.v[8].re (i), test_DY.pinPrim_A.v[8].re (i)}
Connection set (flow): {PhB.pin_p.iIm[1:8] (i), test_DY.pinPrim_B.iIm[1:8] (i)}
Connection set (flow): {PhB.pin_p.iRe[1:8] (i), test_DY.pinPrim_B.iRe[1:8] (i)}
Connection set (potential): {PhB.pin_p.v[1].im (i), test_DY.pinPrim_B.v[1].im (i)}
Connection set (potential): {PhB.pin_p.v[1].re (i), test_DY.pinPrim_B.v[1].re (i)}
Connection set (potential): {PhB.pin_p.v[2].im (i), test_DY.pinPrim_B.v[2].im (i)}
Connection set (potential): {PhB.pin_p.v[2].re (i), test_DY.pinPrim_B.v[2].re (i)}
Connection set (potential): {PhB.pin_p.v[3].im (i), test_DY.pinPrim_B.v[3].im (i)}
Connection set (potential): {PhB.pin_p.v[3].re (i), test_DY.pinPrim_B.v[3].re (i)}
Connection set (potential): {PhB.pin_p.v[4].im (i), test_DY.pinPrim_B.v[4].im (i)}
Connection set (potential): {PhB.pin_p.v[4].re (i), test_DY.pinPrim_B.v[4].re (i)}
Connection set (potential): {PhB.pin_p.v[5].im (i), test_DY.pinPrim_B.v[5].im (i)}
Connection set (potential): {PhB.pin_p.v[5].re (i), test_DY.pinPrim_B.v[5].re (i)}
Connection set (potential): {PhB.pin_p.v[6].im (i), test_DY.pinPrim_B.v[6].im (i)}
Connection set (potential): {PhB.pin_p.v[6].re (i), test_DY.pinPrim_B.v[6].re (i)}
Connection set (potential): {PhB.pin_p.v[7].im (i), test_DY.pinPrim_B.v[7].im (i)}
Connection set (potential): {PhB.pin_p.v[7].re (i), test_DY.pinPrim_B.v[7].re (i)}
Connection set (potential): {PhB.pin_p.v[8].im (i), test_DY.pinPrim_B.v[8].im (i)}
Connection set (potential): {PhB.pin_p.v[8].re (i), test_DY.pinPrim_B.v[8].re (i)}
Connection set (flow): {PhC.pin_p.iIm[1:8] (i), test_DY.pinPrim_C.iIm[1:8] (i)}
Connection set (flow): {PhC.pin_p.iRe[1:8] (i), test_DY.pinPrim_C.iRe[1:8] (i)}
Connection set (potential): {PhC.pin_p.v[1].im (i), test_DY.pinPrim_C.v[1].im (i)}
Connection set (potential): {PhC.pin_p.v[1].re (i), test_DY.pinPrim_C.v[1].re (i)}
Connection set (potential): {PhC.pin_p.v[2].im (i), test_DY.pinPrim_C.v[2].im (i)}
Connection set (potential): {PhC.pin_p.v[2].re (i), test_DY.pinPrim_C.v[2].re (i)}
Connection set (potential): {PhC.pin_p.v[3].im (i), test_DY.pinPrim_C.v[3].im (i)}
Connection set (potential): {PhC.pin_p.v[3].re (i), test_DY.pinPrim_C.v[3].re (i)}
Connection set (potential): {PhC.pin_p.v[4].im (i), test_DY.pinPrim_C.v[4].im (i)}
Connection set (potential): {PhC.pin_p.v[4].re (i), test_DY.pinPrim_C.v[4].re (i)}
Connection set (potential): {PhC.pin_p.v[5].im (i), test_DY.pinPrim_C.v[5].im (i)}
Connection set (potential): {PhC.pin_p.v[5].re (i), test_DY.pinPrim_C.v[5].re (i)}
Connection set (potential): {PhC.pin_p.v[6].im (i), test_DY.pinPrim_C.v[6].im (i)}
Connection set (potential): {PhC.pin_p.v[6].re (i), test_DY.pinPrim_C.v[6].re (i)}
Connection set (potential): {PhC.pin_p.v[7].im (i), test_DY.pinPrim_C.v[7].im (i)}
Connection set (potential): {PhC.pin_p.v[7].re (i), test_DY.pinPrim_C.v[7].re (i)}
Connection set (potential): {PhC.pin_p.v[8].im (i), test_DY.pinPrim_C.v[8].im (i)}
Connection set (potential): {PhC.pin_p.v[8].re (i), test_DY.pinPrim_C.v[8].re (i)}
Connection set (flow): {PhA.pin_n.iIm[1:8] (i), PhB.pin_n.iIm[1:8] (i), PhC.pin_n.iIm[1:8] (i), ground.pin.iIm[1:8] (i)}
Connection set (flow): {PhA.pin_n.iRe[1:8] (i), PhB.pin_n.iRe[1:8] (i), PhC.pin_n.iRe[1:8] (i), ground.pin.iRe[1:8] (i)}
Connection set (potential): {PhA.pin_n.v[1].im (i), PhB.pin_n.v[1].im (i), PhC.pin_n.v[1].im (i), ground.pin.v[1].im (i)}
Connection set (potential): {PhA.pin_n.v[1].re (i), PhB.pin_n.v[1].re (i), PhC.pin_n.v[1].re (i), ground.pin.v[1].re (i)}
Connection set (potential): {PhA.pin_n.v[2].im (i), PhB.pin_n.v[2].im (i), PhC.pin_n.v[2].im (i), ground.pin.v[2].im (i)}
Connection set (potential): {PhA.pin_n.v[2].re (i), PhB.pin_n.v[2].re (i), PhC.pin_n.v[2].re (i), ground.pin.v[2].re (i)}
Connection set (potential): {PhA.pin_n.v[3].im (i), PhB.pin_n.v[3].im (i), PhC.pin_n.v[3].im (i), ground.pin.v[3].im (i)}
Connection set (potential): {PhA.pin_n.v[3].re (i), PhB.pin_n.v[3].re (i), PhC.pin_n.v[3].re (i), ground.pin.v[3].re (i)}
Connection set (potential): {PhA.pin_n.v[4].im (i), PhB.pin_n.v[4].im (i), PhC.pin_n.v[4].im (i), ground.pin.v[4].im (i)}
Connection set (potential): {PhA.pin_n.v[4].re (i), PhB.pin_n.v[4].re (i), PhC.pin_n.v[4].re (i), ground.pin.v[4].re (i)}
Connection set (potential): {PhA.pin_n.v[5].im (i), PhB.pin_n.v[5].im (i), PhC.pin_n.v[5].im (i), ground.pin.v[5].im (i)}
Connection set (potential): {PhA.pin_n.v[5].re (i), PhB.pin_n.v[5].re (i), PhC.pin_n.v[5].re (i), ground.pin.v[5].re (i)}
Connection set (potential): {PhA.pin_n.v[6].im (i), PhB.pin_n.v[6].im (i), PhC.pin_n.v[6].im (i), ground.pin.v[6].im (i)}
Connection set (potential): {PhA.pin_n.v[6].re (i), PhB.pin_n.v[6].re (i), PhC.pin_n.v[6].re (i), ground.pin.v[6].re (i)}
Connection set (potential): {PhA.pin_n.v[7].im (i), PhB.pin_n.v[7].im (i), PhC.pin_n.v[7].im (i), ground.pin.v[7].im (i)}
Connection set (potential): {PhA.pin_n.v[7].re (i), PhB.pin_n.v[7].re (i), PhC.pin_n.v[7].re (i), ground.pin.v[7].re (i)}
Connection set (potential): {PhA.pin_n.v[8].im (i), PhB.pin_n.v[8].im (i), PhC.pin_n.v[8].im (i), ground.pin.v[8].im (i)}
Connection set (potential): {PhA.pin_n.v[8].re (i), PhB.pin_n.v[8].re (i), PhC.pin_n.v[8].re (i), ground.pin.v[8].re (i)}
Connection set (flow): {led_driver.hPin_P.iIm[1:8] (i), test_DY.pinSec_A.iIm[1:8] (i)}
Connection set (flow): {led_driver.hPin_P.iRe[1:8] (i), test_DY.pinSec_A.iRe[1:8] (i)}
Connection set (potential): {led_driver.hPin_P.v[1].im (i), test_DY.pinSec_A.v[1].im (i)}
Connection set (potential): {led_driver.hPin_P.v[1].re (i), test_DY.pinSec_A.v[1].re (i)}
Connection set (potential): {led_driver.hPin_P.v[2].im (i), test_DY.pinSec_A.v[2].im (i)}
Connection set (potential): {led_driver.hPin_P.v[2].re (i), test_DY.pinSec_A.v[2].re (i)}
Connection set (potential): {led_driver.hPin_P.v[3].im (i), test_DY.pinSec_A.v[3].im (i)}
Connection set (potential): {led_driver.hPin_P.v[3].re (i), test_DY.pinSec_A.v[3].re (i)}
Connection set (potential): {led_driver.hPin_P.v[4].im (i), test_DY.pinSec_A.v[4].im (i)}
Connection set (potential): {led_driver.hPin_P.v[4].re (i), test_DY.pinSec_A.v[4].re (i)}
Connection set (potential): {led_driver.hPin_P.v[5].im (i), test_DY.pinSec_A.v[5].im (i)}
Connection set (potential): {led_driver.hPin_P.v[5].re (i), test_DY.pinSec_A.v[5].re (i)}
Connection set (potential): {led_driver.hPin_P.v[6].im (i), test_DY.pinSec_A.v[6].im (i)}
Connection set (potential): {led_driver.hPin_P.v[6].re (i), test_DY.pinSec_A.v[6].re (i)}
Connection set (potential): {led_driver.hPin_P.v[7].im (i), test_DY.pinSec_A.v[7].im (i)}
Connection set (potential): {led_driver.hPin_P.v[7].re (i), test_DY.pinSec_A.v[7].re (i)}
Connection set (potential): {led_driver.hPin_P.v[8].im (i), test_DY.pinSec_A.v[8].im (i)}
Connection set (potential): {led_driver.hPin_P.v[8].re (i), test_DY.pinSec_A.v[8].re (i)}
Connection set (flow): {laptop2.hPin_P.iIm[1:8] (i), test_DY.pinSec_B.iIm[1:8] (i)}
Connection set (flow): {laptop2.hPin_P.iRe[1:8] (i), test_DY.pinSec_B.iRe[1:8] (i)}
Connection set (potential): {laptop2.hPin_P.v[1].im (i), test_DY.pinSec_B.v[1].im (i)}
Connection set (potential): {laptop2.hPin_P.v[1].re (i), test_DY.pinSec_B.v[1].re (i)}
Connection set (potential): {laptop2.hPin_P.v[2].im (i), test_DY.pinSec_B.v[2].im (i)}
Connection set (potential): {laptop2.hPin_P.v[2].re (i), test_DY.pinSec_B.v[2].re (i)}
Connection set (potential): {laptop2.hPin_P.v[3].im (i), test_DY.pinSec_B.v[3].im (i)}
Connection set (potential): {laptop2.hPin_P.v[3].re (i), test_DY.pinSec_B.v[3].re (i)}
Connection set (potential): {laptop2.hPin_P.v[4].im (i), test_DY.pinSec_B.v[4].im (i)}
Connection set (potential): {laptop2.hPin_P.v[4].re (i), test_DY.pinSec_B.v[4].re (i)}
Connection set (potential): {laptop2.hPin_P.v[5].im (i), test_DY.pinSec_B.v[5].im (i)}
Connection set (potential): {laptop2.hPin_P.v[5].re (i), test_DY.pinSec_B.v[5].re (i)}
Connection set (potential): {laptop2.hPin_P.v[6].im (i), test_DY.pinSec_B.v[6].im (i)}
Connection set (potential): {laptop2.hPin_P.v[6].re (i), test_DY.pinSec_B.v[6].re (i)}
Connection set (potential): {laptop2.hPin_P.v[7].im (i), test_DY.pinSec_B.v[7].im (i)}
Connection set (potential): {laptop2.hPin_P.v[7].re (i), test_DY.pinSec_B.v[7].re (i)}
Connection set (potential): {laptop2.hPin_P.v[8].im (i), test_DY.pinSec_B.v[8].im (i)}
Connection set (potential): {laptop2.hPin_P.v[8].re (i), test_DY.pinSec_B.v[8].re (i)}
Connection set (flow): {ground1.pin.iIm[1:8] (i), laptop2.hPin_N.iIm[1:8] (i), led_driver.hPin_N.iIm[1:8] (i), r.pin_n.iIm[1:8] (i), test_DY.hPin_N.iIm[1:8] (i)}
Connection set (flow): {ground1.pin.iRe[1:8] (i), laptop2.hPin_N.iRe[1:8] (i), led_driver.hPin_N.iRe[1:8] (i), r.pin_n.iRe[1:8] (i), test_DY.hPin_N.iRe[1:8] (i)}
Connection set (potential): {ground1.pin.v[1].im (i), laptop2.hPin_N.v[1].im (i), led_driver.hPin_N.v[1].im (i), r.pin_n.v[1].im (i), test_DY.hPin_N.v[1].im (i)}
Connection set (potential): {ground1.pin.v[1].re (i), laptop2.hPin_N.v[1].re (i), led_driver.hPin_N.v[1].re (i), r.pin_n.v[1].re (i), test_DY.hPin_N.v[1].re (i)}
Connection set (potential): {ground1.pin.v[2].im (i), laptop2.hPin_N.v[2].im (i), led_driver.hPin_N.v[2].im (i), r.pin_n.v[2].im (i), test_DY.hPin_N.v[2].im (i)}
Connection set (potential): {ground1.pin.v[2].re (i), laptop2.hPin_N.v[2].re (i), led_driver.hPin_N.v[2].re (i), r.pin_n.v[2].re (i), test_DY.hPin_N.v[2].re (i)}
Connection set (potential): {ground1.pin.v[3].im (i), laptop2.hPin_N.v[3].im (i), led_driver.hPin_N.v[3].im (i), r.pin_n.v[3].im (i), test_DY.hPin_N.v[3].im (i)}
Connection set (potential): {ground1.pin.v[3].re (i), laptop2.hPin_N.v[3].re (i), led_driver.hPin_N.v[3].re (i), r.pin_n.v[3].re (i), test_DY.hPin_N.v[3].re (i)}
Connection set (potential): {ground1.pin.v[4].im (i), laptop2.hPin_N.v[4].im (i), led_driver.hPin_N.v[4].im (i), r.pin_n.v[4].im (i), test_DY.hPin_N.v[4].im (i)}
Connection set (potential): {ground1.pin.v[4].re (i), laptop2.hPin_N.v[4].re (i), led_driver.hPin_N.v[4].re (i), r.pin_n.v[4].re (i), test_DY.hPin_N.v[4].re (i)}
Connection set (potential): {ground1.pin.v[5].im (i), laptop2.hPin_N.v[5].im (i), led_driver.hPin_N.v[5].im (i), r.pin_n.v[5].im (i), test_DY.hPin_N.v[5].im (i)}
Connection set (potential): {ground1.pin.v[5].re (i), laptop2.hPin_N.v[5].re (i), led_driver.hPin_N.v[5].re (i), r.pin_n.v[5].re (i), test_DY.hPin_N.v[5].re (i)}
Connection set (potential): {ground1.pin.v[6].im (i), laptop2.hPin_N.v[6].im (i), led_driver.hPin_N.v[6].im (i), r.pin_n.v[6].im (i), test_DY.hPin_N.v[6].im (i)}
Connection set (potential): {ground1.pin.v[6].re (i), laptop2.hPin_N.v[6].re (i), led_driver.hPin_N.v[6].re (i), r.pin_n.v[6].re (i), test_DY.hPin_N.v[6].re (i)}
Connection set (potential): {ground1.pin.v[7].im (i), laptop2.hPin_N.v[7].im (i), led_driver.hPin_N.v[7].im (i), r.pin_n.v[7].im (i), test_DY.hPin_N.v[7].im (i)}
Connection set (potential): {ground1.pin.v[7].re (i), laptop2.hPin_N.v[7].re (i), led_driver.hPin_N.v[7].re (i), r.pin_n.v[7].re (i), test_DY.hPin_N.v[7].re (i)}
Connection set (potential): {ground1.pin.v[8].im (i), laptop2.hPin_N.v[8].im (i), led_driver.hPin_N.v[8].im (i), r.pin_n.v[8].im (i), test_DY.hPin_N.v[8].im (i)}
Connection set (potential): {ground1.pin.v[8].re (i), laptop2.hPin_N.v[8].re (i), led_driver.hPin_N.v[8].re (i), r.pin_n.v[8].re (i), test_DY.hPin_N.v[8].re (i)}
Connection set (flow): {r.pin_p.iIm[1:8] (i), test_DY.pinSec_C.iIm[1:8] (i)}
Connection set (flow): {r.pin_p.iRe[1:8] (i), test_DY.pinSec_C.iRe[1:8] (i)}
Connection set (potential): {r.pin_p.v[1].im (i), test_DY.pinSec_C.v[1].im (i)}
Connection set (potential): {r.pin_p.v[1].re (i), test_DY.pinSec_C.v[1].re (i)}
Connection set (potential): {r.pin_p.v[2].im (i), test_DY.pinSec_C.v[2].im (i)}
Connection set (potential): {r.pin_p.v[2].re (i), test_DY.pinSec_C.v[2].re (i)}
Connection set (potential): {r.pin_p.v[3].im (i), test_DY.pinSec_C.v[3].im (i)}
Connection set (potential): {r.pin_p.v[3].re (i), test_DY.pinSec_C.v[3].re (i)}
Connection set (potential): {r.pin_p.v[4].im (i), test_DY.pinSec_C.v[4].im (i)}
Connection set (potential): {r.pin_p.v[4].re (i), test_DY.pinSec_C.v[4].re (i)}
Connection set (potential): {r.pin_p.v[5].im (i), test_DY.pinSec_C.v[5].im (i)}
Connection set (potential): {r.pin_p.v[5].re (i), test_DY.pinSec_C.v[5].re (i)}
Connection set (potential): {r.pin_p.v[6].im (i), test_DY.pinSec_C.v[6].im (i)}
Connection set (potential): {r.pin_p.v[6].re (i), test_DY.pinSec_C.v[6].re (i)}
Connection set (potential): {r.pin_p.v[7].im (i), test_DY.pinSec_C.v[7].im (i)}
Connection set (potential): {r.pin_p.v[7].re (i), test_DY.pinSec_C.v[7].re (i)}
Connection set (potential): {r.pin_p.v[8].im (i), test_DY.pinSec_C.v[8].im (i)}
Connection set (potential): {r.pin_p.v[8].re (i), test_DY.pinSec_C.v[8].re (i)}
Connection set (flow): {ground2.p.i (i), led_driver.pin_n.i (i), led_load.n.i (i)}
Connection set (potential): {ground2.p.v (i), led_driver.pin_n.v (i), led_load.n.v (i)}
Connection set (flow): {led_driver.pin_p.i (i), led_load.p.i (i)}
Connection set (potential): {led_driver.pin_p.v (i), led_load.p.v (i)}
Connection set (flow): {laptop2.pin_p.i (i), laptop_load.p.i (i)}
Connection set (potential): {laptop2.pin_p.v (i), laptop_load.p.v (i)}
Connection set (flow): {ground3.p.i (i), laptop2.pin_n.i (i), laptop_load.n.i (i)}
Connection set (potential): {ground3.p.v (i), laptop2.pin_n.v (i), laptop_load.n.v (i)}
Connection set (potential): {led_driver.PLoss (i), zone_1.u (i)}
Connection set (potential): {laptop2.PLoss (i), zone_2.u (i)}
Connection set (flow): {test_DY.idealTransformer1.pinP_Prim.iIm[1:8] (i), test_DY.idealTransformer2.pinN_Prim.iIm[1:8] (i), test_DY.pinPrim_A.iIm[1:8] (o)}
Connection set (flow): {test_DY.idealTransformer1.pinP_Prim.iRe[1:8] (i), test_DY.idealTransformer2.pinN_Prim.iRe[1:8] (i), test_DY.pinPrim_A.iRe[1:8] (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[1].im (i), test_DY.idealTransformer2.pinN_Prim.v[1].im (i), test_DY.pinPrim_A.v[1].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[1].re (i), test_DY.idealTransformer2.pinN_Prim.v[1].re (i), test_DY.pinPrim_A.v[1].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[2].im (i), test_DY.idealTransformer2.pinN_Prim.v[2].im (i), test_DY.pinPrim_A.v[2].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[2].re (i), test_DY.idealTransformer2.pinN_Prim.v[2].re (i), test_DY.pinPrim_A.v[2].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[3].im (i), test_DY.idealTransformer2.pinN_Prim.v[3].im (i), test_DY.pinPrim_A.v[3].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[3].re (i), test_DY.idealTransformer2.pinN_Prim.v[3].re (i), test_DY.pinPrim_A.v[3].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[4].im (i), test_DY.idealTransformer2.pinN_Prim.v[4].im (i), test_DY.pinPrim_A.v[4].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[4].re (i), test_DY.idealTransformer2.pinN_Prim.v[4].re (i), test_DY.pinPrim_A.v[4].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[5].im (i), test_DY.idealTransformer2.pinN_Prim.v[5].im (i), test_DY.pinPrim_A.v[5].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[5].re (i), test_DY.idealTransformer2.pinN_Prim.v[5].re (i), test_DY.pinPrim_A.v[5].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[6].im (i), test_DY.idealTransformer2.pinN_Prim.v[6].im (i), test_DY.pinPrim_A.v[6].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[6].re (i), test_DY.idealTransformer2.pinN_Prim.v[6].re (i), test_DY.pinPrim_A.v[6].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[7].im (i), test_DY.idealTransformer2.pinN_Prim.v[7].im (i), test_DY.pinPrim_A.v[7].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[7].re (i), test_DY.idealTransformer2.pinN_Prim.v[7].re (i), test_DY.pinPrim_A.v[7].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[8].im (i), test_DY.idealTransformer2.pinN_Prim.v[8].im (i), test_DY.pinPrim_A.v[8].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.v[8].re (i), test_DY.idealTransformer2.pinN_Prim.v[8].re (i), test_DY.pinPrim_A.v[8].re (o)}
Connection set (flow): {test_DY.idealTransformer1.pinN_Prim.iIm[1:8] (i), test_DY.idealTransformer3.pinP_Prim.iIm[1:8] (i), test_DY.pinPrim_C.iIm[1:8] (o)}
Connection set (flow): {test_DY.idealTransformer1.pinN_Prim.iRe[1:8] (i), test_DY.idealTransformer3.pinP_Prim.iRe[1:8] (i), test_DY.pinPrim_C.iRe[1:8] (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[1].im (i), test_DY.idealTransformer3.pinP_Prim.v[1].im (i), test_DY.pinPrim_C.v[1].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[1].re (i), test_DY.idealTransformer3.pinP_Prim.v[1].re (i), test_DY.pinPrim_C.v[1].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[2].im (i), test_DY.idealTransformer3.pinP_Prim.v[2].im (i), test_DY.pinPrim_C.v[2].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[2].re (i), test_DY.idealTransformer3.pinP_Prim.v[2].re (i), test_DY.pinPrim_C.v[2].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[3].im (i), test_DY.idealTransformer3.pinP_Prim.v[3].im (i), test_DY.pinPrim_C.v[3].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[3].re (i), test_DY.idealTransformer3.pinP_Prim.v[3].re (i), test_DY.pinPrim_C.v[3].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[4].im (i), test_DY.idealTransformer3.pinP_Prim.v[4].im (i), test_DY.pinPrim_C.v[4].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[4].re (i), test_DY.idealTransformer3.pinP_Prim.v[4].re (i), test_DY.pinPrim_C.v[4].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[5].im (i), test_DY.idealTransformer3.pinP_Prim.v[5].im (i), test_DY.pinPrim_C.v[5].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[5].re (i), test_DY.idealTransformer3.pinP_Prim.v[5].re (i), test_DY.pinPrim_C.v[5].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[6].im (i), test_DY.idealTransformer3.pinP_Prim.v[6].im (i), test_DY.pinPrim_C.v[6].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[6].re (i), test_DY.idealTransformer3.pinP_Prim.v[6].re (i), test_DY.pinPrim_C.v[6].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[7].im (i), test_DY.idealTransformer3.pinP_Prim.v[7].im (i), test_DY.pinPrim_C.v[7].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[7].re (i), test_DY.idealTransformer3.pinP_Prim.v[7].re (i), test_DY.pinPrim_C.v[7].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[8].im (i), test_DY.idealTransformer3.pinP_Prim.v[8].im (i), test_DY.pinPrim_C.v[8].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.v[8].re (i), test_DY.idealTransformer3.pinP_Prim.v[8].re (i), test_DY.pinPrim_C.v[8].re (o)}
Connection set (flow): {test_DY.idealTransformer2.pinP_Prim.iIm[1:8] (i), test_DY.idealTransformer3.pinN_Prim.iIm[1:8] (i), test_DY.pinPrim_B.iIm[1:8] (o)}
Connection set (flow): {test_DY.idealTransformer2.pinP_Prim.iRe[1:8] (i), test_DY.idealTransformer3.pinN_Prim.iRe[1:8] (i), test_DY.pinPrim_B.iRe[1:8] (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[1].im (i), test_DY.idealTransformer3.pinN_Prim.v[1].im (i), test_DY.pinPrim_B.v[1].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[1].re (i), test_DY.idealTransformer3.pinN_Prim.v[1].re (i), test_DY.pinPrim_B.v[1].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[2].im (i), test_DY.idealTransformer3.pinN_Prim.v[2].im (i), test_DY.pinPrim_B.v[2].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[2].re (i), test_DY.idealTransformer3.pinN_Prim.v[2].re (i), test_DY.pinPrim_B.v[2].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[3].im (i), test_DY.idealTransformer3.pinN_Prim.v[3].im (i), test_DY.pinPrim_B.v[3].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[3].re (i), test_DY.idealTransformer3.pinN_Prim.v[3].re (i), test_DY.pinPrim_B.v[3].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[4].im (i), test_DY.idealTransformer3.pinN_Prim.v[4].im (i), test_DY.pinPrim_B.v[4].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[4].re (i), test_DY.idealTransformer3.pinN_Prim.v[4].re (i), test_DY.pinPrim_B.v[4].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[5].im (i), test_DY.idealTransformer3.pinN_Prim.v[5].im (i), test_DY.pinPrim_B.v[5].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[5].re (i), test_DY.idealTransformer3.pinN_Prim.v[5].re (i), test_DY.pinPrim_B.v[5].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[6].im (i), test_DY.idealTransformer3.pinN_Prim.v[6].im (i), test_DY.pinPrim_B.v[6].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[6].re (i), test_DY.idealTransformer3.pinN_Prim.v[6].re (i), test_DY.pinPrim_B.v[6].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[7].im (i), test_DY.idealTransformer3.pinN_Prim.v[7].im (i), test_DY.pinPrim_B.v[7].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[7].re (i), test_DY.idealTransformer3.pinN_Prim.v[7].re (i), test_DY.pinPrim_B.v[7].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[8].im (i), test_DY.idealTransformer3.pinN_Prim.v[8].im (i), test_DY.pinPrim_B.v[8].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.v[8].re (i), test_DY.idealTransformer3.pinN_Prim.v[8].re (i), test_DY.pinPrim_B.v[8].re (o)}
Connection set (flow): {test_DY.hPin_N.iIm[1:8] (o), test_DY.idealTransformer1.pinN_Sec.iIm[1:8] (i), test_DY.idealTransformer2.pinN_Sec.iIm[1:8] (i), test_DY.idealTransformer3.pinN_Sec.iIm[1:8] (i)}
Connection set (flow): {test_DY.hPin_N.iRe[1:8] (o), test_DY.idealTransformer1.pinN_Sec.iRe[1:8] (i), test_DY.idealTransformer2.pinN_Sec.iRe[1:8] (i), test_DY.idealTransformer3.pinN_Sec.iRe[1:8] (i)}
Connection set (potential): {test_DY.hPin_N.v[1].im (o), test_DY.idealTransformer1.pinN_Sec.v[1].im (i), test_DY.idealTransformer2.pinN_Sec.v[1].im (i), test_DY.idealTransformer3.pinN_Sec.v[1].im (i)}
Connection set (potential): {test_DY.hPin_N.v[1].re (o), test_DY.idealTransformer1.pinN_Sec.v[1].re (i), test_DY.idealTransformer2.pinN_Sec.v[1].re (i), test_DY.idealTransformer3.pinN_Sec.v[1].re (i)}
Connection set (potential): {test_DY.hPin_N.v[2].im (o), test_DY.idealTransformer1.pinN_Sec.v[2].im (i), test_DY.idealTransformer2.pinN_Sec.v[2].im (i), test_DY.idealTransformer3.pinN_Sec.v[2].im (i)}
Connection set (potential): {test_DY.hPin_N.v[2].re (o), test_DY.idealTransformer1.pinN_Sec.v[2].re (i), test_DY.idealTransformer2.pinN_Sec.v[2].re (i), test_DY.idealTransformer3.pinN_Sec.v[2].re (i)}
Connection set (potential): {test_DY.hPin_N.v[3].im (o), test_DY.idealTransformer1.pinN_Sec.v[3].im (i), test_DY.idealTransformer2.pinN_Sec.v[3].im (i), test_DY.idealTransformer3.pinN_Sec.v[3].im (i)}
Connection set (potential): {test_DY.hPin_N.v[3].re (o), test_DY.idealTransformer1.pinN_Sec.v[3].re (i), test_DY.idealTransformer2.pinN_Sec.v[3].re (i), test_DY.idealTransformer3.pinN_Sec.v[3].re (i)}
Connection set (potential): {test_DY.hPin_N.v[4].im (o), test_DY.idealTransformer1.pinN_Sec.v[4].im (i), test_DY.idealTransformer2.pinN_Sec.v[4].im (i), test_DY.idealTransformer3.pinN_Sec.v[4].im (i)}
Connection set (potential): {test_DY.hPin_N.v[4].re (o), test_DY.idealTransformer1.pinN_Sec.v[4].re (i), test_DY.idealTransformer2.pinN_Sec.v[4].re (i), test_DY.idealTransformer3.pinN_Sec.v[4].re (i)}
Connection set (potential): {test_DY.hPin_N.v[5].im (o), test_DY.idealTransformer1.pinN_Sec.v[5].im (i), test_DY.idealTransformer2.pinN_Sec.v[5].im (i), test_DY.idealTransformer3.pinN_Sec.v[5].im (i)}
Connection set (potential): {test_DY.hPin_N.v[5].re (o), test_DY.idealTransformer1.pinN_Sec.v[5].re (i), test_DY.idealTransformer2.pinN_Sec.v[5].re (i), test_DY.idealTransformer3.pinN_Sec.v[5].re (i)}
Connection set (potential): {test_DY.hPin_N.v[6].im (o), test_DY.idealTransformer1.pinN_Sec.v[6].im (i), test_DY.idealTransformer2.pinN_Sec.v[6].im (i), test_DY.idealTransformer3.pinN_Sec.v[6].im (i)}
Connection set (potential): {test_DY.hPin_N.v[6].re (o), test_DY.idealTransformer1.pinN_Sec.v[6].re (i), test_DY.idealTransformer2.pinN_Sec.v[6].re (i), test_DY.idealTransformer3.pinN_Sec.v[6].re (i)}
Connection set (potential): {test_DY.hPin_N.v[7].im (o), test_DY.idealTransformer1.pinN_Sec.v[7].im (i), test_DY.idealTransformer2.pinN_Sec.v[7].im (i), test_DY.idealTransformer3.pinN_Sec.v[7].im (i)}
Connection set (potential): {test_DY.hPin_N.v[7].re (o), test_DY.idealTransformer1.pinN_Sec.v[7].re (i), test_DY.idealTransformer2.pinN_Sec.v[7].re (i), test_DY.idealTransformer3.pinN_Sec.v[7].re (i)}
Connection set (potential): {test_DY.hPin_N.v[8].im (o), test_DY.idealTransformer1.pinN_Sec.v[8].im (i), test_DY.idealTransformer2.pinN_Sec.v[8].im (i), test_DY.idealTransformer3.pinN_Sec.v[8].im (i)}
Connection set (potential): {test_DY.hPin_N.v[8].re (o), test_DY.idealTransformer1.pinN_Sec.v[8].re (i), test_DY.idealTransformer2.pinN_Sec.v[8].re (i), test_DY.idealTransformer3.pinN_Sec.v[8].re (i)}
Connection set (flow): {test_DY.idealTransformer1.pinP_Sec.iIm[1:8] (i), test_DY.pinSec_A.iIm[1:8] (o)}
Connection set (flow): {test_DY.idealTransformer1.pinP_Sec.iRe[1:8] (i), test_DY.pinSec_A.iRe[1:8] (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[1].im (i), test_DY.pinSec_A.v[1].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[1].re (i), test_DY.pinSec_A.v[1].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[2].im (i), test_DY.pinSec_A.v[2].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[2].re (i), test_DY.pinSec_A.v[2].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[3].im (i), test_DY.pinSec_A.v[3].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[3].re (i), test_DY.pinSec_A.v[3].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[4].im (i), test_DY.pinSec_A.v[4].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[4].re (i), test_DY.pinSec_A.v[4].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[5].im (i), test_DY.pinSec_A.v[5].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[5].re (i), test_DY.pinSec_A.v[5].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[6].im (i), test_DY.pinSec_A.v[6].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[6].re (i), test_DY.pinSec_A.v[6].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[7].im (i), test_DY.pinSec_A.v[7].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[7].re (i), test_DY.pinSec_A.v[7].re (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[8].im (i), test_DY.pinSec_A.v[8].im (o)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.v[8].re (i), test_DY.pinSec_A.v[8].re (o)}
Connection set (flow): {test_DY.idealTransformer2.pinP_Sec.iIm[1:8] (i), test_DY.pinSec_B.iIm[1:8] (o)}
Connection set (flow): {test_DY.idealTransformer2.pinP_Sec.iRe[1:8] (i), test_DY.pinSec_B.iRe[1:8] (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[1].im (i), test_DY.pinSec_B.v[1].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[1].re (i), test_DY.pinSec_B.v[1].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[2].im (i), test_DY.pinSec_B.v[2].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[2].re (i), test_DY.pinSec_B.v[2].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[3].im (i), test_DY.pinSec_B.v[3].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[3].re (i), test_DY.pinSec_B.v[3].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[4].im (i), test_DY.pinSec_B.v[4].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[4].re (i), test_DY.pinSec_B.v[4].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[5].im (i), test_DY.pinSec_B.v[5].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[5].re (i), test_DY.pinSec_B.v[5].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[6].im (i), test_DY.pinSec_B.v[6].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[6].re (i), test_DY.pinSec_B.v[6].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[7].im (i), test_DY.pinSec_B.v[7].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[7].re (i), test_DY.pinSec_B.v[7].re (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[8].im (i), test_DY.pinSec_B.v[8].im (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.v[8].re (i), test_DY.pinSec_B.v[8].re (o)}
Connection set (flow): {test_DY.idealTransformer3.pinP_Sec.iIm[1:8] (i), test_DY.pinSec_C.iIm[1:8] (o)}
Connection set (flow): {test_DY.idealTransformer3.pinP_Sec.iRe[1:8] (i), test_DY.pinSec_C.iRe[1:8] (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[1].im (i), test_DY.pinSec_C.v[1].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[1].re (i), test_DY.pinSec_C.v[1].re (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[2].im (i), test_DY.pinSec_C.v[2].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[2].re (i), test_DY.pinSec_C.v[2].re (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[3].im (i), test_DY.pinSec_C.v[3].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[3].re (i), test_DY.pinSec_C.v[3].re (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[4].im (i), test_DY.pinSec_C.v[4].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[4].re (i), test_DY.pinSec_C.v[4].re (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[5].im (i), test_DY.pinSec_C.v[5].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[5].re (i), test_DY.pinSec_C.v[5].re (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[6].im (i), test_DY.pinSec_C.v[6].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[6].re (i), test_DY.pinSec_C.v[6].re (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[7].im (i), test_DY.pinSec_C.v[7].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[7].re (i), test_DY.pinSec_C.v[7].re (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[8].im (i), test_DY.pinSec_C.v[8].im (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.v[8].re (i), test_DY.pinSec_C.v[8].re (o)}
Connection set (flow): {laptop2.pin_p.i (o), laptop2.vDC.p.i (i)}
Connection set (potential): {laptop2.pin_p.v (o), laptop2.vDC.p.v (i)}
Connection set (flow): {laptop2.pin_n.i (o), laptop2.vDC.n.i (i)}
Connection set (potential): {laptop2.pin_n.v (o), laptop2.vDC.n.v (i)}
Connection set (flow): {laptop2.hPin_P.iIm[1:8] (o), laptop2.loadBase.pin_p.iIm[1:8] (i)}
Connection set (flow): {laptop2.hPin_P.iRe[1:8] (o), laptop2.loadBase.pin_p.iRe[1:8] (i)}
Connection set (potential): {laptop2.hPin_P.v[1].im (o), laptop2.loadBase.pin_p.v[1].im (i)}
Connection set (potential): {laptop2.hPin_P.v[1].re (o), laptop2.loadBase.pin_p.v[1].re (i)}
Connection set (potential): {laptop2.hPin_P.v[2].im (o), laptop2.loadBase.pin_p.v[2].im (i)}
Connection set (potential): {laptop2.hPin_P.v[2].re (o), laptop2.loadBase.pin_p.v[2].re (i)}
Connection set (potential): {laptop2.hPin_P.v[3].im (o), laptop2.loadBase.pin_p.v[3].im (i)}
Connection set (potential): {laptop2.hPin_P.v[3].re (o), laptop2.loadBase.pin_p.v[3].re (i)}
Connection set (potential): {laptop2.hPin_P.v[4].im (o), laptop2.loadBase.pin_p.v[4].im (i)}
Connection set (potential): {laptop2.hPin_P.v[4].re (o), laptop2.loadBase.pin_p.v[4].re (i)}
Connection set (potential): {laptop2.hPin_P.v[5].im (o), laptop2.loadBase.pin_p.v[5].im (i)}
Connection set (potential): {laptop2.hPin_P.v[5].re (o), laptop2.loadBase.pin_p.v[5].re (i)}
Connection set (potential): {laptop2.hPin_P.v[6].im (o), laptop2.loadBase.pin_p.v[6].im (i)}
Connection set (potential): {laptop2.hPin_P.v[6].re (o), laptop2.loadBase.pin_p.v[6].re (i)}
Connection set (potential): {laptop2.hPin_P.v[7].im (o), laptop2.loadBase.pin_p.v[7].im (i)}
Connection set (potential): {laptop2.hPin_P.v[7].re (o), laptop2.loadBase.pin_p.v[7].re (i)}
Connection set (potential): {laptop2.hPin_P.v[8].im (o), laptop2.loadBase.pin_p.v[8].im (i)}
Connection set (potential): {laptop2.hPin_P.v[8].re (o), laptop2.loadBase.pin_p.v[8].re (i)}
Connection set (flow): {laptop2.hPin_N.iIm[1:8] (o), laptop2.loadBase.pin_n.iIm[1:8] (i)}
Connection set (flow): {laptop2.hPin_N.iRe[1:8] (o), laptop2.loadBase.pin_n.iRe[1:8] (i)}
Connection set (potential): {laptop2.hPin_N.v[1].im (o), laptop2.loadBase.pin_n.v[1].im (i)}
Connection set (potential): {laptop2.hPin_N.v[1].re (o), laptop2.loadBase.pin_n.v[1].re (i)}
Connection set (potential): {laptop2.hPin_N.v[2].im (o), laptop2.loadBase.pin_n.v[2].im (i)}
Connection set (potential): {laptop2.hPin_N.v[2].re (o), laptop2.loadBase.pin_n.v[2].re (i)}
Connection set (potential): {laptop2.hPin_N.v[3].im (o), laptop2.loadBase.pin_n.v[3].im (i)}
Connection set (potential): {laptop2.hPin_N.v[3].re (o), laptop2.loadBase.pin_n.v[3].re (i)}
Connection set (potential): {laptop2.hPin_N.v[4].im (o), laptop2.loadBase.pin_n.v[4].im (i)}
Connection set (potential): {laptop2.hPin_N.v[4].re (o), laptop2.loadBase.pin_n.v[4].re (i)}
Connection set (potential): {laptop2.hPin_N.v[5].im (o), laptop2.loadBase.pin_n.v[5].im (i)}
Connection set (potential): {laptop2.hPin_N.v[5].re (o), laptop2.loadBase.pin_n.v[5].re (i)}
Connection set (potential): {laptop2.hPin_N.v[6].im (o), laptop2.loadBase.pin_n.v[6].im (i)}
Connection set (potential): {laptop2.hPin_N.v[6].re (o), laptop2.loadBase.pin_n.v[6].re (i)}
Connection set (potential): {laptop2.hPin_N.v[7].im (o), laptop2.loadBase.pin_n.v[7].im (i)}
Connection set (potential): {laptop2.hPin_N.v[7].re (o), laptop2.loadBase.pin_n.v[7].re (i)}
Connection set (potential): {laptop2.hPin_N.v[8].im (o), laptop2.loadBase.pin_n.v[8].im (i)}
Connection set (potential): {laptop2.hPin_N.v[8].re (o), laptop2.loadBase.pin_n.v[8].re (i)}
Connection set (flow): {led_driver.pin_p.i (o), led_driver.vDC.p.i (i)}
Connection set (potential): {led_driver.pin_p.v (o), led_driver.vDC.p.v (i)}
Connection set (flow): {led_driver.pin_n.i (o), led_driver.vDC.n.i (i)}
Connection set (potential): {led_driver.pin_n.v (o), led_driver.vDC.n.v (i)}
Connection set (flow): {led_driver.hPin_P.iIm[1:8] (o), led_driver.loadBase.pin_p.iIm[1:8] (i)}
Connection set (flow): {led_driver.hPin_P.iRe[1:8] (o), led_driver.loadBase.pin_p.iRe[1:8] (i)}
Connection set (potential): {led_driver.hPin_P.v[1].im (o), led_driver.loadBase.pin_p.v[1].im (i)}
Connection set (potential): {led_driver.hPin_P.v[1].re (o), led_driver.loadBase.pin_p.v[1].re (i)}
Connection set (potential): {led_driver.hPin_P.v[2].im (o), led_driver.loadBase.pin_p.v[2].im (i)}
Connection set (potential): {led_driver.hPin_P.v[2].re (o), led_driver.loadBase.pin_p.v[2].re (i)}
Connection set (potential): {led_driver.hPin_P.v[3].im (o), led_driver.loadBase.pin_p.v[3].im (i)}
Connection set (potential): {led_driver.hPin_P.v[3].re (o), led_driver.loadBase.pin_p.v[3].re (i)}
Connection set (potential): {led_driver.hPin_P.v[4].im (o), led_driver.loadBase.pin_p.v[4].im (i)}
Connection set (potential): {led_driver.hPin_P.v[4].re (o), led_driver.loadBase.pin_p.v[4].re (i)}
Connection set (potential): {led_driver.hPin_P.v[5].im (o), led_driver.loadBase.pin_p.v[5].im (i)}
Connection set (potential): {led_driver.hPin_P.v[5].re (o), led_driver.loadBase.pin_p.v[5].re (i)}
Connection set (potential): {led_driver.hPin_P.v[6].im (o), led_driver.loadBase.pin_p.v[6].im (i)}
Connection set (potential): {led_driver.hPin_P.v[6].re (o), led_driver.loadBase.pin_p.v[6].re (i)}
Connection set (potential): {led_driver.hPin_P.v[7].im (o), led_driver.loadBase.pin_p.v[7].im (i)}
Connection set (potential): {led_driver.hPin_P.v[7].re (o), led_driver.loadBase.pin_p.v[7].re (i)}
Connection set (potential): {led_driver.hPin_P.v[8].im (o), led_driver.loadBase.pin_p.v[8].im (i)}
Connection set (potential): {led_driver.hPin_P.v[8].re (o), led_driver.loadBase.pin_p.v[8].re (i)}
Connection set (flow): {led_driver.hPin_N.iIm[1:8] (o), led_driver.loadBase.pin_n.iIm[1:8] (i)}
Connection set (flow): {led_driver.hPin_N.iRe[1:8] (o), led_driver.loadBase.pin_n.iRe[1:8] (i)}
Connection set (potential): {led_driver.hPin_N.v[1].im (o), led_driver.loadBase.pin_n.v[1].im (i)}
Connection set (potential): {led_driver.hPin_N.v[1].re (o), led_driver.loadBase.pin_n.v[1].re (i)}
Connection set (potential): {led_driver.hPin_N.v[2].im (o), led_driver.loadBase.pin_n.v[2].im (i)}
Connection set (potential): {led_driver.hPin_N.v[2].re (o), led_driver.loadBase.pin_n.v[2].re (i)}
Connection set (potential): {led_driver.hPin_N.v[3].im (o), led_driver.loadBase.pin_n.v[3].im (i)}
Connection set (potential): {led_driver.hPin_N.v[3].re (o), led_driver.loadBase.pin_n.v[3].re (i)}
Connection set (potential): {led_driver.hPin_N.v[4].im (o), led_driver.loadBase.pin_n.v[4].im (i)}
Connection set (potential): {led_driver.hPin_N.v[4].re (o), led_driver.loadBase.pin_n.v[4].re (i)}
Connection set (potential): {led_driver.hPin_N.v[5].im (o), led_driver.loadBase.pin_n.v[5].im (i)}
Connection set (potential): {led_driver.hPin_N.v[5].re (o), led_driver.loadBase.pin_n.v[5].re (i)}
Connection set (potential): {led_driver.hPin_N.v[6].im (o), led_driver.loadBase.pin_n.v[6].im (i)}
Connection set (potential): {led_driver.hPin_N.v[6].re (o), led_driver.loadBase.pin_n.v[6].re (i)}
Connection set (potential): {led_driver.hPin_N.v[7].im (o), led_driver.loadBase.pin_n.v[7].im (i)}
Connection set (potential): {led_driver.hPin_N.v[7].re (o), led_driver.loadBase.pin_n.v[7].re (i)}
Connection set (potential): {led_driver.hPin_N.v[8].im (o), led_driver.loadBase.pin_n.v[8].im (i)}
Connection set (potential): {led_driver.hPin_N.v[8].re (o), led_driver.loadBase.pin_n.v[8].re (i)}
Connection set (potential): {PhA.pin_p.reference.theta (i), test_DY.pinPrim_A.reference.theta (i)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Prim.reference.theta (i), test_DY.idealTransformer2.pinN_Prim.reference.theta (i), test_DY.pinPrim_A.reference.theta (o)}
Connection set (potential): {PhA.pin_n.reference.theta (i), ground.pin.reference.theta (i)}
Connection set (potential): {test_DY.idealTransformer1.pinN_Prim.reference.theta (i), test_DY.idealTransformer3.pinP_Prim.reference.theta (i), test_DY.pinPrim_C.reference.theta (o)}
Connection set (potential): {test_DY.hPin_N.reference.theta (o), test_DY.idealTransformer1.pinN_Sec.reference.theta (i)}
Connection set (potential): {test_DY.idealTransformer1.pinP_Sec.reference.theta (i), test_DY.pinSec_A.reference.theta (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Prim.reference.theta (i), test_DY.pinPrim_B.reference.theta (o)}
Connection set (potential): {test_DY.idealTransformer2.pinP_Sec.reference.theta (i), test_DY.pinSec_B.reference.theta (o)}
Connection set (potential): {test_DY.idealTransformer3.pinP_Sec.reference.theta (i), test_DY.pinSec_C.reference.theta (o)}
Connection set (potential): {ground1.pin.reference.theta (i), laptop2.hPin_N.reference.theta (i), led_driver.hPin_N.reference.theta (i), test_DY.hPin_N.reference.theta (i)}
Connection set (potential): {led_driver.hPin_P.reference.theta (i), test_DY.pinSec_A.reference.theta (i)}
Connection set (potential): {laptop2.hPin_P.reference.theta (i), test_DY.pinSec_B.reference.theta (i)}
Connection set (potential): {r.pin_p.reference.theta (i), test_DY.pinSec_C.reference.theta (i)}
Connection set (potential): {led_driver.hPin_P.reference.theta (o), led_driver.loadBase.pin_p.reference.theta (i)}
Connection set (potential): {laptop2.hPin_P.reference.theta (o), laptop2.loadBase.pin_p.reference.theta (i)}

Transformed flattened model:
fclass HPF.Examples.Demo
 parameter Integer systemDef.hrms[1] = 1 "Harmonics to simulate" /* 1 */;
 parameter Integer systemDef.hrms[2] = 3 "Harmonics to simulate" /* 3 */;
 parameter Integer systemDef.hrms[3] = 5 "Harmonics to simulate" /* 5 */;
 parameter Integer systemDef.hrms[4] = 7 "Harmonics to simulate" /* 7 */;
 parameter Integer systemDef.hrms[5] = 9 "Harmonics to simulate" /* 9 */;
 parameter Integer systemDef.hrms[6] = 11 "Harmonics to simulate" /* 11 */;
 parameter Integer systemDef.hrms[7] = 13 "Harmonics to simulate" /* 13 */;
 parameter Integer systemDef.hrms[8] = 15 "Harmonics to simulate" /* 15 */;
 structural parameter Integer systemDef.numHrm = 8 "Number of harmonics. (Automatically generated from hrms.)" /* 8 */;
 parameter Real systemDef.fFund = 60 "Fundamental frequency (Hz)" /* 60 */;
 parameter Real systemDef.fs = 5000.0 "Sampling frequency (Hz)" /* 5000.0 */;
 parameter Integer temp_179[1];
 parameter Integer systemDef.numPh = 3 "Number of phases" /* 3 */;
 constant String PhA.properties.ComponentType = "VoltageSource" "Type of the component";
 structural (loadResource) parameter String PhA.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" */;
 structural parameter String PhA.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat" */;
 structural parameter Integer PhA.matDim[1] = 32 /* 32 */;
 structural parameter Integer PhA.matDim[2] = 1 /* 1 */;
 structural parameter Real PhA.magDataMat[2,1] = 491.28990594667346 /* 491.28990594667346 */;
 structural parameter Real PhA.magDataMat[3,1] = 0.4635405644252304 /* 0.4635405644252304 */;
 structural parameter Real PhA.magDataMat[4,1] = 1.0463774223253857 /* 1.0463774223253857 */;
 structural parameter Real PhA.magDataMat[5,1] = 0.2331345715632324 /* 0.2331345715632324 */;
 structural parameter Real PhA.magDataMat[6,1] = 1.6598617132749682 /* 1.6598617132749682 */;
 structural parameter Real PhA.magDataMat[7,1] = 0.1518565411422124 /* 0.1518565411422124 */;
 structural parameter Real PhA.magDataMat[8,1] = 1.9105967094709126 /* 1.9105967094709126 */;
 structural parameter Real PhA.magDataMat[9,1] = 0.1386948308207945 /* 0.1386948308207945 */;
 structural parameter Real PhA.magDataMat[10,1] = 0.5251811665424375 /* 0.5251811665424375 */;
 structural parameter Real PhA.magDataMat[11,1] = 0.0877197456635834 /* 0.0877197456635834 */;
 structural parameter Real PhA.magDataMat[12,1] = 1.9262797730195742 /* 1.9262797730195742 */;
 structural parameter Real PhA.magDataMat[13,1] = 0.1184440683532766 /* 0.1184440683532766 */;
 structural parameter Real PhA.magDataMat[14,1] = 0.481422982261235 /* 0.481422982261235 */;
 structural parameter Real PhA.magDataMat[15,1] = 0.0544090284431237 /* 0.0544090284431237 */;
 structural parameter Real PhA.magDataMat[16,1] = 0.1451474507152328 /* 0.1451474507152328 */;
 structural parameter Real PhA.magDataMat[17,1] = 0.0258533576473125 /* 0.0258533576473125 */;
 structural parameter Real PhA.magDataMat[18,1] = 0.8951740935763725 /* 0.8951740935763725 */;
 structural parameter Real PhA.magDataMat[19,1] = 0.035779586777545 /* 0.035779586777545 */;
 structural parameter Real PhA.magDataMat[20,1] = 0.1306259620277833 /* 0.1306259620277833 */;
 structural parameter Real PhA.magDataMat[21,1] = 0.1030772087446648 /* 0.1030772087446648 */;
 structural parameter Real PhA.magDataMat[22,1] = 0.0294340894198748 /* 0.0294340894198748 */;
 structural parameter Real PhA.magDataMat[23,1] = 0.0944957041462652 /* 0.0944957041462652 */;
 structural parameter Real PhA.magDataMat[24,1] = 0.3245085302933516 /* 0.3245085302933516 */;
 structural parameter Real PhA.magDataMat[25,1] = 0.0390577054549229 /* 0.0390577054549229 */;
 structural parameter Real PhA.magDataMat[26,1] = 0.0340450317134204 /* 0.0340450317134204 */;
 structural parameter Real PhA.magDataMat[27,1] = 0.1097767013072763 /* 0.1097767013072763 */;
 structural parameter Real PhA.magDataMat[28,1] = 0.0470594525429294 /* 0.0470594525429294 */;
 structural parameter Real PhA.magDataMat[29,1] = 0.1228566379285578 /* 0.1228566379285578 */;
 structural parameter Real PhA.magDataMat[30,1] = 0.2164928463914955 /* 0.2164928463914955 */;
 structural parameter Real PhA.magDataMat[31,1] = 0.0342300079933074 /* 0.0342300079933074 */;
 structural parameter Real PhA.magDataMat[32,1] = 0.0348258926394183 /* 0.0348258926394183 */;
 structural parameter Real PhA.argDataMat[1,1] = 1.5707963267948966 /* 1.5707963267948966 */;
 structural parameter Real PhA.argDataMat[2,1] = 0.0077560921535743 /* 0.0077560921535743 */;
 structural parameter Real PhA.argDataMat[3,1] = -0.0852246972433012 /* -0.0852246972433012 */;
 structural parameter Real PhA.argDataMat[4,1] = 0.1337983605530348 /* 0.1337983605530348 */;
 structural parameter Real PhA.argDataMat[5,1] = -0.5679607507970243 /* -0.5679607507970243 */;
 structural parameter Real PhA.argDataMat[6,1] = 0.3371965305429522 /* 0.3371965305429522 */;
 structural parameter Real PhA.argDataMat[7,1] = -0.0199975129308559 /* -0.0199975129308559 */;
 structural parameter Real PhA.argDataMat[8,1] = -2.4142373069782015 /* -2.4142373069782015 */;
 structural parameter Real PhA.argDataMat[9,1] = 0.6504198353240805 /* 0.6504198353240805 */;
 structural parameter Real PhA.argDataMat[10,1] = -2.715056952812912 /* -2.715056952812912 */;
 structural parameter Real PhA.argDataMat[11,1] = 0.5102162003333609 /* 0.5102162003333609 */;
 structural parameter Real PhA.argDataMat[12,1] = -0.1108023593667606 /* -0.1108023593667606 */;
 structural parameter Real PhA.argDataMat[13,1] = -0.262421590602965 /* -0.262421590602965 */;
 structural parameter Real PhA.argDataMat[14,1] = 1.7236257613676265 /* 1.7236257613676265 */;
 structural parameter Real PhA.argDataMat[15,1] = 1.1515321243259355 /* 1.1515321243259355 */;
 structural parameter Real PhA.argDataMat[16,1] = -0.2477226727538361 /* -0.2477226727538361 */;
 structural parameter Real PhA.argDataMat[17,1] = -1.7754828141248986 /* -1.7754828141248986 */;
 structural parameter Real PhA.argDataMat[18,1] = 2.663073916674371 /* 2.663073916674371 */;
 structural parameter Real PhA.argDataMat[19,1] = -0.0318137713960557 /* -0.0318137713960557 */;
 structural parameter Real PhA.argDataMat[20,1] = 0.2993721368277082 /* 0.2993721368277082 */;
 structural parameter Real PhA.argDataMat[21,1] = 1.1393837225179722 /* 1.1393837225179722 */;
 structural parameter Real PhA.argDataMat[22,1] = 2.391777148898547 /* 2.391777148898547 */;
 structural parameter Real PhA.argDataMat[23,1] = 1.5648231015885503 /* 1.5648231015885503 */;
 structural parameter Real PhA.argDataMat[24,1] = -0.356629080481576 /* -0.356629080481576 */;
 structural parameter Real PhA.argDataMat[25,1] = 0.2671820434478699 /* 0.2671820434478699 */;
 structural parameter Real PhA.argDataMat[26,1] = 2.3096759301950636 /* 2.3096759301950636 */;
 structural parameter Real PhA.argDataMat[27,1] = 0.1696844071201723 /* 0.1696844071201723 */;
 structural parameter Real PhA.argDataMat[28,1] = -0.0763985737214103 /* -0.0763985737214103 */;
 structural parameter Real PhA.argDataMat[29,1] = 0.5594469031924515 /* 0.5594469031924515 */;
 structural parameter Real PhA.argDataMat[30,1] = -1.2997703855896772 /* -1.2997703855896772 */;
 structural parameter Real PhA.argDataMat[31,1] = 0.4481215218879092 /* 0.4481215218879092 */;
 structural parameter Real PhA.argDataMat[32,1] = 0.9517083118310508 /* 0.9517083118310508 */;
 Modelica.SIunits.Angle PhA.theta(start = 0);
 constant Real PhA.v[1].re(start = 0) = 1.0311400982534205E-18 "Real part of complex number";
 constant Real PhA.v[1].im(start = 0) = 0.016839795751254 "Imaginary part of complex number";
 constant Real PhA.v[2].re(start = 0) = 491.27512876579294 "Real part of complex number";
 constant Real PhA.v[2].im(start = 0) = 3.8104515801744143 "Imaginary part of complex number";
 constant Real PhA.v[3].re(start = 0) = 0.46185817781935556 "Real part of complex number";
 constant Real PhA.v[3].im(start = 0) = -0.03945729905918179 "Imaginary part of complex number";
 constant Real PhA.v[4].re(start = 0) = 1.0370252617081184 "Real part of complex number";
 constant Real PhA.v[4].im(start = 0) = 0.13958623331663875 "Imaginary part of complex number";
 constant Real PhA.v[5].re(start = 0) = 0.19653236644744274 "Real part of complex number";
 constant Real PhA.v[5].im(start = 0) = -0.12540636904296373 "Imaginary part of complex number";
 constant Real PhA.v[6].re(start = 0) = 1.566388062268859 "Real part of complex number";
 constant Real PhA.v[6].im(start = 0) = 0.5491532987952651 "Imaginary part of complex number";
 constant Real PhA.v[7].re(start = 0) = 0.15182617839892862 "Real part of complex number";
 constant Real PhA.v[7].im(start = 0) = -0.0030365507493113567 "Imaginary part of complex number";
 constant Real PhA.v[8].re(start = 0) = -1.4270923812109018 "Real part of complex number";
 constant Real PhA.v[8].im(start = 0) = -1.2703492125124007 "Imaginary part of complex number";
 Real PhA.i[1].re(start = 0) "Real part of complex number";
 Real PhA.i[1].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[2].re(start = 0) "Real part of complex number";
 Real PhA.i[2].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[3].re(start = 0) "Real part of complex number";
 Real PhA.i[3].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[4].re(start = 0) "Real part of complex number";
 Real PhA.i[4].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[5].re(start = 0) "Real part of complex number";
 Real PhA.i[5].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[6].re(start = 0) "Real part of complex number";
 Real PhA.i[6].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[7].re(start = 0) "Real part of complex number";
 Real PhA.i[7].im(start = 0) "Imaginary part of complex number";
 Real PhA.i[8].re(start = 0) "Real part of complex number";
 Real PhA.i[8].im(start = 0) "Imaginary part of complex number";
 Real PhA.omega;
 constant Real PhA.pin_n.v[1].re = 0.0 "Real part of complex number";
 structural (loadResource) parameter String PhB.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" */;
 structural parameter String PhB.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat" */;
 structural parameter Real PhB.magDataMat[2,1] = 492.3540794785275 /* 492.3540794785275 */;
 structural parameter Real PhB.magDataMat[3,1] = 0.208496948122041 /* 0.208496948122041 */;
 structural parameter Real PhB.magDataMat[4,1] = 1.1805408036097413 /* 1.1805408036097413 */;
 structural parameter Real PhB.magDataMat[5,1] = 0.1693263989961228 /* 0.1693263989961228 */;
 structural parameter Real PhB.magDataMat[6,1] = 0.9106214363027906 /* 0.9106214363027906 */;
 structural parameter Real PhB.magDataMat[7,1] = 0.1195391546137544 /* 0.1195391546137544 */;
 structural parameter Real PhB.magDataMat[8,1] = 1.6580541328073826 /* 1.6580541328073826 */;
 structural parameter Real PhB.magDataMat[9,1] = 0.1269101445860712 /* 0.1269101445860712 */;
 structural parameter Real PhB.magDataMat[10,1] = 0.3289985189761305 /* 0.3289985189761305 */;
 structural parameter Real PhB.magDataMat[11,1] = 0.0946942856942096 /* 0.0946942856942096 */;
 structural parameter Real PhB.magDataMat[12,1] = 2.0198413017769763 /* 2.0198413017769763 */;
 structural parameter Real PhB.magDataMat[13,1] = 0.0836821242552161 /* 0.0836821242552161 */;
 structural parameter Real PhB.magDataMat[14,1] = 0.4924159700118574 /* 0.4924159700118574 */;
 structural parameter Real PhB.magDataMat[15,1] = 0.0668687465332885 /* 0.0668687465332885 */;
 structural parameter Real PhB.magDataMat[16,1] = 0.1143872931492812 /* 0.1143872931492812 */;
 structural parameter Real PhB.magDataMat[17,1] = 0.076898954125649 /* 0.076898954125649 */;
 structural parameter Real PhB.magDataMat[18,1] = 0.9655752395607782 /* 0.9655752395607782 */;
 structural parameter Real PhB.magDataMat[19,1] = 0.0349853026484666 /* 0.0349853026484666 */;
 structural parameter Real PhB.magDataMat[20,1] = 0.226897033607389 /* 0.226897033607389 */;
 structural parameter Real PhB.magDataMat[21,1] = 0.098402544910626 /* 0.098402544910626 */;
 structural parameter Real PhB.magDataMat[22,1] = 0.0652517506228442 /* 0.0652517506228442 */;
 structural parameter Real PhB.magDataMat[23,1] = 0.08011082638466 /* 0.08011082638466 */;
 structural parameter Real PhB.magDataMat[24,1] = 0.1620678510443835 /* 0.1620678510443835 */;
 structural parameter Real PhB.magDataMat[25,1] = 0.0400637050971903 /* 0.0400637050971903 */;
 structural parameter Real PhB.magDataMat[26,1] = 0.0561736562706734 /* 0.0561736562706734 */;
 structural parameter Real PhB.magDataMat[27,1] = 0.1331380625697481 /* 0.1331380625697481 */;
 structural parameter Real PhB.magDataMat[28,1] = 0.0296172064955882 /* 0.0296172064955882 */;
 structural parameter Real PhB.magDataMat[29,1] = 0.094827068391166 /* 0.094827068391166 */;
 structural parameter Real PhB.magDataMat[30,1] = 0.2157544231279243 /* 0.2157544231279243 */;
 structural parameter Real PhB.magDataMat[31,1] = 0.0180623326640486 /* 0.0180623326640486 */;
 structural parameter Real PhB.magDataMat[32,1] = 0.0434623170353308 /* 0.0434623170353308 */;
 structural parameter Real PhB.argDataMat[2,1] = -2.086840476097504 /* -2.086840476097504 */;
 structural parameter Real PhB.argDataMat[3,1] = -2.5253242170980594 /* -2.5253242170980594 */;
 structural parameter Real PhB.argDataMat[4,1] = -1.8115418295128152 /* -1.8115418295128152 */;
 structural parameter Real PhB.argDataMat[5,1] = 2.8595229031828926 /* 2.8595229031828926 */;
 structural parameter Real PhB.argDataMat[6,1] = 2.8739733224576094 /* 2.8739733224576094 */;
 structural parameter Real PhB.argDataMat[7,1] = -2.8607178229132786 /* -2.8607178229132786 */;
 structural parameter Real PhB.argDataMat[8,1] = 2.073331261624584 /* 2.073331261624584 */;
 structural parameter Real PhB.argDataMat[9,1] = -2.9351292614081848 /* -2.9351292614081848 */;
 structural parameter Real PhB.argDataMat[10,1] = -0.1551377562798652 /* -0.1551377562798652 */;
 structural parameter Real PhB.argDataMat[11,1] = -1.6094031270218976 /* -1.6094031270218976 */;
 structural parameter Real PhB.argDataMat[12,1] = 2.1810033665310717 /* 2.1810033665310717 */;
 structural parameter Real PhB.argDataMat[13,1] = 2.8832395214114577 /* 2.8832395214114577 */;
 structural parameter Real PhB.argDataMat[14,1] = -0.0631873306821448 /* -0.0631873306821448 */;
 structural parameter Real PhB.argDataMat[15,1] = -2.133736341444569 /* -2.133736341444569 */;
 structural parameter Real PhB.argDataMat[16,1] = -2.9370100120292153 /* -2.9370100120292153 */;
 structural parameter Real PhB.argDataMat[17,1] = 1.5326277680479188 /* 1.5326277680479188 */;
 structural parameter Real PhB.argDataMat[18,1] = -1.4355335492083865 /* -1.4355335492083865 */;
 structural parameter Real PhB.argDataMat[19,1] = -2.7058834666324927 /* -2.7058834666324927 */;
 structural parameter Real PhB.argDataMat[20,1] = -1.82542395065559 /* -1.82542395065559 */;
 structural parameter Real PhB.argDataMat[21,1] = -2.9017038801663326 /* -2.9017038801663326 */;
 structural parameter Real PhB.argDataMat[22,1] = -1.6471531147838383 /* -1.6471531147838383 */;
 structural parameter Real PhB.argDataMat[23,1] = -0.2664005312148152 /* -0.2664005312148152 */;
 structural parameter Real PhB.argDataMat[24,1] = 2.233387596536119 /* 2.233387596536119 */;
 structural parameter Real PhB.argDataMat[25,1] = -2.373672554709982 /* -2.373672554709982 */;
 structural parameter Real PhB.argDataMat[26,1] = 0.8816266227593619 /* 0.8816266227593619 */;
 structural parameter Real PhB.argDataMat[27,1] = 2.17935104062631 /* 2.17935104062631 */;
 structural parameter Real PhB.argDataMat[28,1] = 2.36233434884658 /* 2.36233434884658 */;
 structural parameter Real PhB.argDataMat[29,1] = -1.275072088990568 /* -1.275072088990568 */;
 structural parameter Real PhB.argDataMat[30,1] = 0.9083106039150173 /* 0.9083106039150173 */;
 structural parameter Real PhB.argDataMat[31,1] = -2.5000963969047283 /* -2.5000963969047283 */;
 structural parameter Real PhB.argDataMat[32,1] = 2.7980169261979593 /* 2.7980169261979593 */;
 Modelica.SIunits.Angle PhB.theta(start = 0);
 constant Real PhB.v[1].re(start = 0) = 1.751221856265376E-17 "Real part of complex number";
 constant Real PhB.v[1].im(start = 0) = 0.2859962329521695 "Imaginary part of complex number";
 constant Real PhB.v[2].re(start = 0) = -242.94881973633827 "Real part of complex number";
 constant Real PhB.v[2].im(start = 0) = -428.2387308124621 "Imaginary part of complex number";
 constant Real PhB.v[3].re(start = 0) = -0.17014204861571908 "Real part of complex number";
 constant Real PhB.v[3].im(start = 0) = -0.12051000236101295 "Imaginary part of complex number";
 constant Real PhB.v[4].re(start = 0) = -0.2814724425964085 "Real part of complex number";
 constant Real PhB.v[4].im(start = 0) = -1.1464945935530377 "Imaginary part of complex number";
 constant Real PhB.v[5].re(start = 0) = -0.1626348555772872 "Real part of complex number";
 constant Real PhB.v[5].im(start = 0) = 0.04713102108324313 "Imaginary part of complex number";
 constant Real PhB.v[6].re(start = 0) = -0.8782061942567747 "Real part of complex number";
 constant Real PhB.v[6].im(start = 0) = 0.24080133019397804 "Imaginary part of complex number";
 constant Real PhB.v[7].re(start = 0) = -0.11485481036252071 "Real part of complex number";
 constant Real PhB.v[7].im(start = 0) = -0.033135811780617135 "Imaginary part of complex number";
 constant Real PhB.v[8].re(start = 0) = -0.7985994691268073 "Real part of complex number";
 constant Real PhB.v[8].im(start = 0) = 1.4530596667824838 "Imaginary part of complex number";
 Real PhB.i[1].re(start = 0) "Real part of complex number";
 Real PhB.i[1].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[2].re(start = 0) "Real part of complex number";
 Real PhB.i[2].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[3].re(start = 0) "Real part of complex number";
 Real PhB.i[3].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[4].re(start = 0) "Real part of complex number";
 Real PhB.i[4].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[5].re(start = 0) "Real part of complex number";
 Real PhB.i[5].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[6].re(start = 0) "Real part of complex number";
 Real PhB.i[6].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[7].re(start = 0) "Real part of complex number";
 Real PhB.i[7].im(start = 0) "Imaginary part of complex number";
 Real PhB.i[8].re(start = 0) "Real part of complex number";
 Real PhB.i[8].im(start = 0) "Imaginary part of complex number";
 Real PhB.omega;
 structural (loadResource) parameter String PhC.fileName = "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" "Specify file path (String: Unix style path in the library.)" /* "HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" */;
 structural parameter String PhC.resourceRetVal = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat" */;
 structural parameter Real PhC.magDataMat[1,1] = 0.2719091281810751 /* 0.2719091281810751 */;
 structural parameter Real PhC.magDataMat[2,1] = 491.7835718293929 /* 491.7835718293929 */;
 structural parameter Real PhC.magDataMat[3,1] = 0.3388220554753613 /* 0.3388220554753613 */;
 structural parameter Real PhC.magDataMat[4,1] = 1.2560872424865368 /* 1.2560872424865368 */;
 structural parameter Real PhC.magDataMat[5,1] = 0.0837965376619556 /* 0.0837965376619556 */;
 structural parameter Real PhC.magDataMat[6,1] = 1.049579074569396 /* 1.049579074569396 */;
 structural parameter Real PhC.magDataMat[7,1] = 0.0479633900797327 /* 0.0479633900797327 */;
 structural parameter Real PhC.magDataMat[8,1] = 2.232243217516371 /* 2.232243217516371 */;
 structural parameter Real PhC.magDataMat[9,1] = 0.0613261670877852 /* 0.0613261670877852 */;
 structural parameter Real PhC.magDataMat[10,1] = 0.3085661753673511 /* 0.3085661753673511 */;
 structural parameter Real PhC.magDataMat[11,1] = 0.0894017215045658 /* 0.0894017215045658 */;
 structural parameter Real PhC.magDataMat[12,1] = 1.6340384052716668 /* 1.6340384052716668 */;
 structural parameter Real PhC.magDataMat[13,1] = 0.0360394590491708 /* 0.0360394590491708 */;
 structural parameter Real PhC.magDataMat[14,1] = 0.6080350350042865 /* 0.6080350350042865 */;
 structural parameter Real PhC.magDataMat[15,1] = 0.0144866764815914 /* 0.0144866764815914 */;
 structural parameter Real PhC.magDataMat[16,1] = 0.0616593186094572 /* 0.0616593186094572 */;
 structural parameter Real PhC.magDataMat[17,1] = 0.0526340810138655 /* 0.0526340810138655 */;
 structural parameter Real PhC.magDataMat[18,1] = 0.8610409933552359 /* 0.8610409933552359 */;
 structural parameter Real PhC.magDataMat[19,1] = 0.0223544380084765 /* 0.0223544380084765 */;
 structural parameter Real PhC.magDataMat[20,1] = 0.1965193072432281 /* 0.1965193072432281 */;
 structural parameter Real PhC.magDataMat[21,1] = 0.0820234182998287 /* 0.0820234182998287 */;
 structural parameter Real PhC.magDataMat[22,1] = 0.0475998645936773 /* 0.0475998645936773 */;
 structural parameter Real PhC.magDataMat[23,1] = 0.1031046389723781 /* 0.1031046389723781 */;
 structural parameter Real PhC.magDataMat[24,1] = 0.2083187534520808 /* 0.2083187534520808 */;
 structural parameter Real PhC.magDataMat[25,1] = 0.0208153705589776 /* 0.0208153705589776 */;
 structural parameter Real PhC.magDataMat[26,1] = 0.0678806501902422 /* 0.0678806501902422 */;
 structural parameter Real PhC.magDataMat[27,1] = 0.1312213892402629 /* 0.1312213892402629 */;
 structural parameter Real PhC.magDataMat[28,1] = 0.0355695042062854 /* 0.0355695042062854 */;
 structural parameter Real PhC.magDataMat[29,1] = 0.1405141155536664 /* 0.1405141155536664 */;
 structural parameter Real PhC.magDataMat[30,1] = 0.1917926361699222 /* 0.1917926361699222 */;
 structural parameter Real PhC.magDataMat[31,1] = 0.0151716866761024 /* 0.0151716866761024 */;
 structural parameter Real PhC.magDataMat[32,1] = 0.0441299911973412 /* 0.0441299911973412 */;
 structural parameter Real PhC.argDataMat[1,1] = -1.5707963267948966 /* -1.5707963267948966 */;
 structural parameter Real PhC.argDataMat[2,1] = 2.1002127315831656 /* 2.1002127315831656 */;
 structural parameter Real PhC.argDataMat[3,1] = 2.626463259293345 /* 2.626463259293345 */;
 structural parameter Real PhC.argDataMat[4,1] = 2.213433315249527 /* 2.213433315249527 */;
 structural parameter Real PhC.argDataMat[5,1] = 1.9305801732284436 /* 1.9305801732284436 */;
 structural parameter Real PhC.argDataMat[6,1] = -2.287526674673138 /* -2.287526674673138 */;
 structural parameter Real PhC.argDataMat[7,1] = 2.4365080165904245 /* 2.4365080165904245 */;
 structural parameter Real PhC.argDataMat[8,1] = -0.0814742736872363 /* -0.0814742736872363 */;
 structural parameter Real PhC.argDataMat[9,1] = -1.384994505036182 /* -1.384994505036182 */;
 structural parameter Real PhC.argDataMat[10,1] = 1.0470875569304956 /* 1.0470875569304956 */;
 structural parameter Real PhC.argDataMat[11,1] = 2.631009325075965 /* 2.631009325075965 */;
 structural parameter Real PhC.argDataMat[12,1] = -2.0524997537545646 /* -2.0524997537545646 */;
 structural parameter Real PhC.argDataMat[13,1] = 3.1325135086188496 /* 3.1325135086188496 */;
 structural parameter Real PhC.argDataMat[14,1] = -2.3307335874922797 /* -2.3307335874922797 */;
 structural parameter Real PhC.argDataMat[15,1] = 0.0369170525554631 /* 0.0369170525554631 */;
 structural parameter Real PhC.argDataMat[16,1] = 1.98109019446484 /* 1.98109019446484 */;
 structural parameter Real PhC.argDataMat[17,1] = -1.5401794110408888 /* -1.5401794110408888 */;
 structural parameter Real PhC.argDataMat[18,1] = 0.6878100982576986 /* 0.6878100982576986 */;
 structural parameter Real PhC.argDataMat[19,1] = 1.8960282037310516 /* 1.8960282037310516 */;
 structural parameter Real PhC.argDataMat[20,1] = 1.905818739906312 /* 1.905818739906312 */;
 structural parameter Real PhC.argDataMat[21,1] = -0.8685007111657533 /* -0.8685007111657533 */;
 structural parameter Real PhC.argDataMat[22,1] = 0.9586173036243184 /* 0.9586173036243184 */;
 structural parameter Real PhC.argDataMat[23,1] = -2.359173994218259 /* -2.359173994218259 */;
 structural parameter Real PhC.argDataMat[24,1] = -3.0830059554674554 /* -3.0830059554674554 */;
 structural parameter Real PhC.argDataMat[25,1] = 2.345527303073058 /* 2.345527303073058 */;
 structural parameter Real PhC.argDataMat[26,1] = -1.6859722132521102 /* -1.6859722132521102 */;
 structural parameter Real PhC.argDataMat[27,1] = -1.8371613968199139 /* -1.8371613968199139 */;
 structural parameter Real PhC.argDataMat[28,1] = -2.6180299851214954 /* -2.6180299851214954 */;
 structural parameter Real PhC.argDataMat[29,1] = 2.891302880891181 /* 2.891302880891181 */;
 structural parameter Real PhC.argDataMat[30,1] = 2.9641683759106843 /* 2.9641683759106843 */;
 structural parameter Real PhC.argDataMat[31,1] = 3.108553064967207 /* 3.108553064967207 */;
 structural parameter Real PhC.argDataMat[32,1] = -1.056675653397591 /* -1.056675653397591 */;
 Modelica.SIunits.Angle PhC.theta(start = 0);
 constant Real PhC.v[1].re(start = 0) = 1.664963217429505E-17 "Real part of complex number";
 constant Real PhC.v[1].im(start = 0) = -0.2719091281810751 "Imaginary part of complex number";
 constant Real PhC.v[2].re(start = 0) = -248.3653220750918 "Real part of complex number";
 constant Real PhC.v[2].im(start = 0) = 424.4593600237973 "Imaginary part of complex number";
 constant Real PhC.v[3].re(start = 0) = -0.29485277302954244 "Real part of complex number";
 constant Real PhC.v[3].im(start = 0) = 0.1669198236080363 "Imaginary part of complex number";
 constant Real PhC.v[4].re(start = 0) = -0.7527837357957233 "Real part of complex number";
 constant Real PhC.v[4].im(start = 0) = 1.0055206650580915 "Imaginary part of complex number";
 constant Real PhC.v[5].re(start = 0) = -0.029502408541760127 "Real part of complex number";
 constant Real PhC.v[5].im(start = 0) = 0.07843129231605599 "Imaginary part of complex number";
 constant Real PhC.v[6].re(start = 0) = -0.6894926433666458 "Real part of complex number";
 constant Real PhC.v[6].im(start = 0) = -0.7913381884613084 "Imaginary part of complex number";
 constant Real PhC.v[7].re(start = 0) = -0.0365268411368637 "Real part of complex number";
 constant Real PhC.v[7].im(start = 0) = 0.031084990984443336 "Imaginary part of complex number";
 constant Real PhC.v[8].re(start = 0) = 2.22483843582757 "Real part of complex number";
 constant Real PhC.v[8].im(start = 0) = -0.18166925059616615 "Imaginary part of complex number";
 Real PhC.i[1].re(start = 0) "Real part of complex number";
 Real PhC.i[1].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[2].re(start = 0) "Real part of complex number";
 Real PhC.i[2].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[3].re(start = 0) "Real part of complex number";
 Real PhC.i[3].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[4].re(start = 0) "Real part of complex number";
 Real PhC.i[4].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[5].re(start = 0) "Real part of complex number";
 Real PhC.i[5].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[6].re(start = 0) "Real part of complex number";
 Real PhC.i[6].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[7].re(start = 0) "Real part of complex number";
 Real PhC.i[7].im(start = 0) "Imaginary part of complex number";
 Real PhC.i[8].re(start = 0) "Real part of complex number";
 Real PhC.i[8].im(start = 0) "Imaginary part of complex number";
 Real PhC.omega;
 constant String test_DY.properties.ComponentType = "MultiPhaseTransformer" "Type of the component";
 parameter Integer test_DY.N = 10 "Turns ration" /* 10 */;
 constant String test_DY.idealTransformer1.properties.ComponentType = "Transformer" "Type of the component";
 parameter Integer temp_179[2];
 constant Real test_DY.idealTransformer1.vPrim[1].re = -1.561849207604163E-17 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[1].im = 0.2887489239323291 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[2].re = 739.6404508408848 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[2].im = -420.6489084436229 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[3].re = 0.7567109508488981 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[3].im = -0.2063771226672181 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[4].re = 1.7898089975038416 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[4].im = -0.8659344317414527 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[5].re = 0.22603477498920285 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[5].im = -0.2038376613590197 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[6].re = 2.255880705635505 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[6].im = 1.3404914872565734 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[7].re = 0.1883530195357923 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[7].im = -0.034121541733754694 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[8].re = -3.6519308170384717 "Real part of complex number";
 constant Real test_DY.idealTransformer1.vPrim[8].im = -1.0886799619162346 "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[1].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[1].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[2].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[2].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[3].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[3].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[4].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[4].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[5].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[5].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[6].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[6].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[7].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[7].im "Imaginary part of complex number";
 Real test_DY.idealTransformer1.iPrim[8].re "Real part of complex number";
 Real test_DY.idealTransformer1.iPrim[8].im "Imaginary part of complex number";
 parameter Real temp_180[1,1];
 constant Real test_DY.idealTransformer2.vPrim[1].re = 1.648107846440034E-17 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[1].im = 0.26915643720091553 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[2].re = -734.2239485021312 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[2].im = -432.0491823926365 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[3].re = -0.6320002264350746 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[3].im = -0.08105270330183115 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[4].re = -1.318497704304527 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[4].im = -1.2860808268696764 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[5].re = -0.35916722202472995 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[5].im = 0.17253739012620686 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[6].re = -2.444594256525634 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[6].im = -0.30835196860128705 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[7].re = -0.2666809887614493 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[7].im = -0.03009926103130578 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[8].re = 0.6284929120840944 "Real part of complex number";
 constant Real test_DY.idealTransformer2.vPrim[8].im = 2.7234088792948845 "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[1].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[1].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[2].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[2].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[3].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[3].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[4].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[4].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[5].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[5].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[6].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[6].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[7].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[7].im "Imaginary part of complex number";
 Real test_DY.idealTransformer2.iPrim[8].re "Real part of complex number";
 Real test_DY.idealTransformer2.iPrim[8].im "Imaginary part of complex number";
 parameter Real temp_180[2,1];
 constant Real test_DY.idealTransformer3.vPrim[1].re = -8.625863883587114E-19 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[1].im = -0.5579053611332446 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[2].re = -5.416502338753531 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[2].im = 852.6980908362593 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[3].re = -0.12471072441382336 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[3].im = 0.28742982596904926 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[4].re = -0.4713112931993148 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[4].im = 2.1520152586111294 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[5].re = 0.1331324470355271 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[5].im = 0.03130027123281286 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[6].re = 0.18871355089012887 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[6].im = -1.0321395186552864 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[7].re = 0.07832796922565702 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[7].im = 0.06422080276506047 "Imaginary part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[8].re = 3.0234379049543776 "Real part of complex number";
 constant Real test_DY.idealTransformer3.vPrim[8].im = -1.63472891737865 "Imaginary part of complex number";
 parameter Real temp_180[3,1];
 parameter Real temp_180[4,1];
 parameter Real temp_180[5,1];
 parameter Real temp_180[6,1];
 parameter Real temp_180[7,1];
 parameter Real temp_180[8,1];
 parameter Real temp_180[9,1];
 parameter Real temp_180[10,1];
 parameter Real temp_180[11,1];
 parameter Real temp_180[12,1];
 parameter Real temp_180[13,1];
 parameter Real temp_180[14,1];
 parameter Real temp_180[15,1];
 parameter Real temp_180[16,1];
 parameter Real temp_180[17,1];
 parameter Real temp_180[18,1];
 Real test_DY.hPin_N.iIm[1];
 Real test_DY.hPin_N.iIm[2];
 Real test_DY.hPin_N.iIm[3];
 Real test_DY.hPin_N.iIm[4];
 Real test_DY.hPin_N.iIm[5];
 Real test_DY.hPin_N.iIm[6];
 Real test_DY.hPin_N.iIm[7];
 Real test_DY.hPin_N.iIm[8];
 Real test_DY.hPin_N.iRe[1];
 Real test_DY.hPin_N.iRe[2];
 Real test_DY.hPin_N.iRe[3];
 Real test_DY.hPin_N.iRe[4];
 Real test_DY.hPin_N.iRe[5];
 Real test_DY.hPin_N.iRe[6];
 Real test_DY.hPin_N.iRe[7];
 Real test_DY.hPin_N.iRe[8];
 constant String ground.properties.ComponentType = "Ground" "Type of the component";
 Real ground.pin.iIm[1];
 Real ground.pin.iIm[2];
 Real ground.pin.iIm[3];
 Real ground.pin.iIm[4];
 Real ground.pin.iIm[5];
 Real ground.pin.iIm[6];
 Real ground.pin.iIm[7];
 Real ground.pin.iIm[8];
 Real ground.pin.iRe[1];
 Real ground.pin.iRe[2];
 Real ground.pin.iRe[3];
 Real ground.pin.iRe[4];
 Real ground.pin.iRe[5];
 Real ground.pin.iRe[6];
 Real ground.pin.iRe[7];
 Real ground.pin.iRe[8];
 constant String laptop2.properties.ComponentType = "NonlinearLoad" "Type of the component";
 parameter Real laptop2.V_Rect(start = 0) = 19.5 "Rectifier DC output" /* 19.5 */;
 parameter Real laptop2.efficiency(start = 1) = 0.9 "Rectifier efficiency (replace with efficiency model or curve)" /* 0.9 */;
 parameter Real laptop2.rectifierModel = 0 "Rectifier model (Other model parameters passed as a record?)" /* 0 */;
 parameter Real temp_180[19,1];
 parameter Real temp_180[20,1];
 parameter Real temp_180[21,1];
 parameter Real temp_180[22,1];
 parameter Real temp_180[23,1];
 parameter Real temp_180[24,1];
 parameter Real temp_180[25,1];
 parameter Real temp_180[26,1];
 parameter Real temp_180[27,1];
 parameter Real temp_180[28,1];
 parameter Real temp_180[29,1];
 parameter Real temp_180[30,1];
 parameter Real temp_180[31,1];
 parameter Real temp_180[32,1];
 parameter Real temp_181[1,1];
 parameter Real temp_181[2,1];
 parameter Real temp_181[3,1];
 Real laptop2.loadBase.i[1].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[1].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[2].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[2].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[3].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[3].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[4].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[4].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[5].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[5].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[6].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[6].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[7].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[7].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.i[8].re(start = 0) "Real part of complex number";
 Real laptop2.loadBase.i[8].im(start = 0) "Imaginary part of complex number";
 Real laptop2.loadBase.omega;
 parameter Real temp_181[4,1];
 Real laptop2.I_mag[1];
 Real laptop2.I_mag[2];
 Real laptop2.I_mag[3];
 Real laptop2.I_mag[4];
 Real laptop2.I_mag[5];
 Real laptop2.I_mag[6];
 Real laptop2.I_mag[7];
 Real laptop2.I_mag[8];
 Real laptop2.I_arg[1];
 Real laptop2.I_arg[2];
 Real laptop2.I_arg[3];
 Real laptop2.I_arg[4];
 Real laptop2.I_arg[5];
 Real laptop2.I_arg[6];
 Real laptop2.I_arg[7];
 Real laptop2.I_arg[8];
 parameter Real temp_181[5,1];
 parameter Real temp_181[6,1];
 parameter Real temp_181[7,1];
 parameter Real temp_181[8,1];
 parameter Real temp_181[9,1];
 parameter Real temp_181[10,1];
 parameter Real temp_181[11,1];
 parameter Real temp_181[12,1];
 parameter Real temp_181[13,1];
 parameter Real temp_181[14,1];
 parameter Real temp_181[15,1];
 parameter Real temp_181[16,1];
 parameter Real temp_181[17,1];
 parameter Real temp_181[18,1];
 parameter Real temp_181[19,1];
 parameter Real temp_181[20,1];
 parameter Real temp_181[21,1];
 parameter Real temp_181[22,1];
 structural (loadResource) parameter String laptop2.modelFileName = "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" "Rectifier harmonic model mat file" /* "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" */;
 structural parameter String laptop2.resourceRetValue = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat" */;
 structural parameter Integer laptop2.matDim[1] = 16 /* 16 */;
 structural parameter Real laptop2.magDataMat[1,1] = 0.9999999999999999 /* 0.9999999999999999 */;
 structural parameter Real laptop2.magDataMat[2,1] = 0.9486974344201337 /* 0.9486974344201337 */;
 structural parameter Real laptop2.magDataMat[3,1] = 0.9221155376813399 /* 0.9221155376813399 */;
 structural parameter Real laptop2.magDataMat[4,1] = 0.8849332521469448 /* 0.8849332521469448 */;
 structural parameter Real laptop2.magDataMat[5,1] = 0.8475867045468796 /* 0.8475867045468796 */;
 structural parameter Real laptop2.magDataMat[6,1] = 0.7944241839808487 /* 0.7944241839808487 */;
 structural parameter Real laptop2.magDataMat[7,1] = 0.7230242274654483 /* 0.7230242274654483 */;
 structural parameter Real laptop2.magDataMat[8,1] = 0.6688914048386135 /* 0.6688914048386135 */;
 structural parameter Real laptop2.magDataMat[9,1] = 0.5939253865608557 /* 0.5939253865608557 */;
 structural parameter Real laptop2.magDataMat[10,1] = 0.5280196623121391 /* 0.5280196623121391 */;
 structural parameter Real laptop2.magDataMat[11,1] = 0.4568186887780485 /* 0.4568186887780485 */;
 structural parameter Real laptop2.magDataMat[12,1] = 0.3861474201640431 /* 0.3861474201640431 */;
 structural parameter Real laptop2.magDataMat[13,1] = 0.3163533253631282 /* 0.3163533253631282 */;
 structural parameter Real laptop2.magDataMat[14,1] = 0.2534864723066213 /* 0.2534864723066213 */;
 structural parameter Real laptop2.magDataMat[15,1] = 0.1920046370077911 /* 0.1920046370077911 */;
 structural parameter Real laptop2.magDataMat[16,1] = 0.1442126307974456 /* 0.1442126307974456 */;
 structural parameter Real laptop2.argDataMat[1,1] = 0.3053419323150846 /* 0.3053419323150846 */;
 structural parameter Real laptop2.argDataMat[2,1] = -2.8182357929499515 /* -2.8182357929499515 */;
 structural parameter Real laptop2.argDataMat[3,1] = 0.5364901833841553 /* 0.5364901833841553 */;
 structural parameter Real laptop2.argDataMat[4,1] = -2.381193752481799 /* -2.381193752481799 */;
 structural parameter Real laptop2.argDataMat[5,1] = 0.9688071004089418 /* 0.9688071004089418 */;
 structural parameter Real laptop2.argDataMat[6,1] = -1.959495555161772 /* -1.959495555161772 */;
 structural parameter Real laptop2.argDataMat[7,1] = 1.4013739855750704 /* 1.4013739855750704 */;
 structural parameter Real laptop2.argDataMat[8,1] = -1.5329775105321843 /* -1.5329775105321843 */;
 structural parameter Real laptop2.argDataMat[9,1] = 1.8276649690040103 /* 1.8276649690040103 */;
 structural parameter Real laptop2.argDataMat[10,1] = -1.1106883983886444 /* -1.1106883983886444 */;
 structural parameter Real laptop2.argDataMat[11,1] = 2.2426384598738585 /* 2.2426384598738585 */;
 structural parameter Real laptop2.argDataMat[12,1] = -0.6809000975704675 /* -0.6809000975704675 */;
 structural parameter Real laptop2.argDataMat[13,1] = 2.648460001811645 /* 2.648460001811645 */;
 structural parameter Real laptop2.argDataMat[14,1] = -0.2835615514742411 /* -0.2835615514742411 */;
 structural parameter Real laptop2.argDataMat[15,1] = 3.0642644296286683 /* 3.0642644296286683 */;
 structural parameter Real laptop2.argDataMat[16,1] = 0.0716470412434909 /* 0.0716470412434909 */;
 constant Real laptop2.argS = -0.3053419323150846 "Phase angle for fundamental apparent power";
 Real laptop2.magScale;
 parameter Real temp_181[23,1];
 parameter Real temp_181[24,1];
 parameter Real temp_181[25,1];
 parameter Real temp_181[26,1];
 parameter Real temp_181[27,1];
 parameter Real temp_181[28,1];
 parameter Real temp_181[29,1];
 parameter Real temp_181[30,1];
 parameter Real temp_181[31,1];
 parameter Real temp_181[32,1];
 parameter Integer temp_182[1];
 parameter Integer temp_182[2];
 parameter Real temp_183[1,1];
 parameter Real temp_183[2,1];
 parameter Real temp_183[3,1];
 parameter Real temp_183[4,1];
 parameter Real temp_183[5,1];
 parameter Real temp_183[6,1];
 parameter Real temp_183[7,1];
 parameter Real temp_183[8,1];
 parameter Real temp_183[9,1];
 Real laptop2.c[1];
 Real laptop2.c[2];
 Real laptop2.c[3];
 Real laptop2.c[4];
 Real laptop2.c[5];
 Real laptop2.c[6];
 Real laptop2.c[7];
 parameter Real led_driver.V_Rect(start = 0) = 24 "Rectifier DC output" /* 24 */;
 parameter Real led_driver.efficiency(start = 1) = 0.9 "Rectifier efficiency (replace with efficiency model or curve)" /* 0.9 */;
 parameter Real led_driver.rectifierModel = 0 "Rectifier model (Other model parameters passed as a record?)" /* 0 */;
 parameter Real temp_183[10,1];
 parameter Real temp_183[11,1];
 parameter Real temp_183[12,1];
 parameter Real temp_183[13,1];
 parameter Real temp_183[14,1];
 parameter Real temp_183[15,1];
 parameter Real temp_183[16,1];
 parameter Real temp_183[17,1];
 parameter Real temp_183[18,1];
 parameter Real temp_183[19,1];
 parameter Real temp_183[20,1];
 parameter Real temp_183[21,1];
 parameter Real temp_183[22,1];
 parameter Real temp_183[23,1];
 parameter Real temp_183[24,1];
 parameter Real temp_183[25,1];
 parameter Real temp_183[26,1];
 Real led_driver.loadBase.i[1].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[1].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[2].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[2].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[3].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[3].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[4].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[4].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[5].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[5].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[6].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[6].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[7].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[7].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.i[8].re(start = 0) "Real part of complex number";
 Real led_driver.loadBase.i[8].im(start = 0) "Imaginary part of complex number";
 Real led_driver.loadBase.omega;
 parameter Real temp_183[27,1];
 Real led_driver.I_mag[1];
 Real led_driver.I_mag[2];
 Real led_driver.I_mag[3];
 Real led_driver.I_mag[4];
 Real led_driver.I_mag[5];
 Real led_driver.I_mag[6];
 Real led_driver.I_mag[7];
 Real led_driver.I_mag[8];
 Real led_driver.I_arg[1];
 Real led_driver.I_arg[2];
 Real led_driver.I_arg[3];
 Real led_driver.I_arg[4];
 Real led_driver.I_arg[5];
 Real led_driver.I_arg[6];
 Real led_driver.I_arg[7];
 Real led_driver.I_arg[8];
 parameter Real temp_183[28,1];
 parameter Real temp_183[29,1];
 parameter Real temp_183[30,1];
 parameter Real temp_183[31,1];
 parameter Real temp_183[32,1];
 parameter Real temp_184[1,1];
 parameter Real temp_184[2,1];
 parameter Real temp_184[3,1];
 parameter Real temp_184[4,1];
 parameter Real temp_184[5,1];
 parameter Real temp_184[6,1];
 parameter Real temp_184[7,1];
 parameter Real temp_184[8,1];
 parameter Real temp_184[9,1];
 parameter Real temp_184[10,1];
 parameter Real temp_184[11,1];
 parameter Real temp_184[12,1];
 parameter Real temp_184[13,1];
 structural (loadResource) parameter String led_driver.modelFileName = "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" "Rectifier harmonic model mat file" /* "HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" */;
 structural parameter String led_driver.resourceRetValue = "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" /* "/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat" */;
 structural parameter Real led_driver.magDataMat[1,1] = 1.0 /* 1.0 */;
 structural parameter Real led_driver.magDataMat[2,1] = 0.890432111870432 /* 0.890432111870432 */;
 structural parameter Real led_driver.magDataMat[3,1] = 0.7418107134668804 /* 0.7418107134668804 */;
 structural parameter Real led_driver.magDataMat[4,1] = 0.567293049298617 /* 0.567293049298617 */;
 structural parameter Real led_driver.magDataMat[5,1] = 0.3936692199400683 /* 0.3936692199400683 */;
 structural parameter Real led_driver.magDataMat[6,1] = 0.2525656583874291 /* 0.2525656583874291 */;
 structural parameter Real led_driver.magDataMat[7,1] = 0.1565031895698116 /* 0.1565031895698116 */;
 structural parameter Real led_driver.magDataMat[8,1] = 0.1085784608235925 /* 0.1085784608235925 */;
 structural parameter Real led_driver.magDataMat[9,1] = 0.1028049066991282 /* 0.1028049066991282 */;
 structural parameter Real led_driver.magDataMat[10,1] = 0.1116701804666674 /* 0.1116701804666674 */;
 structural parameter Real led_driver.magDataMat[11,1] = 0.1074207968075735 /* 0.1074207968075735 */;
 structural parameter Real led_driver.magDataMat[12,1] = 0.0874748765804625 /* 0.0874748765804625 */;
 structural parameter Real led_driver.magDataMat[13,1] = 0.05783641101013 /* 0.05783641101013 */;
 structural parameter Real led_driver.magDataMat[14,1] = 0.0366390283673692 /* 0.0366390283673692 */;
 structural parameter Real led_driver.magDataMat[15,1] = 0.0289014631844665 /* 0.0289014631844665 */;
 structural parameter Real led_driver.magDataMat[16,1] = 0.0275187725558538 /* 0.0275187725558538 */;
 structural parameter Real led_driver.argDataMat[1,1] = 0.3875666016022497 /* 0.3875666016022497 */;
 structural parameter Real led_driver.argDataMat[2,1] = -2.1789648209071406 /* -2.1789648209071406 */;
 structural parameter Real led_driver.argDataMat[3,1] = 1.6302868785533633 /* 1.6302868785533633 */;
 structural parameter Real led_driver.argDataMat[4,1] = -0.7953249928799604 /* -0.7953249928799604 */;
 structural parameter Real led_driver.argDataMat[5,1] = 3.1273318832610917 /* 3.1273318832610917 */;
 structural parameter Real led_driver.argDataMat[6,1] = 0.8908122903345195 /* 0.8908122903345195 */;
 structural parameter Real led_driver.argDataMat[7,1] = -1.1864005972204819 /* -1.1864005972204819 */;
 structural parameter Real led_driver.argDataMat[8,1] = -2.999284764233698 /* -2.999284764233698 */;
 structural parameter Real led_driver.argDataMat[9,1] = 1.4699218316090397 /* 1.4699218316090397 */;
 structural parameter Real led_driver.argDataMat[10,1] = -0.606821589236838 /* -0.606821589236838 */;
 structural parameter Real led_driver.argDataMat[11,1] = -2.844685963688736 /* -2.844685963688736 */;
 structural parameter Real led_driver.argDataMat[12,1] = 1.1601646456077166 /* 1.1601646456077166 */;
 structural parameter Real led_driver.argDataMat[13,1] = -1.0323815181519134 /* -1.0323815181519134 */;
 structural parameter Real led_driver.argDataMat[14,1] = -2.9611753908140344 /* -2.9611753908140344 */;
 structural parameter Real led_driver.argDataMat[15,1] = 1.5581822303336441 /* 1.5581822303336441 */;
 structural parameter Real led_driver.argDataMat[16,1] = -0.353240856878104 /* -0.353240856878104 */;
 constant Real led_driver.argS = -0.3875666016022497 "Phase angle for fundamental apparent power";
 Real led_driver.magScale;
 parameter Real temp_184[14,1];
 parameter Real temp_184[15,1];
 parameter Real temp_184[16,1];
 parameter Real temp_184[17,1];
 parameter Real temp_184[18,1];
 parameter Real temp_184[19,1];
 parameter Real temp_184[20,1];
 parameter Real temp_184[21,1];
 parameter Real temp_184[22,1];
 parameter Real temp_184[23,1];
 parameter Real temp_184[24,1];
 parameter Real temp_184[25,1];
 parameter Real temp_184[26,1];
 parameter Real temp_184[27,1];
 parameter Real temp_184[28,1];
 parameter Real temp_184[29,1];
 parameter Real temp_184[30,1];
 parameter Real temp_184[31,1];
 parameter Real temp_184[32,1];
 parameter Integer temp_185[1];
 parameter Integer temp_185[2];
 Real led_driver.c[1];
 Real led_driver.c[2];
 Real led_driver.c[3];
 Real led_driver.c[4];
 Real led_driver.c[5];
 Real led_driver.c[6];
 Real led_driver.c[7];
 Real ground1.pin.iIm[1];
 Real ground1.pin.iIm[2];
 Real ground1.pin.iIm[3];
 Real ground1.pin.iIm[4];
 Real ground1.pin.iIm[5];
 Real ground1.pin.iIm[6];
 Real ground1.pin.iIm[7];
 Real ground1.pin.iIm[8];
 Real ground1.pin.iRe[1];
 Real ground1.pin.iRe[2];
 Real ground1.pin.iRe[3];
 Real ground1.pin.iRe[4];
 Real ground1.pin.iRe[5];
 Real ground1.pin.iRe[6];
 Real ground1.pin.iRe[7];
 Real ground1.pin.iRe[8];
 constant String r.properties.ComponentType = "Resistor" "Type of the component";
 parameter Real r.r(start = 1) = 1000000.0 "Resistance (ohm)" /* 1000000.0 */;
 parameter Real temp_186[1,1];
 parameter Real temp_186[2,1];
 parameter Real temp_186[3,1];
 parameter Real temp_186[4,1];
 parameter Real temp_186[5,1];
 parameter Real temp_186[6,1];
 parameter Real temp_186[7,1];
 parameter Real temp_186[8,1];
 parameter Real temp_186[9,1];
 parameter Real temp_186[10,1];
 parameter Real temp_186[11,1];
 parameter Real temp_186[12,1];
 parameter Real temp_186[13,1];
 parameter Real temp_186[14,1];
 parameter Real temp_186[15,1];
 parameter Real temp_186[16,1];
 parameter Real temp_186[17,1];
 parameter Real temp_186[18,1];
 parameter Real temp_186[19,1];
 parameter Real temp_186[20,1];
 parameter Real temp_186[21,1];
 parameter Real temp_186[22,1];
 parameter Real temp_186[23,1];
 parameter Real temp_186[24,1];
 parameter Real temp_186[25,1];
 parameter Real temp_186[26,1];
 parameter Real temp_186[27,1];
 parameter Real temp_186[28,1];
 parameter Real temp_186[29,1];
 parameter Real temp_186[30,1];
 parameter Real temp_186[31,1];
 parameter Real temp_186[32,1];
 parameter Real temp_187[1,1];
 parameter Real temp_187[2,1];
 parameter Real temp_187[3,1];
 parameter Real temp_187[4,1];
 Real r.omega;
 constant String led_load.properties.ComponentType = "DC_Load" "Type of the component";
 parameter Real led_load.pwr(start = 1) = 50 "Power (watts)" /* 50 */;
 parameter Real temp_187[5,1];
 constant Modelica.SIunits.ElectricPotential ground2.p.v = 0 "Potential at the pin";
 parameter Real temp_187[6,1];
 parameter Real temp_187[7,1];
 parameter Real laptop_load.pwr(start = 1) = 25 "Power (watts)" /* 25 */;
 parameter Real temp_187[8,1];
 constant String zone_1.properties.ComponentType = "ThermalZone" "Type of the component";
 parameter Real temp_187[9,1];
 parameter Real temp_187[10,1];
 parameter Real temp_187[11,1];
 parameter Real temp_187[12,1];
 parameter Real temp_187[13,1];
 parameter Real temp_187[14,1];
 parameter Real temp_187[15,1];
 parameter Real temp_187[16,1];
 parameter Real temp_187[17,1];
 parameter Real temp_187[18,1];
 parameter Real temp_187[19,1];
 parameter Real temp_187[20,1];
 parameter Real temp_187[21,1];
 parameter Real temp_187[22,1];
 parameter Real temp_187[23,1];
 parameter Real temp_187[24,1];
 parameter Real temp_187[25,1];
 parameter Real temp_187[26,1];
 parameter Real temp_187[27,1];
 parameter Real temp_187[28,1];
 parameter Real temp_187[29,1];
 parameter Real temp_187[30,1];
 parameter Real temp_187[31,1];
 parameter Real temp_187[32,1];
 parameter Integer temp_188[1];
 parameter Integer temp_188[2];
 parameter Real temp_189[1,1];
 parameter Real temp_189[2,1];
 parameter Real temp_189[3,1];
 parameter Real temp_189[4,1];
 parameter Real temp_189[5,1];
 parameter Real temp_189[6,1];
 parameter Real temp_189[7,1];
 parameter Real temp_189[8,1];
 parameter Real temp_189[9,1];
 parameter Real temp_189[10,1];
 parameter Real temp_189[11,1];
 parameter Real temp_189[12,1];
 parameter Real temp_189[13,1];
 parameter Real temp_189[14,1];
 parameter Real temp_189[15,1];
 parameter Real temp_189[16,1];
 parameter Real temp_190[1,1];
 parameter Real temp_190[2,1];
 parameter Real temp_190[3,1];
 parameter Real temp_190[4,1];
 parameter Real temp_190[5,1];
 parameter Real temp_190[6,1];
 parameter Real temp_190[7,1];
 parameter Real temp_190[8,1];
 parameter Real temp_190[9,1];
 parameter Real temp_190[10,1];
 parameter Real temp_190[11,1];
 parameter Real temp_190[12,1];
 parameter Real temp_190[13,1];
 parameter Real temp_190[14,1];
 parameter Real temp_190[15,1];
 parameter Real temp_190[16,1];
 parameter Integer temp_191[1];
 parameter Integer temp_191[2];
 parameter Real temp_192[1,1];
 parameter Real temp_192[2,1];
 parameter Real temp_192[3,1];
 parameter Real temp_192[4,1];
 parameter Real temp_192[5,1];
 parameter Real temp_192[6,1];
 parameter Real temp_192[7,1];
 parameter Real temp_192[8,1];
 parameter Real temp_192[9,1];
 parameter Real temp_192[10,1];
 parameter Real temp_192[11,1];
 parameter Real temp_192[12,1];
 parameter Real temp_192[13,1];
 parameter Real temp_192[14,1];
 parameter Real temp_192[15,1];
 parameter Real temp_192[16,1];
 parameter Real temp_193[1,1];
 parameter Real temp_193[2,1];
 parameter Real temp_193[3,1];
 parameter Real temp_193[4,1];
 parameter Real temp_193[5,1];
 parameter Real temp_193[6,1];
 parameter Real temp_193[7,1];
 parameter Real temp_193[8,1];
 parameter Real temp_193[9,1];
 parameter Real temp_193[10,1];
 parameter Real temp_193[11,1];
 parameter Real temp_193[12,1];
 parameter Real temp_193[13,1];
 parameter Real temp_193[14,1];
 parameter Real temp_193[15,1];
 parameter Real temp_193[16,1];
 parameter Integer systemDef.N "Size of FFT";
 parameter Real test_DY.idealTransformer1.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 parameter Real test_DY.idealTransformer2.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 parameter Real test_DY.idealTransformer3.N "Turns ratio N1:N2 = N:1 (Subject to review!)";
 parameter Modelica.SIunits.ElectricPotential laptop2.vDC.V(start = 1) "Value of constant voltage";
 parameter Modelica.SIunits.ElectricPotential led_driver.vDC.V(start = 1) "Value of constant voltage";
 parameter Real temp_457;
 parameter Real temp_472;
 parameter Real temp_487;
 parameter Real temp_502;
 parameter Real temp_517;
 parameter Real temp_532;
 parameter Real temp_547;
 parameter Real temp_562;
 parameter Real temp_857;
 parameter Real temp_872;
 parameter Real temp_887;
 parameter Real temp_902;
 parameter Real temp_917;
 parameter Real temp_932;
 parameter Real temp_947;
 parameter Real temp_962;
 parameter Real temp_1257;
 parameter Real temp_1272;
 parameter Real temp_1287;
 parameter Real temp_1302;
 parameter Real temp_1317;
 parameter Real temp_1332;
 parameter Real temp_1347;
 parameter Real temp_1362;
 parameter Modelica.SIunits.ElectricCurrent laptop_load.i "Current flowing from pin p to pin n";
 parameter Modelica.SIunits.ElectricCurrent led_load.i "Current flowing from pin p to pin n";
 parameter Real led_driver.loadBase.v[1].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[1].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[2].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[2].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[3].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[3].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[4].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[4].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[5].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[5].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[6].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[6].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[7].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[7].im(start = 0) "Imaginary part of complex number";
 parameter Real led_driver.loadBase.v[8].re(start = 0) "Real part of complex number";
 parameter Real led_driver.loadBase.v[8].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[1].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[1].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[2].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[2].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[3].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[3].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[4].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[4].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[5].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[5].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[6].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[6].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[7].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[7].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.loadBase.v[8].re(start = 0) "Real part of complex number";
 parameter Real laptop2.loadBase.v[8].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[1].re(start = 0) "Real part of complex number";
 parameter Real r.v[1].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[2].re(start = 0) "Real part of complex number";
 parameter Real r.v[2].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[3].re(start = 0) "Real part of complex number";
 parameter Real r.v[3].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[4].re(start = 0) "Real part of complex number";
 parameter Real r.v[4].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[5].re(start = 0) "Real part of complex number";
 parameter Real r.v[5].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[6].re(start = 0) "Real part of complex number";
 parameter Real r.v[6].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[7].re(start = 0) "Real part of complex number";
 parameter Real r.v[7].im(start = 0) "Imaginary part of complex number";
 parameter Real r.v[8].re(start = 0) "Real part of complex number";
 parameter Real r.v[8].im(start = 0) "Imaginary part of complex number";
 parameter Modelica.SIunits.ElectricCurrent ground3.p.i "Current flowing into the pin";
 parameter Real laptop2.P;
 parameter Modelica.SIunits.ElectricCurrent ground2.p.i "Current flowing into the pin";
 parameter Real led_driver.P;
 parameter Real led_driver.V_mag[1];
 parameter Real led_driver.V_arg[1];
 parameter Real led_driver.argAdj[1];
 parameter Real led_driver.argAdj[2];
 parameter Real led_driver.argAdj[3];
 parameter Real led_driver.argAdj[4];
 parameter Real led_driver.argAdj[5];
 parameter Real led_driver.argAdj[6];
 parameter Real led_driver.argAdj[7];
 parameter Real led_driver.V_mag[2];
 parameter Real led_driver.V_arg[2];
 parameter Real led_driver.V_mag[3];
 parameter Real led_driver.V_arg[3];
 parameter Real led_driver.V_mag[4];
 parameter Real led_driver.V_arg[4];
 parameter Real led_driver.V_mag[5];
 parameter Real led_driver.V_arg[5];
 parameter Real led_driver.V_mag[6];
 parameter Real led_driver.V_arg[6];
 parameter Real led_driver.V_mag[7];
 parameter Real led_driver.V_arg[7];
 parameter Real led_driver.V_mag[8];
 parameter Real led_driver.V_arg[8];
 parameter Real laptop2.V_mag[1];
 parameter Real laptop2.V_arg[1];
 parameter Real laptop2.argAdj[1];
 parameter Real laptop2.argAdj[2];
 parameter Real laptop2.argAdj[3];
 parameter Real laptop2.argAdj[4];
 parameter Real laptop2.argAdj[5];
 parameter Real laptop2.argAdj[6];
 parameter Real laptop2.argAdj[7];
 parameter Real laptop2.V_mag[2];
 parameter Real laptop2.V_arg[2];
 parameter Real laptop2.V_mag[3];
 parameter Real laptop2.V_arg[3];
 parameter Real laptop2.V_mag[4];
 parameter Real laptop2.V_arg[4];
 parameter Real laptop2.V_mag[5];
 parameter Real laptop2.V_arg[5];
 parameter Real laptop2.V_mag[6];
 parameter Real laptop2.V_arg[6];
 parameter Real laptop2.V_mag[7];
 parameter Real laptop2.V_arg[7];
 parameter Real laptop2.V_mag[8];
 parameter Real laptop2.V_arg[8];
 parameter Real r.i[1].re(start = 0) "Real part of complex number";
 parameter Real r.vFundAbs;
 parameter Real r.vFundArg;
 parameter Real r.i[1].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[2].re(start = 0) "Real part of complex number";
 parameter Real r.i[2].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[3].re(start = 0) "Real part of complex number";
 parameter Real r.i[3].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[4].re(start = 0) "Real part of complex number";
 parameter Real r.i[4].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[5].re(start = 0) "Real part of complex number";
 parameter Real r.i[5].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[6].re(start = 0) "Real part of complex number";
 parameter Real r.i[6].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[7].re(start = 0) "Real part of complex number";
 parameter Real r.i[7].im(start = 0) "Imaginary part of complex number";
 parameter Real r.i[8].re(start = 0) "Real part of complex number";
 parameter Real r.i[8].im(start = 0) "Imaginary part of complex number";
 parameter Real laptop2.S(start = 1) "Apparent power at fundamental";
 parameter Modelica.Blocks.Interfaces.RealInput zone_2.u;
 parameter Real led_driver.S(start = 1) "Apparent power at fundamental";
 parameter Modelica.Blocks.Interfaces.RealInput zone_1.u;
 parameter Real led_driver.a[1].re "Real part of complex number";
 parameter Real led_driver.a[1].im "Imaginary part of complex number";
 parameter Real led_driver.a[2].re "Real part of complex number";
 parameter Real led_driver.a[2].im "Imaginary part of complex number";
 parameter Real led_driver.a[3].re "Real part of complex number";
 parameter Real led_driver.a[3].im "Imaginary part of complex number";
 parameter Real led_driver.a[4].re "Real part of complex number";
 parameter Real led_driver.a[4].im "Imaginary part of complex number";
 parameter Real led_driver.a[5].re "Real part of complex number";
 parameter Real led_driver.a[5].im "Imaginary part of complex number";
 parameter Real led_driver.a[6].re "Real part of complex number";
 parameter Real led_driver.a[6].im "Imaginary part of complex number";
 parameter Real led_driver.a[7].re "Real part of complex number";
 parameter Real led_driver.a[7].im "Imaginary part of complex number";
 parameter Real laptop2.a[1].re "Real part of complex number";
 parameter Real laptop2.a[1].im "Imaginary part of complex number";
 parameter Real laptop2.a[2].re "Real part of complex number";
 parameter Real laptop2.a[2].im "Imaginary part of complex number";
 parameter Real laptop2.a[3].re "Real part of complex number";
 parameter Real laptop2.a[3].im "Imaginary part of complex number";
 parameter Real laptop2.a[4].re "Real part of complex number";
 parameter Real laptop2.a[4].im "Imaginary part of complex number";
 parameter Real laptop2.a[5].re "Real part of complex number";
 parameter Real laptop2.a[5].im "Imaginary part of complex number";
 parameter Real laptop2.a[6].re "Real part of complex number";
 parameter Real laptop2.a[6].im "Imaginary part of complex number";
 parameter Real laptop2.a[7].re "Real part of complex number";
 parameter Real laptop2.a[7].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[1].re "Real part of complex number";
 parameter Real r.iFundAbs;
 parameter Real r.iFundArg;
 parameter Real test_DY.idealTransformer3.iPrim[1].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[2].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[2].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[3].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[3].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[4].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[4].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[5].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[5].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[6].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[6].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[7].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[7].im "Imaginary part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[8].re "Real part of complex number";
 parameter Real test_DY.idealTransformer3.iPrim[8].im "Imaginary part of complex number";
 parameter Real laptop2.Q(start = 1) "Imaginary power at fundamental";
 parameter Real led_driver.Q(start = 1) "Imaginary power at fundamental";
initial equation
 algorithm
;
 PhA.theta = 0;
 PhB.theta = 0;
 PhC.theta = 0;
parameter equation
 ({temp_179[1], temp_179[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "magV");
 ({{temp_180[1,1]}, {temp_180[2,1]}, {temp_180[3,1]}, {temp_180[4,1]}, {temp_180[5,1]}, {temp_180[6,1]}, {temp_180[7,1]}, {temp_180[8,1]}, {temp_180[9,1]}, {temp_180[10,1]}, {temp_180[11,1]}, {temp_180[12,1]}, {temp_180[13,1]}, {temp_180[14,1]}, {temp_180[15,1]}, {temp_180[16,1]}, {temp_180[17,1]}, {temp_180[18,1]}, {temp_180[19,1]}, {temp_180[20,1]}, {temp_180[21,1]}, {temp_180[22,1]}, {temp_180[23,1]}, {temp_180[24,1]}, {temp_180[25,1]}, {temp_180[26,1]}, {temp_180[27,1]}, {temp_180[28,1]}, {temp_180[29,1]}, {temp_180[30,1]}, {temp_180[31,1]}, {temp_180[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "magV", 32, 1, true);
 ({{temp_181[1,1]}, {temp_181[2,1]}, {temp_181[3,1]}, {temp_181[4,1]}, {temp_181[5,1]}, {temp_181[6,1]}, {temp_181[7,1]}, {temp_181[8,1]}, {temp_181[9,1]}, {temp_181[10,1]}, {temp_181[11,1]}, {temp_181[12,1]}, {temp_181[13,1]}, {temp_181[14,1]}, {temp_181[15,1]}, {temp_181[16,1]}, {temp_181[17,1]}, {temp_181[18,1]}, {temp_181[19,1]}, {temp_181[20,1]}, {temp_181[21,1]}, {temp_181[22,1]}, {temp_181[23,1]}, {temp_181[24,1]}, {temp_181[25,1]}, {temp_181[26,1]}, {temp_181[27,1]}, {temp_181[28,1]}, {temp_181[29,1]}, {temp_181[30,1]}, {temp_181[31,1]}, {temp_181[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_A.mat", "argV", 32, 1, true);
 ({temp_182[1], temp_182[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "magV");
 ({{temp_183[1,1]}, {temp_183[2,1]}, {temp_183[3,1]}, {temp_183[4,1]}, {temp_183[5,1]}, {temp_183[6,1]}, {temp_183[7,1]}, {temp_183[8,1]}, {temp_183[9,1]}, {temp_183[10,1]}, {temp_183[11,1]}, {temp_183[12,1]}, {temp_183[13,1]}, {temp_183[14,1]}, {temp_183[15,1]}, {temp_183[16,1]}, {temp_183[17,1]}, {temp_183[18,1]}, {temp_183[19,1]}, {temp_183[20,1]}, {temp_183[21,1]}, {temp_183[22,1]}, {temp_183[23,1]}, {temp_183[24,1]}, {temp_183[25,1]}, {temp_183[26,1]}, {temp_183[27,1]}, {temp_183[28,1]}, {temp_183[29,1]}, {temp_183[30,1]}, {temp_183[31,1]}, {temp_183[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "magV", 32, 1, true);
 ({{temp_184[1,1]}, {temp_184[2,1]}, {temp_184[3,1]}, {temp_184[4,1]}, {temp_184[5,1]}, {temp_184[6,1]}, {temp_184[7,1]}, {temp_184[8,1]}, {temp_184[9,1]}, {temp_184[10,1]}, {temp_184[11,1]}, {temp_184[12,1]}, {temp_184[13,1]}, {temp_184[14,1]}, {temp_184[15,1]}, {temp_184[16,1]}, {temp_184[17,1]}, {temp_184[18,1]}, {temp_184[19,1]}, {temp_184[20,1]}, {temp_184[21,1]}, {temp_184[22,1]}, {temp_184[23,1]}, {temp_184[24,1]}, {temp_184[25,1]}, {temp_184[26,1]}, {temp_184[27,1]}, {temp_184[28,1]}, {temp_184[29,1]}, {temp_184[30,1]}, {temp_184[31,1]}, {temp_184[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_B.mat", "argV", 32, 1, true);
 ({temp_185[1], temp_185[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "magV");
 ({{temp_186[1,1]}, {temp_186[2,1]}, {temp_186[3,1]}, {temp_186[4,1]}, {temp_186[5,1]}, {temp_186[6,1]}, {temp_186[7,1]}, {temp_186[8,1]}, {temp_186[9,1]}, {temp_186[10,1]}, {temp_186[11,1]}, {temp_186[12,1]}, {temp_186[13,1]}, {temp_186[14,1]}, {temp_186[15,1]}, {temp_186[16,1]}, {temp_186[17,1]}, {temp_186[18,1]}, {temp_186[19,1]}, {temp_186[20,1]}, {temp_186[21,1]}, {temp_186[22,1]}, {temp_186[23,1]}, {temp_186[24,1]}, {temp_186[25,1]}, {temp_186[26,1]}, {temp_186[27,1]}, {temp_186[28,1]}, {temp_186[29,1]}, {temp_186[30,1]}, {temp_186[31,1]}, {temp_186[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "magV", 32, 1, true);
 ({{temp_187[1,1]}, {temp_187[2,1]}, {temp_187[3,1]}, {temp_187[4,1]}, {temp_187[5,1]}, {temp_187[6,1]}, {temp_187[7,1]}, {temp_187[8,1]}, {temp_187[9,1]}, {temp_187[10,1]}, {temp_187[11,1]}, {temp_187[12,1]}, {temp_187[13,1]}, {temp_187[14,1]}, {temp_187[15,1]}, {temp_187[16,1]}, {temp_187[17,1]}, {temp_187[18,1]}, {temp_187[19,1]}, {temp_187[20,1]}, {temp_187[21,1]}, {temp_187[22,1]}, {temp_187[23,1]}, {temp_187[24,1]}, {temp_187[25,1]}, {temp_187[26,1]}, {temp_187[27,1]}, {temp_187[28,1]}, {temp_187[29,1]}, {temp_187[30,1]}, {temp_187[31,1]}, {temp_187[32,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/InputData/Examples/DC_Testbed/hrmsData_volt_prim_confAC_1_C.mat", "argV", 32, 1, true);
 ({temp_188[1], temp_188[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "mag");
 ({{temp_189[1,1]}, {temp_189[2,1]}, {temp_189[3,1]}, {temp_189[4,1]}, {temp_189[5,1]}, {temp_189[6,1]}, {temp_189[7,1]}, {temp_189[8,1]}, {temp_189[9,1]}, {temp_189[10,1]}, {temp_189[11,1]}, {temp_189[12,1]}, {temp_189[13,1]}, {temp_189[14,1]}, {temp_189[15,1]}, {temp_189[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "mag", 16, 1, true);
 ({{temp_190[1,1]}, {temp_190[2,1]}, {temp_190[3,1]}, {temp_190[4,1]}, {temp_190[5,1]}, {temp_190[6,1]}, {temp_190[7,1]}, {temp_190[8,1]}, {temp_190[9,1]}, {temp_190[10,1]}, {temp_190[11,1]}, {temp_190[12,1]}, {temp_190[13,1]}, {temp_190[14,1]}, {temp_190[15,1]}, {temp_190[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_laptop.mat", "arg", 16, 1, true);
 ({temp_191[1], temp_191[2]}) = Modelica.Utilities.Streams.readMatrixSize("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "mag");
 ({{temp_192[1,1]}, {temp_192[2,1]}, {temp_192[3,1]}, {temp_192[4,1]}, {temp_192[5,1]}, {temp_192[6,1]}, {temp_192[7,1]}, {temp_192[8,1]}, {temp_192[9,1]}, {temp_192[10,1]}, {temp_192[11,1]}, {temp_192[12,1]}, {temp_192[13,1]}, {temp_192[14,1]}, {temp_192[15,1]}, {temp_192[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "mag", 16, 1, true);
 ({{temp_193[1,1]}, {temp_193[2,1]}, {temp_193[3,1]}, {temp_193[4,1]}, {temp_193[5,1]}, {temp_193[6,1]}, {temp_193[7,1]}, {temp_193[8,1]}, {temp_193[9,1]}, {temp_193[10,1]}, {temp_193[11,1]}, {temp_193[12,1]}, {temp_193[13,1]}, {temp_193[14,1]}, {temp_193[15,1]}, {temp_193[16,1]}}) = Modelica.Utilities.Streams.readRealMatrix("/media/linuxdev/Documents/Research/DC Design Tool/Workspace/Modelica_HPF/DC-Design/HPF/PowerElectronicsConverters/AC2DC_ConverterModels/hrmMdl_LedDriver.mat", "arg", 16, 1, true);
 systemDef.N = integer(floor(systemDef.fs / systemDef.fFund));
 test_DY.idealTransformer1.N = test_DY.N;
 test_DY.idealTransformer2.N = test_DY.N;
 test_DY.idealTransformer3.N = test_DY.N;
 laptop2.vDC.V = laptop2.V_Rect;
 led_driver.vDC.V = led_driver.V_Rect;
 assert(32 == temp_179[1], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_179[2], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.016839795751254 == temp_180[1,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(491.28990594667346 == temp_180[2,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4635405644252304 == temp_180[3,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.0463774223253857 == temp_180[4,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2331345715632324 == temp_180[5,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6598617132749682 == temp_180[6,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1518565411422124 == temp_180[7,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.9105967094709126 == temp_180[8,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1386948308207945 == temp_180[9,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5251811665424375 == temp_180[10,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0877197456635834 == temp_180[11,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.9262797730195742 == temp_180[12,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1184440683532766 == temp_180[13,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.481422982261235 == temp_180[14,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0544090284431237 == temp_180[15,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1451474507152328 == temp_180[16,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0258533576473125 == temp_180[17,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8951740935763725 == temp_180[18,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.035779586777545 == temp_180[19,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1306259620277833 == temp_180[20,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1030772087446648 == temp_180[21,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0294340894198748 == temp_180[22,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0944957041462652 == temp_180[23,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3245085302933516 == temp_180[24,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0390577054549229 == temp_180[25,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0340450317134204 == temp_180[26,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1097767013072763 == temp_180[27,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0470594525429294 == temp_180[28,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1228566379285578 == temp_180[29,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2164928463914955 == temp_180[30,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0342300079933074 == temp_180[31,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0348258926394183 == temp_180[32,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5707963267948966 == temp_181[1,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0077560921535743 == temp_181[2,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0852246972433012 == temp_181[3,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1337983605530348 == temp_181[4,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.5679607507970243 == temp_181[5,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3371965305429522 == temp_181[6,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0199975129308559 == temp_181[7,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.4142373069782015 == temp_181[8,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6504198353240805 == temp_181[9,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.715056952812912 == temp_181[10,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5102162003333609 == temp_181[11,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.1108023593667606 == temp_181[12,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.262421590602965 == temp_181[13,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.7236257613676265 == temp_181[14,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1515321243259355 == temp_181[15,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.2477226727538361 == temp_181[16,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.7754828141248986 == temp_181[17,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.663073916674371 == temp_181[18,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0318137713960557 == temp_181[19,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2993721368277082 == temp_181[20,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1393837225179722 == temp_181[21,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.391777148898547 == temp_181[22,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5648231015885503 == temp_181[23,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.356629080481576 == temp_181[24,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2671820434478699 == temp_181[25,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.3096759301950636 == temp_181[26,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1696844071201723 == temp_181[27,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0763985737214103 == temp_181[28,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5594469031924515 == temp_181[29,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.2997703855896772 == temp_181[30,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4481215218879092 == temp_181[31,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9517083118310508 == temp_181[32,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(32 == temp_182[1], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_182[2], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.2859962329521695 == temp_183[1,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(492.3540794785275 == temp_183[2,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.208496948122041 == temp_183[3,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1805408036097413 == temp_183[4,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1693263989961228 == temp_183[5,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9106214363027906 == temp_183[6,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1195391546137544 == temp_183[7,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6580541328073826 == temp_183[8,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1269101445860712 == temp_183[9,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3289985189761305 == temp_183[10,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0946942856942096 == temp_183[11,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.0198413017769763 == temp_183[12,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0836821242552161 == temp_183[13,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4924159700118574 == temp_183[14,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0668687465332885 == temp_183[15,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1143872931492812 == temp_183[16,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.076898954125649 == temp_183[17,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9655752395607782 == temp_183[18,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0349853026484666 == temp_183[19,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.226897033607389 == temp_183[20,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.098402544910626 == temp_183[21,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0652517506228442 == temp_183[22,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.08011082638466 == temp_183[23,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1620678510443835 == temp_183[24,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0400637050971903 == temp_183[25,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0561736562706734 == temp_183[26,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1331380625697481 == temp_183[27,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0296172064955882 == temp_183[28,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.094827068391166 == temp_183[29,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2157544231279243 == temp_183[30,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0180623326640486 == temp_183[31,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0434623170353308 == temp_183[32,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5707963267948966 == temp_184[1,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.086840476097504 == temp_184[2,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.5253242170980594 == temp_184[3,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.8115418295128152 == temp_184[4,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.8595229031828926 == temp_184[5,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.8739733224576094 == temp_184[6,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.8607178229132786 == temp_184[7,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.073331261624584 == temp_184[8,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9351292614081848 == temp_184[9,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.1551377562798652 == temp_184[10,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.6094031270218976 == temp_184[11,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.1810033665310717 == temp_184[12,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.8832395214114577 == temp_184[13,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0631873306821448 == temp_184[14,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.133736341444569 == temp_184[15,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9370100120292153 == temp_184[16,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5326277680479188 == temp_184[17,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.4355335492083865 == temp_184[18,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.7058834666324927 == temp_184[19,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.82542395065559 == temp_184[20,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9017038801663326 == temp_184[21,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.6471531147838383 == temp_184[22,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.2664005312148152 == temp_184[23,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.233387596536119 == temp_184[24,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.373672554709982 == temp_184[25,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8816266227593619 == temp_184[26,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.17935104062631 == temp_184[27,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.36233434884658 == temp_184[28,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.275072088990568 == temp_184[29,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9083106039150173 == temp_184[30,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.5000963969047283 == temp_184[31,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.7980169261979593 == temp_184[32,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(32 == temp_185[1], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_185[2], "Error Error at line 41, column 39, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.2719091281810751 == temp_186[1,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(491.7835718293929 == temp_186[2,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3388220554753613 == temp_186[3,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.2560872424865368 == temp_186[4,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0837965376619556 == temp_186[5,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.049579074569396 == temp_186[6,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0479633900797327 == temp_186[7,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.232243217516371 == temp_186[8,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0613261670877852 == temp_186[9,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3085661753673511 == temp_186[10,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0894017215045658 == temp_186[11,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6340384052716668 == temp_186[12,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0360394590491708 == temp_186[13,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6080350350042865 == temp_186[14,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0144866764815914 == temp_186[15,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0616593186094572 == temp_186[16,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0526340810138655 == temp_186[17,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8610409933552359 == temp_186[18,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0223544380084765 == temp_186[19,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1965193072432281 == temp_186[20,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0820234182998287 == temp_186[21,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0475998645936773 == temp_186[22,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1031046389723781 == temp_186[23,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2083187534520808 == temp_186[24,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0208153705589776 == temp_186[25,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0678806501902422 == temp_186[26,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1312213892402629 == temp_186[27,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0355695042062854 == temp_186[28,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1405141155536664 == temp_186[29,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1917926361699222 == temp_186[30,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0151716866761024 == temp_186[31,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0441299911973412 == temp_186[32,1], "Error Error at line 46, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.5707963267948966 == temp_187[1,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.1002127315831656 == temp_187[2,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.626463259293345 == temp_187[3,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.213433315249527 == temp_187[4,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.9305801732284436 == temp_187[5,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.287526674673138 == temp_187[6,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.4365080165904245 == temp_187[7,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.0814742736872363 == temp_187[8,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.384994505036182 == temp_187[9,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.0470875569304956 == temp_187[10,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.631009325075965 == temp_187[11,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.0524997537545646 == temp_187[12,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.1325135086188496 == temp_187[13,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.3307335874922797 == temp_187[14,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0369170525554631 == temp_187[15,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.98109019446484 == temp_187[16,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.5401794110408888 == temp_187[17,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6878100982576986 == temp_187[18,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.8960282037310516 == temp_187[19,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.905818739906312 == temp_187[20,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.8685007111657533 == temp_187[21,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9586173036243184 == temp_187[22,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.359173994218259 == temp_187[23,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-3.0830059554674554 == temp_187[24,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.345527303073058 == temp_187[25,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.6859722132521102 == temp_187[26,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.8371613968199139 == temp_187[27,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.6180299851214954 == temp_187[28,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.891302880891181 == temp_187[29,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.9641683759106843 == temp_187[30,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.108553064967207 == temp_187[31,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.056675653397591 == temp_187[32,1], "Error Error at line 47, column 43, in file '../../../HPF/SinglePhase/Sources/VoltageSrcLoadData.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(16 == temp_188[1], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_188[2], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(0.9999999999999999 == temp_189[1,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9486974344201337 == temp_189[2,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9221155376813399 == temp_189[3,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8849332521469448 == temp_189[4,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8475867045468796 == temp_189[5,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.7944241839808487 == temp_189[6,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.7230242274654483 == temp_189[7,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.6688914048386135 == temp_189[8,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5939253865608557 == temp_189[9,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5280196623121391 == temp_189[10,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.4568186887780485 == temp_189[11,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3861474201640431 == temp_189[12,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3163533253631282 == temp_189[13,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2534864723066213 == temp_189[14,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1920046370077911 == temp_189[15,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1442126307974456 == temp_189[16,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3053419323150846 == temp_190[1,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.8182357929499515 == temp_190[2,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.5364901833841553 == temp_190[3,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.381193752481799 == temp_190[4,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.9688071004089418 == temp_190[5,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.959495555161772 == temp_190[6,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.4013739855750704 == temp_190[7,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.5329775105321843 == temp_190[8,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.8276649690040103 == temp_190[9,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.1106883983886444 == temp_190[10,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.2426384598738585 == temp_190[11,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.6809000975704675 == temp_190[12,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(2.648460001811645 == temp_190[13,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.2835615514742411 == temp_190[14,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.0642644296286683 == temp_190[15,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0716470412434909 == temp_190[16,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(16 == temp_191[1], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1 == temp_191[2], "Error Error at line 50, column 39, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readMatrixSize' did not evaluate to same result as during compilation");
 assert(1.0 == temp_192[1,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.890432111870432 == temp_192[2,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.7418107134668804 == temp_192[3,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.567293049298617 == temp_192[4,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3936692199400683 == temp_192[5,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.2525656583874291 == temp_192[6,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1565031895698116 == temp_192[7,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1085784608235925 == temp_192[8,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1028049066991282 == temp_192[9,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1116701804666674 == temp_192[10,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.1074207968075735 == temp_192[11,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0874748765804625 == temp_192[12,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.05783641101013 == temp_192[13,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0366390283673692 == temp_192[14,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0289014631844665 == temp_192[15,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.0275187725558538 == temp_192[16,1], "Error Error at line 52, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.3875666016022497 == temp_193[1,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.1789648209071406 == temp_193[2,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.6302868785533633 == temp_193[3,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.7953249928799604 == temp_193[4,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(3.1273318832610917 == temp_193[5,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(0.8908122903345195 == temp_193[6,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.1864005972204819 == temp_193[7,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.999284764233698 == temp_193[8,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.4699218316090397 == temp_193[9,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.606821589236838 == temp_193[10,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.844685963688736 == temp_193[11,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.1601646456077166 == temp_193[12,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-1.0323815181519134 == temp_193[13,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-2.9611753908140344 == temp_193[14,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(1.5581822303336441 == temp_193[15,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 assert(-0.353240856878104 == temp_193[16,1], "Error Error at line 53, column 43, in file '../../../HPF/PowerElectronicsConverters/AC2DC_SinglePhase.mo'': Structural parameter external function call 'Modelica.Utilities.Streams.readRealMatrix' did not evaluate to same result as during compilation");
 temp_457 = 1 / test_DY.idealTransformer1.N;
 temp_472 = 1 / test_DY.idealTransformer1.N;
 temp_487 = 1 / test_DY.idealTransformer1.N;
 temp_502 = 1 / test_DY.idealTransformer1.N;
 temp_517 = 1 / test_DY.idealTransformer1.N;
 temp_532 = 1 / test_DY.idealTransformer1.N;
 temp_547 = 1 / test_DY.idealTransformer1.N;
 temp_562 = 1 / test_DY.idealTransformer1.N;
 temp_857 = 1 / test_DY.idealTransformer2.N;
 temp_872 = 1 / test_DY.idealTransformer2.N;
 temp_887 = 1 / test_DY.idealTransformer2.N;
 temp_902 = 1 / test_DY.idealTransformer2.N;
 temp_917 = 1 / test_DY.idealTransformer2.N;
 temp_932 = 1 / test_DY.idealTransformer2.N;
 temp_947 = 1 / test_DY.idealTransformer2.N;
 temp_962 = 1 / test_DY.idealTransformer2.N;
 temp_1257 = 1 / test_DY.idealTransformer3.N;
 temp_1272 = 1 / test_DY.idealTransformer3.N;
 temp_1287 = 1 / test_DY.idealTransformer3.N;
 temp_1302 = 1 / test_DY.idealTransformer3.N;
 temp_1317 = 1 / test_DY.idealTransformer3.N;
 temp_1332 = 1 / test_DY.idealTransformer3.N;
 temp_1347 = 1 / test_DY.idealTransformer3.N;
 temp_1362 = 1 / test_DY.idealTransformer3.N;
 laptop_load.i = laptop_load.pwr / laptop2.vDC.V;
 led_load.i = led_load.pwr / led_driver.vDC.V;
 led_driver.loadBase.v[1].re = temp_457 * -1.561849207604163E-17;
 led_driver.loadBase.v[1].im = temp_457 * 0.2887489239323291;
 led_driver.loadBase.v[2].re = temp_472 * 739.6404508408848;
 led_driver.loadBase.v[2].im = temp_472 * -420.6489084436229;
 led_driver.loadBase.v[3].re = temp_487 * 0.7567109508488981;
 led_driver.loadBase.v[3].im = temp_487 * -0.2063771226672181;
 led_driver.loadBase.v[4].re = temp_502 * 1.7898089975038416;
 led_driver.loadBase.v[4].im = temp_502 * -0.8659344317414527;
 led_driver.loadBase.v[5].re = temp_517 * 0.22603477498920285;
 led_driver.loadBase.v[5].im = temp_517 * -0.2038376613590197;
 led_driver.loadBase.v[6].re = temp_532 * 2.255880705635505;
 led_driver.loadBase.v[6].im = temp_532 * 1.3404914872565734;
 led_driver.loadBase.v[7].re = temp_547 * 0.1883530195357923;
 led_driver.loadBase.v[7].im = temp_547 * -0.034121541733754694;
 led_driver.loadBase.v[8].re = temp_562 * -3.6519308170384717;
 led_driver.loadBase.v[8].im = temp_562 * -1.0886799619162346;
 laptop2.loadBase.v[1].re = temp_857 * 1.648107846440034E-17;
 laptop2.loadBase.v[1].im = temp_857 * 0.26915643720091553;
 laptop2.loadBase.v[2].re = temp_872 * -734.2239485021312;
 laptop2.loadBase.v[2].im = temp_872 * -432.0491823926365;
 laptop2.loadBase.v[3].re = temp_887 * -0.6320002264350746;
 laptop2.loadBase.v[3].im = temp_887 * -0.08105270330183115;
 laptop2.loadBase.v[4].re = temp_902 * -1.318497704304527;
 laptop2.loadBase.v[4].im = temp_902 * -1.2860808268696764;
 laptop2.loadBase.v[5].re = temp_917 * -0.35916722202472995;
 laptop2.loadBase.v[5].im = temp_917 * 0.17253739012620686;
 laptop2.loadBase.v[6].re = temp_932 * -2.444594256525634;
 laptop2.loadBase.v[6].im = temp_932 * -0.30835196860128705;
 laptop2.loadBase.v[7].re = temp_947 * -0.2666809887614493;
 laptop2.loadBase.v[7].im = temp_947 * -0.03009926103130578;
 laptop2.loadBase.v[8].re = temp_962 * 0.6284929120840944;
 laptop2.loadBase.v[8].im = temp_962 * 2.7234088792948845;
 r.v[1].re = temp_1257 * -8.625863883587114E-19;
 r.v[1].im = temp_1257 * -0.5579053611332446;
 r.v[2].re = temp_1272 * -5.416502338753531;
 r.v[2].im = temp_1272 * 852.6980908362593;
 r.v[3].re = temp_1287 * -0.12471072441382336;
 r.v[3].im = temp_1287 * 0.28742982596904926;
 r.v[4].re = temp_1302 * -0.4713112931993148;
 r.v[4].im = temp_1302 * 2.1520152586111294;
 r.v[5].re = temp_1317 * 0.1331324470355271;
 r.v[5].im = temp_1317 * 0.03130027123281286;
 r.v[6].re = temp_1332 * 0.18871355089012887;
 r.v[6].im = temp_1332 * -1.0321395186552864;
 r.v[7].re = temp_1347 * 0.07832796922565702;
 r.v[7].im = temp_1347 * 0.06422080276506047;
 r.v[8].re = temp_1362 * 3.0234379049543776;
 r.v[8].im = temp_1362 * -1.63472891737865;
 ground3.p.i = - laptop_load.i + laptop_load.i;
 laptop2.P = abs(laptop2.efficiency * (laptop2.vDC.V * (- laptop_load.i)));
 ground2.p.i = - led_load.i + led_load.i;
 led_driver.P = abs(led_driver.efficiency * (led_driver.vDC.V * (- led_load.i)));
 led_driver.V_mag[1] = (led_driver.loadBase.v[1].re ^ 2 + led_driver.loadBase.v[1].im ^ 2) ^ 0.5;
 led_driver.V_arg[1] = Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0);
 led_driver.argAdj[1] = -2.1789648209071406 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[2]);
 led_driver.argAdj[2] = 1.6302868785533633 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[3]);
 led_driver.argAdj[3] = -0.7953249928799604 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[4]);
 led_driver.argAdj[4] = 3.1273318832610917 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[5]);
 led_driver.argAdj[5] = 0.8908122903345195 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[6]);
 led_driver.argAdj[6] = -1.1864005972204819 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[7]);
 led_driver.argAdj[7] = -2.999284764233698 + (- Modelica.Math.atan3(led_driver.loadBase.v[1].im, led_driver.loadBase.v[1].re, 0) .* systemDef.hrms[8]);
 led_driver.V_mag[2] = (led_driver.loadBase.v[2].re ^ 2 + led_driver.loadBase.v[2].im ^ 2) ^ 0.5;
 led_driver.V_arg[2] = Modelica.Math.atan3(led_driver.loadBase.v[2].im, led_driver.loadBase.v[2].re, 0);
 led_driver.V_mag[3] = (led_driver.loadBase.v[3].re ^ 2 + led_driver.loadBase.v[3].im ^ 2) ^ 0.5;
 led_driver.V_arg[3] = Modelica.Math.atan3(led_driver.loadBase.v[3].im, led_driver.loadBase.v[3].re, 0);
 led_driver.V_mag[4] = (led_driver.loadBase.v[4].re ^ 2 + led_driver.loadBase.v[4].im ^ 2) ^ 0.5;
 led_driver.V_arg[4] = Modelica.Math.atan3(led_driver.loadBase.v[4].im, led_driver.loadBase.v[4].re, 0);
 led_driver.V_mag[5] = (led_driver.loadBase.v[5].re ^ 2 + led_driver.loadBase.v[5].im ^ 2) ^ 0.5;
 led_driver.V_arg[5] = Modelica.Math.atan3(led_driver.loadBase.v[5].im, led_driver.loadBase.v[5].re, 0);
 led_driver.V_mag[6] = (led_driver.loadBase.v[6].re ^ 2 + led_driver.loadBase.v[6].im ^ 2) ^ 0.5;
 led_driver.V_arg[6] = Modelica.Math.atan3(led_driver.loadBase.v[6].im, led_driver.loadBase.v[6].re, 0);
 led_driver.V_mag[7] = (led_driver.loadBase.v[7].re ^ 2 + led_driver.loadBase.v[7].im ^ 2) ^ 0.5;
 led_driver.V_arg[7] = Modelica.Math.atan3(led_driver.loadBase.v[7].im, led_driver.loadBase.v[7].re, 0);
 led_driver.V_mag[8] = (led_driver.loadBase.v[8].re ^ 2 + led_driver.loadBase.v[8].im ^ 2) ^ 0.5;
 led_driver.V_arg[8] = Modelica.Math.atan3(led_driver.loadBase.v[8].im, led_driver.loadBase.v[8].re, 0);
 laptop2.V_mag[1] = (laptop2.loadBase.v[1].re ^ 2 + laptop2.loadBase.v[1].im ^ 2) ^ 0.5;
 laptop2.V_arg[1] = Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0);
 laptop2.argAdj[1] = -2.8182357929499515 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[2]);
 laptop2.argAdj[2] = 0.5364901833841553 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[3]);
 laptop2.argAdj[3] = -2.381193752481799 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[4]);
 laptop2.argAdj[4] = 0.9688071004089418 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[5]);
 laptop2.argAdj[5] = -1.959495555161772 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[6]);
 laptop2.argAdj[6] = 1.4013739855750704 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[7]);
 laptop2.argAdj[7] = -1.5329775105321843 + (- Modelica.Math.atan3(laptop2.loadBase.v[1].im, laptop2.loadBase.v[1].re, 0) .* systemDef.hrms[8]);
 laptop2.V_mag[2] = (laptop2.loadBase.v[2].re ^ 2 + laptop2.loadBase.v[2].im ^ 2) ^ 0.5;
 laptop2.V_arg[2] = Modelica.Math.atan3(laptop2.loadBase.v[2].im, laptop2.loadBase.v[2].re, 0);
 laptop2.V_mag[3] = (laptop2.loadBase.v[3].re ^ 2 + laptop2.loadBase.v[3].im ^ 2) ^ 0.5;
 laptop2.V_arg[3] = Modelica.Math.atan3(laptop2.loadBase.v[3].im, laptop2.loadBase.v[3].re, 0);
 laptop2.V_mag[4] = (laptop2.loadBase.v[4].re ^ 2 + laptop2.loadBase.v[4].im ^ 2) ^ 0.5;
 laptop2.V_arg[4] = Modelica.Math.atan3(laptop2.loadBase.v[4].im, laptop2.loadBase.v[4].re, 0);
 laptop2.V_mag[5] = (laptop2.loadBase.v[5].re ^ 2 + laptop2.loadBase.v[5].im ^ 2) ^ 0.5;
 laptop2.V_arg[5] = Modelica.Math.atan3(laptop2.loadBase.v[5].im, laptop2.loadBase.v[5].re, 0);
 laptop2.V_mag[6] = (laptop2.loadBase.v[6].re ^ 2 + laptop2.loadBase.v[6].im ^ 2) ^ 0.5;
 laptop2.V_arg[6] = Modelica.Math.atan3(laptop2.loadBase.v[6].im, laptop2.loadBase.v[6].re, 0);
 laptop2.V_mag[7] = (laptop2.loadBase.v[7].re ^ 2 + laptop2.loadBase.v[7].im ^ 2) ^ 0.5;
 laptop2.V_arg[7] = Modelica.Math.atan3(laptop2.loadBase.v[7].im, laptop2.loadBase.v[7].re, 0);
 laptop2.V_mag[8] = (laptop2.loadBase.v[8].re ^ 2 + laptop2.loadBase.v[8].im ^ 2) ^ 0.5;
 laptop2.V_arg[8] = Modelica.Math.atan3(laptop2.loadBase.v[8].im, laptop2.loadBase.v[8].re, 0);
 r.i[1].re = (- r.v[1].re) / (- r.r);
 r.vFundAbs = (r.v[1].re ^ 2 + r.v[1].im ^ 2) ^ 0.5;
 r.vFundArg = Modelica.Math.atan3(r.v[1].im, r.v[1].re, 0);
 r.i[1].im = (- r.v[1].im) / (- r.r);
 r.i[2].re = (- r.v[2].re) / (- r.r);
 r.i[2].im = (- r.v[2].im) / (- r.r);
 r.i[3].re = (- r.v[3].re) / (- r.r);
 r.i[3].im = (- r.v[3].im) / (- r.r);
 r.i[4].re = (- r.v[4].re) / (- r.r);
 r.i[4].im = (- r.v[4].im) / (- r.r);
 r.i[5].re = (- r.v[5].re) / (- r.r);
 r.i[5].im = (- r.v[5].im) / (- r.r);
 r.i[6].re = (- r.v[6].re) / (- r.r);
 r.i[6].im = (- r.v[6].im) / (- r.r);
 r.i[7].re = (- r.v[7].re) / (- r.r);
 r.i[7].im = (- r.v[7].im) / (- r.r);
 r.i[8].re = (- r.v[8].re) / (- r.r);
 r.i[8].im = (- r.v[8].im) / (- r.r);
 laptop2.S = (- laptop2.P) / -0.9537442168683252;
 zone_2.u = laptop2.P * (1 - laptop2.efficiency) / laptop2.efficiency;
 led_driver.S = (- led_driver.P) / -0.9258314704347416;
 zone_1.u = led_driver.P * (1 - led_driver.efficiency) / led_driver.efficiency;
 led_driver.a[1].re = cos(led_driver.argAdj[1]);
 led_driver.a[1].im = sin(led_driver.argAdj[1]);
 led_driver.a[2].re = cos(led_driver.argAdj[2]);
 led_driver.a[2].im = sin(led_driver.argAdj[2]);
 led_driver.a[3].re = cos(led_driver.argAdj[3]);
 led_driver.a[3].im = sin(led_driver.argAdj[3]);
 led_driver.a[4].re = cos(led_driver.argAdj[4]);
 led_driver.a[4].im = sin(led_driver.argAdj[4]);
 led_driver.a[5].re = cos(led_driver.argAdj[5]);
 led_driver.a[5].im = sin(led_driver.argAdj[5]);
 led_driver.a[6].re = cos(led_driver.argAdj[6]);
 led_driver.a[6].im = sin(led_driver.argAdj[6]);
 led_driver.a[7].re = cos(led_driver.argAdj[7]);
 led_driver.a[7].im = sin(led_driver.argAdj[7]);
 laptop2.a[1].re = cos(laptop2.argAdj[1]);
 laptop2.a[1].im = sin(laptop2.argAdj[1]);
 laptop2.a[2].re = cos(laptop2.argAdj[2]);
 laptop2.a[2].im = sin(laptop2.argAdj[2]);
 laptop2.a[3].re = cos(laptop2.argAdj[3]);
 laptop2.a[3].im = sin(laptop2.argAdj[3]);
 laptop2.a[4].re = cos(laptop2.argAdj[4]);
 laptop2.a[4].im = sin(laptop2.argAdj[4]);
 laptop2.a[5].re = cos(laptop2.argAdj[5]);
 laptop2.a[5].im = sin(laptop2.argAdj[5]);
 laptop2.a[6].re = cos(laptop2.argAdj[6]);
 laptop2.a[6].im = sin(laptop2.argAdj[6]);
 laptop2.a[7].re = cos(laptop2.argAdj[7]);
 laptop2.a[7].im = sin(laptop2.argAdj[7]);
 test_DY.idealTransformer3.iPrim[1].re = r.i[1].re / (- test_DY.idealTransformer3.N);
 r.iFundAbs = (r.i[1].re ^ 2 + r.i[1].im ^ 2) ^ 0.5;
 r.iFundArg = Modelica.Math.atan3(r.i[1].im, r.i[1].re, 0);
 test_DY.idealTransformer3.iPrim[1].im = r.i[1].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[2].re = r.i[2].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[2].im = r.i[2].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[3].re = r.i[3].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[3].im = r.i[3].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[4].re = r.i[4].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[4].im = r.i[4].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[5].re = r.i[5].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[5].im = r.i[5].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[6].re = r.i[6].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[6].im = r.i[6].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[7].re = r.i[7].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[7].im = r.i[7].im / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[8].re = r.i[8].re / (- test_DY.idealTransformer3.N);
 test_DY.idealTransformer3.iPrim[8].im = r.i[8].im / (- test_DY.idealTransformer3.N);
 laptop2.Q = laptop2.S * -0.3006193087448392;
 led_driver.Q = led_driver.S * -0.37793661949147545;
algorithm
equation
 der(PhA.theta) = 6.283185307179586 * systemDef.fFund;
 PhA.omega = der(PhA.theta);
 der(PhB.theta) = 6.283185307179586 * systemDef.fFund;
 PhB.omega = der(PhB.theta);
 der(PhC.theta) = 6.283185307179586 * systemDef.fFund;
 PhC.omega = der(PhC.theta);
 - led_driver.loadBase.i[1].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].re;
 - led_driver.loadBase.i[1].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[1].im;
 - led_driver.loadBase.i[2].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].re;
 - led_driver.loadBase.i[2].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[2].im;
 - led_driver.loadBase.i[3].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].re;
 - led_driver.loadBase.i[3].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[3].im;
 - led_driver.loadBase.i[4].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].re;
 - led_driver.loadBase.i[4].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[4].im;
 - led_driver.loadBase.i[5].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].re;
 - led_driver.loadBase.i[5].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[5].im;
 - led_driver.loadBase.i[6].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].re;
 - led_driver.loadBase.i[6].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[6].im;
 - led_driver.loadBase.i[7].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].re;
 - led_driver.loadBase.i[7].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[7].im;
 - led_driver.loadBase.i[8].re = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].re;
 - led_driver.loadBase.i[8].im = test_DY.idealTransformer1.N * test_DY.idealTransformer1.iPrim[8].im;
 - laptop2.loadBase.i[1].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].re;
 - laptop2.loadBase.i[1].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[1].im;
 - laptop2.loadBase.i[2].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].re;
 - laptop2.loadBase.i[2].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[2].im;
 - laptop2.loadBase.i[3].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].re;
 - laptop2.loadBase.i[3].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[3].im;
 - laptop2.loadBase.i[4].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].re;
 - laptop2.loadBase.i[4].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[4].im;
 - laptop2.loadBase.i[5].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].re;
 - laptop2.loadBase.i[5].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[5].im;
 - laptop2.loadBase.i[6].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].re;
 - laptop2.loadBase.i[6].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[6].im;
 - laptop2.loadBase.i[7].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].re;
 - laptop2.loadBase.i[7].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[7].im;
 - laptop2.loadBase.i[8].re = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].re;
 - laptop2.loadBase.i[8].im = test_DY.idealTransformer2.N * test_DY.idealTransformer2.iPrim[8].im;
 laptop2.P = laptop2.loadBase.v[1].re * laptop2.loadBase.i[1].re - laptop2.loadBase.v[1].im * (- laptop2.loadBase.i[1].im);
 laptop2.Q = laptop2.loadBase.v[1].re * (- laptop2.loadBase.i[1].im) + laptop2.loadBase.v[1].im * laptop2.loadBase.i[1].re;
 laptop2.loadBase.i[2].re = laptop2.c[1] * laptop2.a[1].re;
 laptop2.loadBase.i[2].im = laptop2.c[1] * laptop2.a[1].im;
 laptop2.loadBase.i[3].re = laptop2.c[2] * laptop2.a[2].re;
 laptop2.loadBase.i[3].im = laptop2.c[2] * laptop2.a[2].im;
 laptop2.loadBase.i[4].re = laptop2.c[3] * laptop2.a[3].re;
 laptop2.loadBase.i[4].im = laptop2.c[3] * laptop2.a[3].im;
 laptop2.loadBase.i[5].re = laptop2.c[4] * laptop2.a[4].re;
 laptop2.loadBase.i[5].im = laptop2.c[4] * laptop2.a[4].im;
 laptop2.loadBase.i[6].re = laptop2.c[5] * laptop2.a[5].re;
 laptop2.loadBase.i[6].im = laptop2.c[5] * laptop2.a[5].im;
 laptop2.loadBase.i[7].re = laptop2.c[6] * laptop2.a[6].re;
 laptop2.loadBase.i[7].im = laptop2.c[6] * laptop2.a[6].im;
 laptop2.loadBase.i[8].re = laptop2.c[7] * laptop2.a[7].re;
 laptop2.loadBase.i[8].im = laptop2.c[7] * laptop2.a[7].im;
algorithm
equation
 laptop2.loadBase.omega = der(PhA.theta);
 led_driver.P = led_driver.loadBase.v[1].re * led_driver.loadBase.i[1].re - led_driver.loadBase.v[1].im * (- led_driver.loadBase.i[1].im);
 led_driver.Q = led_driver.loadBase.v[1].re * (- led_driver.loadBase.i[1].im) + led_driver.loadBase.v[1].im * led_driver.loadBase.i[1].re;
 led_driver.loadBase.i[2].re = led_driver.c[1] * led_driver.a[1].re;
 led_driver.loadBase.i[2].im = led_driver.c[1] * led_driver.a[1].im;
 led_driver.loadBase.i[3].re = led_driver.c[2] * led_driver.a[2].re;
 led_driver.loadBase.i[3].im = led_driver.c[2] * led_driver.a[2].im;
 led_driver.loadBase.i[4].re = led_driver.c[3] * led_driver.a[3].re;
 led_driver.loadBase.i[4].im = led_driver.c[3] * led_driver.a[3].im;
 led_driver.loadBase.i[5].re = led_driver.c[4] * led_driver.a[4].re;
 led_driver.loadBase.i[5].im = led_driver.c[4] * led_driver.a[4].im;
 led_driver.loadBase.i[6].re = led_driver.c[5] * led_driver.a[5].re;
 led_driver.loadBase.i[6].im = led_driver.c[5] * led_driver.a[5].im;
 led_driver.loadBase.i[7].re = led_driver.c[6] * led_driver.a[6].re;
 led_driver.loadBase.i[7].im = led_driver.c[6] * led_driver.a[6].im;
 led_driver.loadBase.i[8].re = led_driver.c[7] * led_driver.a[7].re;
 led_driver.loadBase.i[8].im = led_driver.c[7] * led_driver.a[7].im;
algorithm
equation
 led_driver.loadBase.omega = der(PhA.theta);
 r.omega = der(PhA.theta);
 - PhA.i[1].im + (- PhB.i[1].im) + (- PhC.i[1].im) + ground.pin.iIm[1] = 0;
 - PhA.i[2].im + (- PhB.i[2].im) + (- PhC.i[2].im) + ground.pin.iIm[2] = 0;
 - PhA.i[3].im + (- PhB.i[3].im) + (- PhC.i[3].im) + ground.pin.iIm[3] = 0;
 - PhA.i[4].im + (- PhB.i[4].im) + (- PhC.i[4].im) + ground.pin.iIm[4] = 0;
 - PhA.i[5].im + (- PhB.i[5].im) + (- PhC.i[5].im) + ground.pin.iIm[5] = 0;
 - PhA.i[6].im + (- PhB.i[6].im) + (- PhC.i[6].im) + ground.pin.iIm[6] = 0;
 - PhA.i[7].im + (- PhB.i[7].im) + (- PhC.i[7].im) + ground.pin.iIm[7] = 0;
 - PhA.i[8].im + (- PhB.i[8].im) + (- PhC.i[8].im) + ground.pin.iIm[8] = 0;
 - PhA.i[1].re + (- PhB.i[1].re) + (- PhC.i[1].re) + ground.pin.iRe[1] = 0;
 - PhA.i[2].re + (- PhB.i[2].re) + (- PhC.i[2].re) + ground.pin.iRe[2] = 0;
 - PhA.i[3].re + (- PhB.i[3].re) + (- PhC.i[3].re) + ground.pin.iRe[3] = 0;
 - PhA.i[4].re + (- PhB.i[4].re) + (- PhC.i[4].re) + ground.pin.iRe[4] = 0;
 - PhA.i[5].re + (- PhB.i[5].re) + (- PhC.i[5].re) + ground.pin.iRe[5] = 0;
 - PhA.i[6].re + (- PhB.i[6].re) + (- PhC.i[6].re) + ground.pin.iRe[6] = 0;
 - PhA.i[7].re + (- PhB.i[7].re) + (- PhC.i[7].re) + ground.pin.iRe[7] = 0;
 - PhA.i[8].re + (- PhB.i[8].re) + (- PhC.i[8].re) + ground.pin.iRe[8] = 0;
 ground1.pin.iIm[1] + (- laptop2.loadBase.i[1].im) + (- led_driver.loadBase.i[1].im) + (- r.i[1].im) + test_DY.hPin_N.iIm[1] = 0;
 ground1.pin.iIm[2] + (- laptop2.loadBase.i[2].im) + (- led_driver.loadBase.i[2].im) + (- r.i[2].im) + test_DY.hPin_N.iIm[2] = 0;
 ground1.pin.iIm[3] + (- laptop2.loadBase.i[3].im) + (- led_driver.loadBase.i[3].im) + (- r.i[3].im) + test_DY.hPin_N.iIm[3] = 0;
 ground1.pin.iIm[4] + (- laptop2.loadBase.i[4].im) + (- led_driver.loadBase.i[4].im) + (- r.i[4].im) + test_DY.hPin_N.iIm[4] = 0;
 ground1.pin.iIm[5] + (- laptop2.loadBase.i[5].im) + (- led_driver.loadBase.i[5].im) + (- r.i[5].im) + test_DY.hPin_N.iIm[5] = 0;
 ground1.pin.iIm[6] + (- laptop2.loadBase.i[6].im) + (- led_driver.loadBase.i[6].im) + (- r.i[6].im) + test_DY.hPin_N.iIm[6] = 0;
 ground1.pin.iIm[7] + (- laptop2.loadBase.i[7].im) + (- led_driver.loadBase.i[7].im) + (- r.i[7].im) + test_DY.hPin_N.iIm[7] = 0;
 ground1.pin.iIm[8] + (- laptop2.loadBase.i[8].im) + (- led_driver.loadBase.i[8].im) + (- r.i[8].im) + test_DY.hPin_N.iIm[8] = 0;
 ground1.pin.iRe[1] + (- laptop2.loadBase.i[1].re) + (- led_driver.loadBase.i[1].re) + (- r.i[1].re) + test_DY.hPin_N.iRe[1] = 0;
 ground1.pin.iRe[2] + (- laptop2.loadBase.i[2].re) + (- led_driver.loadBase.i[2].re) + (- r.i[2].re) + test_DY.hPin_N.iRe[2] = 0;
 ground1.pin.iRe[3] + (- laptop2.loadBase.i[3].re) + (- led_driver.loadBase.i[3].re) + (- r.i[3].re) + test_DY.hPin_N.iRe[3] = 0;
 ground1.pin.iRe[4] + (- laptop2.loadBase.i[4].re) + (- led_driver.loadBase.i[4].re) + (- r.i[4].re) + test_DY.hPin_N.iRe[4] = 0;
 ground1.pin.iRe[5] + (- laptop2.loadBase.i[5].re) + (- led_driver.loadBase.i[5].re) + (- r.i[5].re) + test_DY.hPin_N.iRe[5] = 0;
 ground1.pin.iRe[6] + (- laptop2.loadBase.i[6].re) + (- led_driver.loadBase.i[6].re) + (- r.i[6].re) + test_DY.hPin_N.iRe[6] = 0;
 ground1.pin.iRe[7] + (- laptop2.loadBase.i[7].re) + (- led_driver.loadBase.i[7].re) + (- r.i[7].re) + test_DY.hPin_N.iRe[7] = 0;
 ground1.pin.iRe[8] + (- laptop2.loadBase.i[8].re) + (- led_driver.loadBase.i[8].re) + (- r.i[8].re) + test_DY.hPin_N.iRe[8] = 0;
 test_DY.idealTransformer1.iPrim[1].im + (- test_DY.idealTransformer2.iPrim[1].im) + PhA.i[1].im = 0;
 test_DY.idealTransformer1.iPrim[2].im + (- test_DY.idealTransformer2.iPrim[2].im) + PhA.i[2].im = 0;
 test_DY.idealTransformer1.iPrim[3].im + (- test_DY.idealTransformer2.iPrim[3].im) + PhA.i[3].im = 0;
 test_DY.idealTransformer1.iPrim[4].im + (- test_DY.idealTransformer2.iPrim[4].im) + PhA.i[4].im = 0;
 test_DY.idealTransformer1.iPrim[5].im + (- test_DY.idealTransformer2.iPrim[5].im) + PhA.i[5].im = 0;
 test_DY.idealTransformer1.iPrim[6].im + (- test_DY.idealTransformer2.iPrim[6].im) + PhA.i[6].im = 0;
 test_DY.idealTransformer1.iPrim[7].im + (- test_DY.idealTransformer2.iPrim[7].im) + PhA.i[7].im = 0;
 test_DY.idealTransformer1.iPrim[8].im + (- test_DY.idealTransformer2.iPrim[8].im) + PhA.i[8].im = 0;
 test_DY.idealTransformer1.iPrim[1].re + (- test_DY.idealTransformer2.iPrim[1].re) + PhA.i[1].re = 0;
 test_DY.idealTransformer1.iPrim[2].re + (- test_DY.idealTransformer2.iPrim[2].re) + PhA.i[2].re = 0;
 test_DY.idealTransformer1.iPrim[3].re + (- test_DY.idealTransformer2.iPrim[3].re) + PhA.i[3].re = 0;
 test_DY.idealTransformer1.iPrim[4].re + (- test_DY.idealTransformer2.iPrim[4].re) + PhA.i[4].re = 0;
 test_DY.idealTransformer1.iPrim[5].re + (- test_DY.idealTransformer2.iPrim[5].re) + PhA.i[5].re = 0;
 test_DY.idealTransformer1.iPrim[6].re + (- test_DY.idealTransformer2.iPrim[6].re) + PhA.i[6].re = 0;
 test_DY.idealTransformer1.iPrim[7].re + (- test_DY.idealTransformer2.iPrim[7].re) + PhA.i[7].re = 0;
 test_DY.idealTransformer1.iPrim[8].re + (- test_DY.idealTransformer2.iPrim[8].re) + PhA.i[8].re = 0;
 - test_DY.idealTransformer1.iPrim[1].im + test_DY.idealTransformer3.iPrim[1].im + PhC.i[1].im = 0;
 - test_DY.idealTransformer1.iPrim[2].im + test_DY.idealTransformer3.iPrim[2].im + PhC.i[2].im = 0;
 - test_DY.idealTransformer1.iPrim[3].im + test_DY.idealTransformer3.iPrim[3].im + PhC.i[3].im = 0;
 - test_DY.idealTransformer1.iPrim[4].im + test_DY.idealTransformer3.iPrim[4].im + PhC.i[4].im = 0;
 - test_DY.idealTransformer1.iPrim[5].im + test_DY.idealTransformer3.iPrim[5].im + PhC.i[5].im = 0;
 - test_DY.idealTransformer1.iPrim[6].im + test_DY.idealTransformer3.iPrim[6].im + PhC.i[6].im = 0;
 - test_DY.idealTransformer1.iPrim[7].im + test_DY.idealTransformer3.iPrim[7].im + PhC.i[7].im = 0;
 - test_DY.idealTransformer1.iPrim[8].im + test_DY.idealTransformer3.iPrim[8].im + PhC.i[8].im = 0;
 - test_DY.idealTransformer1.iPrim[1].re + test_DY.idealTransformer3.iPrim[1].re + PhC.i[1].re = 0;
 - test_DY.idealTransformer1.iPrim[2].re + test_DY.idealTransformer3.iPrim[2].re + PhC.i[2].re = 0;
 - test_DY.idealTransformer1.iPrim[3].re + test_DY.idealTransformer3.iPrim[3].re + PhC.i[3].re = 0;
 - test_DY.idealTransformer1.iPrim[4].re + test_DY.idealTransformer3.iPrim[4].re + PhC.i[4].re = 0;
 - test_DY.idealTransformer1.iPrim[5].re + test_DY.idealTransformer3.iPrim[5].re + PhC.i[5].re = 0;
 - test_DY.idealTransformer1.iPrim[6].re + test_DY.idealTransformer3.iPrim[6].re + PhC.i[6].re = 0;
 - test_DY.idealTransformer1.iPrim[7].re + test_DY.idealTransformer3.iPrim[7].re + PhC.i[7].re = 0;
 - test_DY.idealTransformer1.iPrim[8].re + test_DY.idealTransformer3.iPrim[8].re + PhC.i[8].re = 0;
 test_DY.idealTransformer2.iPrim[1].im + (- test_DY.idealTransformer3.iPrim[1].im) + PhB.i[1].im = 0;
 test_DY.idealTransformer2.iPrim[2].im + (- test_DY.idealTransformer3.iPrim[2].im) + PhB.i[2].im = 0;
 test_DY.idealTransformer2.iPrim[3].im + (- test_DY.idealTransformer3.iPrim[3].im) + PhB.i[3].im = 0;
 test_DY.idealTransformer2.iPrim[4].im + (- test_DY.idealTransformer3.iPrim[4].im) + PhB.i[4].im = 0;
 test_DY.idealTransformer2.iPrim[5].im + (- test_DY.idealTransformer3.iPrim[5].im) + PhB.i[5].im = 0;
 test_DY.idealTransformer2.iPrim[6].im + (- test_DY.idealTransformer3.iPrim[6].im) + PhB.i[6].im = 0;
 test_DY.idealTransformer2.iPrim[7].im + (- test_DY.idealTransformer3.iPrim[7].im) + PhB.i[7].im = 0;
 test_DY.idealTransformer2.iPrim[8].im + (- test_DY.idealTransformer3.iPrim[8].im) + PhB.i[8].im = 0;
 test_DY.idealTransformer2.iPrim[1].re + (- test_DY.idealTransformer3.iPrim[1].re) + PhB.i[1].re = 0;
 test_DY.idealTransformer2.iPrim[2].re + (- test_DY.idealTransformer3.iPrim[2].re) + PhB.i[2].re = 0;
 test_DY.idealTransformer2.iPrim[3].re + (- test_DY.idealTransformer3.iPrim[3].re) + PhB.i[3].re = 0;
 test_DY.idealTransformer2.iPrim[4].re + (- test_DY.idealTransformer3.iPrim[4].re) + PhB.i[4].re = 0;
 test_DY.idealTransformer2.iPrim[5].re + (- test_DY.idealTransformer3.iPrim[5].re) + PhB.i[5].re = 0;
 test_DY.idealTransformer2.iPrim[6].re + (- test_DY.idealTransformer3.iPrim[6].re) + PhB.i[6].re = 0;
 test_DY.idealTransformer2.iPrim[7].re + (- test_DY.idealTransformer3.iPrim[7].re) + PhB.i[7].re = 0;
 test_DY.idealTransformer2.iPrim[8].re + (- test_DY.idealTransformer3.iPrim[8].re) + PhB.i[8].re = 0;
 0 = ground1.pin.iIm[1];
 0 = ground1.pin.iIm[2];
 0 = ground1.pin.iIm[3];
 0 = ground1.pin.iIm[4];
 0 = ground1.pin.iIm[5];
 0 = ground1.pin.iIm[6];
 0 = ground1.pin.iIm[7];
 0 = ground1.pin.iIm[8];
 0 = ground1.pin.iRe[1];
 0 = ground1.pin.iRe[2];
 0 = ground1.pin.iRe[3];
 0 = ground1.pin.iRe[4];
 0 = ground1.pin.iRe[5];
 0 = ground1.pin.iRe[6];
 0 = ground1.pin.iRe[7];
 0 = ground1.pin.iRe[8];
 HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhB.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint(HPF.Types.Reference(PhC.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.r.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint(HPF.Types.Reference(PhA.theta), HPF.Types.Reference(PhA.theta));
 laptop2.I_mag[1] = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5;
 laptop2.I_mag[2] = (laptop2.loadBase.i[2].re ^ 2 + laptop2.loadBase.i[2].im ^ 2) ^ 0.5;
 laptop2.I_mag[3] = (laptop2.loadBase.i[3].re ^ 2 + laptop2.loadBase.i[3].im ^ 2) ^ 0.5;
 laptop2.I_mag[4] = (laptop2.loadBase.i[4].re ^ 2 + laptop2.loadBase.i[4].im ^ 2) ^ 0.5;
 laptop2.I_mag[5] = (laptop2.loadBase.i[5].re ^ 2 + laptop2.loadBase.i[5].im ^ 2) ^ 0.5;
 laptop2.I_mag[6] = (laptop2.loadBase.i[6].re ^ 2 + laptop2.loadBase.i[6].im ^ 2) ^ 0.5;
 laptop2.I_mag[7] = (laptop2.loadBase.i[7].re ^ 2 + laptop2.loadBase.i[7].im ^ 2) ^ 0.5;
 laptop2.I_mag[8] = (laptop2.loadBase.i[8].re ^ 2 + laptop2.loadBase.i[8].im ^ 2) ^ 0.5;
 laptop2.I_arg[1] = Modelica.Math.atan3(laptop2.loadBase.i[1].im, laptop2.loadBase.i[1].re, 0);
 laptop2.I_arg[2] = Modelica.Math.atan3(laptop2.loadBase.i[2].im, laptop2.loadBase.i[2].re, 0);
 laptop2.I_arg[3] = Modelica.Math.atan3(laptop2.loadBase.i[3].im, laptop2.loadBase.i[3].re, 0);
 laptop2.I_arg[4] = Modelica.Math.atan3(laptop2.loadBase.i[4].im, laptop2.loadBase.i[4].re, 0);
 laptop2.I_arg[5] = Modelica.Math.atan3(laptop2.loadBase.i[5].im, laptop2.loadBase.i[5].re, 0);
 laptop2.I_arg[6] = Modelica.Math.atan3(laptop2.loadBase.i[6].im, laptop2.loadBase.i[6].re, 0);
 laptop2.I_arg[7] = Modelica.Math.atan3(laptop2.loadBase.i[7].im, laptop2.loadBase.i[7].re, 0);
 laptop2.I_arg[8] = Modelica.Math.atan3(laptop2.loadBase.i[8].im, laptop2.loadBase.i[8].re, 0);
 laptop2.magScale = (laptop2.loadBase.i[1].re ^ 2 + laptop2.loadBase.i[1].im ^ 2) ^ 0.5;
 laptop2.c[1] = laptop2.magScale * 0.9486974344201337;
 laptop2.c[2] = laptop2.magScale * 0.9221155376813399;
 laptop2.c[3] = laptop2.magScale * 0.8849332521469448;
 laptop2.c[4] = laptop2.magScale * 0.8475867045468796;
 laptop2.c[5] = laptop2.magScale * 0.7944241839808487;
 laptop2.c[6] = laptop2.magScale * 0.7230242274654483;
 laptop2.c[7] = laptop2.magScale * 0.6688914048386135;
 led_driver.I_mag[1] = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5;
 led_driver.I_mag[2] = (led_driver.loadBase.i[2].re ^ 2 + led_driver.loadBase.i[2].im ^ 2) ^ 0.5;
 led_driver.I_mag[3] = (led_driver.loadBase.i[3].re ^ 2 + led_driver.loadBase.i[3].im ^ 2) ^ 0.5;
 led_driver.I_mag[4] = (led_driver.loadBase.i[4].re ^ 2 + led_driver.loadBase.i[4].im ^ 2) ^ 0.5;
 led_driver.I_mag[5] = (led_driver.loadBase.i[5].re ^ 2 + led_driver.loadBase.i[5].im ^ 2) ^ 0.5;
 led_driver.I_mag[6] = (led_driver.loadBase.i[6].re ^ 2 + led_driver.loadBase.i[6].im ^ 2) ^ 0.5;
 led_driver.I_mag[7] = (led_driver.loadBase.i[7].re ^ 2 + led_driver.loadBase.i[7].im ^ 2) ^ 0.5;
 led_driver.I_mag[8] = (led_driver.loadBase.i[8].re ^ 2 + led_driver.loadBase.i[8].im ^ 2) ^ 0.5;
 led_driver.I_arg[1] = Modelica.Math.atan3(led_driver.loadBase.i[1].im, led_driver.loadBase.i[1].re, 0);
 led_driver.I_arg[2] = Modelica.Math.atan3(led_driver.loadBase.i[2].im, led_driver.loadBase.i[2].re, 0);
 led_driver.I_arg[3] = Modelica.Math.atan3(led_driver.loadBase.i[3].im, led_driver.loadBase.i[3].re, 0);
 led_driver.I_arg[4] = Modelica.Math.atan3(led_driver.loadBase.i[4].im, led_driver.loadBase.i[4].re, 0);
 led_driver.I_arg[5] = Modelica.Math.atan3(led_driver.loadBase.i[5].im, led_driver.loadBase.i[5].re, 0);
 led_driver.I_arg[6] = Modelica.Math.atan3(led_driver.loadBase.i[6].im, led_driver.loadBase.i[6].re, 0);
 led_driver.I_arg[7] = Modelica.Math.atan3(led_driver.loadBase.i[7].im, led_driver.loadBase.i[7].re, 0);
 led_driver.I_arg[8] = Modelica.Math.atan3(led_driver.loadBase.i[8].im, led_driver.loadBase.i[8].re, 0);
 led_driver.magScale = (led_driver.loadBase.i[1].re ^ 2 + led_driver.loadBase.i[1].im ^ 2) ^ 0.5;
 led_driver.c[1] = led_driver.magScale * 0.890432111870432;
 led_driver.c[2] = led_driver.magScale * 0.7418107134668804;
 led_driver.c[3] = led_driver.magScale * 0.567293049298617;
 led_driver.c[4] = led_driver.magScale * 0.3936692199400683;
 led_driver.c[5] = led_driver.magScale * 0.2525656583874291;
 led_driver.c[6] = led_driver.magScale * 0.1565031895698116;
 led_driver.c[7] = led_driver.magScale * 0.1085784608235925;

public
 function Modelica.Utilities.Streams.readMatrixSize
  input String fileName;
  input String matrixName;
  output Integer[:] dim;
 algorithm
  init dim as Integer[2];
  external "C" ModelicaIO_readMatrixSizes(fileName, matrixName, dim);
  return;
 end Modelica.Utilities.Streams.readMatrixSize;

 function Modelica.Utilities.Streams.readRealMatrix
  input String fileName;
  input String matrixName;
  input Integer nrow;
  input Integer ncol;
  input Boolean verboseRead;
  output Real[:,:] matrix;
 algorithm
  init matrix as Real[nrow, ncol];
  external "C" ModelicaIO_readRealMatrix(fileName, matrixName, matrix, size(matrix, 1), size(matrix, 2), verboseRead);
  return;
 end Modelica.Utilities.Streams.readRealMatrix;

 function Modelica.Math.atan3
  input Real u1;
  input Real u2;
  input Real y0;
  output Real y;
  Real w;
 algorithm
  w := atan2(u1, u2);
  if y0 == 0 then
   y := w;
  else
   y := w + 6.283185307179586 * integer((3.141592653589793 + y0 - w) / 6.283185307179586);
  end if;
  return;
 end Modelica.Math.atan3;

 function HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer2.pinN_Sec.reference.equalityConstraint;

 function HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Sec.reference.equalityConstraint;

 function HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhB.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhC.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.test_DY.idealTransformer3.pinN_Prim.reference.equalityConstraint;

 function HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhB.pin_p.reference.equalityConstraint;

 function HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.PhC.pin_p.reference.equalityConstraint;

 function HPF.Examples.Demo.r.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.r.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.laptop2.loadBase.pin_n.reference.equalityConstraint;

 function HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint
  input HPF.Types.Reference reference1;
  input HPF.Types.Reference reference2;
  output Real[:] residue;
 algorithm
  init residue as Real[0];
  assert(abs(reference1.theta - reference2.theta) < 1.0E-6 * 2 * 3.141592653589793, "Reference angles should be equal!");
  return;
 end HPF.Examples.Demo.led_driver.loadBase.pin_n.reference.equalityConstraint;

 record HPF.Types.Reference
  Modelica.SIunits.Angle theta;
 end HPF.Types.Reference;

 type Modelica.SIunits.Angle = Real(final quantity = "Angle",final unit = "rad",displayUnit = "deg");
 type Modelica.SIunits.ElectricPotential = Real(final quantity = "ElectricPotential",final unit = "V");
 type Modelica.SIunits.ElectricCurrent = Real(final quantity = "ElectricCurrent",final unit = "A");
 type Modelica.Blocks.Interfaces.RealOutput = Real;
 type Modelica.Blocks.Interfaces.RealInput = Real;
end HPF.Examples.Demo;

Generating code...
====== Model compiled successfully =======
make -f /home/linuxdev/jmodelica/Makefiles/MakeFile fmume20_
make[1]: Entering directory '/tmp/jmc10536875843175247085out'
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -O1 -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o HPF_Examples_Demo_funcs.o sources/HPF_Examples_Demo_funcs.c
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o HPF_Examples_Demo.o sources/HPF_Examples_Demo.c
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o HPF_Examples_Demo_equ_init.o sources/HPF_Examples_Demo_equ_init.c
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o HPF_Examples_Demo_equ.o sources/HPF_Examples_Demo_equ.c
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o HPF_Examples_Demo_base.o sources/HPF_Examples_Demo_base.c
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o HPF_Examples_Demo_init_dependent.o sources/HPF_Examples_Demo_init_dependent.c
gcc -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -I/home/linuxdev/jmodelica/include/RuntimeLibrary -I/home/linuxdev/jmodelica/ThirdParty/FMI/2.0  -I/home/linuxdev/jmodelica/ThirdParty/Sundials/include -c -o HPF_Examples_Demo_init_independent.o sources/HPF_Examples_Demo_init_independent.c
mkdir -p binaries/linux64
g++ -shared -Wl,-rpath,'$ORIGIN',--no-undefined -pthread -std=c89 -pedantic -fPIC -msse2 -mfpmath=sse -o binaries/linux64/HPF_Examples_Demo.so  HPF_Examples_Demo_funcs.o  HPF_Examples_Demo.o  HPF_Examples_Demo_equ_init.o  HPF_Examples_Demo_equ.o  HPF_Examples_Demo_base.o  HPF_Examples_Demo_init_dependent.o  HPF_Examples_Demo_init_independent.o  -L/home/linuxdev/jmodelica/lib/RuntimeLibrary -lfmi2 -ljmi -ldl "-L/home/linuxdev/jmodelica/lib" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library/linux64/gcc921-9ubuntu2" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library/linux64" -L"/home/linuxdev/jmodelica/ThirdParty/MSL/Modelica/Resources/Library" -lModelicaIO -lModelicaMatIO -lzlib -ljmi_get_set_default -lModelicaIO -lModelicaMatIO -lzlib -ljmi_get_set_default -llapack -lblas -lgfortran -lModelicaExternalC -lzlib -ljmi -L/home/linuxdev/jmodelica/ThirdParty/Sundials/lib -l:libsundials_kinsol.a -l:libsundials_nvecserial.a -L/home/linuxdev/jmodelica/ThirdParty/Minpack/lib -l:libcminpack.a -lstdc++ -lm -l:libsundials_cvode.a
/usr/bin/ld: /home/linuxdev/jmodelica/lib/RuntimeLibrary/libModelicaMatIO.a(ModelicaMatIO.c.o): in function `Mat_VarDelete':
/home/linuxdev/tmp/JModelica.org/ThirdParty/MSL/Modelica/Resources/C-Sources/ModelicaMatIO.c:8521: warning: the use of `mktemp' is dangerous, better use `mkstemp' or `mkdtemp'
rm -f  HPF_Examples_Demo_funcs.o  HPF_Examples_Demo.o  HPF_Examples_Demo_equ_init.o  HPF_Examples_Demo_equ.o  HPF_Examples_Demo_base.o  HPF_Examples_Demo_init_dependent.o  HPF_Examples_Demo_init_independent.o 
make[1]: Leaving directory '/tmp/jmc10536875843175247085out'

