From:	Frank, Stephen <Stephen.Frank@nrel.gov>
Sent:	Tuesday, July 30, 2019 3:13 PM
To:	Othee,Avpreet Singh
Cc:	Cale,Jim; Ball, Brian; Daniel Gerber
Subject:	Comments from HPF demo

Follow Up Flag:	Flag for follow up
Flag Status:	Flagged

Hi Avpreet,

Nice job on the presentation of HPF algorithm progress today. You’ve made good progress on the 
library. I do have some detailed comments, which I’ve organized (more-or-less) from near-term, engine-
related items to long-term, user experience-related items. We can discuss these later, but I wanted to 
get them out to you while fresh in my mind.

1.	Multiple time steps: as I mentioned, we will eventually need to run the simulation for multiple 
time steps with step changes of the loads between. Because there is no coupling between 
timesteps, this is basically solving a sequence of independent harmonic power flows, except that 
we don’t want to re-initialize the engine for each power flow solve. Loads and sources may 
change between time steps, either fed from a Modelica block or via an external interface (e.g. 
from EnergyPlus). Grid voltage (magnitude and/or angle) may also change. The architecture will 
need to accommodate this use case.
2.	Simulation initialization: A quick Google search yielded a lot of material on initializing Modelica 
simulations, although not being highly familiar with Modelica I couldn’t immediately identify 
what was and wasn’t relevant. I would think it should be possible to set starting complex 
voltages throughout the system, similar to the “flat start” approach used in regular power flow 
analysis. This should be sufficient for a Newton-type algorithm to converge, unless the system is 
very complex. I would hope this would avoid the need to change the system configuration at a 
specific point in time. (For any subsequent load changes, we would effectively be “hot starting” 
the algorithm from the previous load point, so that should work fine.) Brian and/or Daniel – 
please advise Avpreet if you have experience with initializing Modelica.
3.	Data from files: At some point, we’ll likely need a way to feed in time series data from files to 
run the simulation. Examples:
a.	Time series of grid voltage
b.	Time series of load power
4.	Parameter input: At some point, we should clean up parameter input to hide away anything 
that the user isn’t allowed to modify and make things a little more clear.
a.	Include units for all fields
b.	Indicate when things should be vectors vs. scalars
c.	Parameter checking (maybe on compile, with useful error messages?)
d.	More natural parameter fields, e.g. for a transformer use kVA rating, primary voltage, 
secondary voltage, % resistance, and % reactance (see also 5 below)
5.	Model types: Right now, you’ve been working with low-level models, which is great for the 
immediate milestone. Eventually, we should use those low-level models to create higher-level 
models for major system components.
a.	Previously, in my dissertation work, I defined a generic PI branch model (which included 
a turns ratio), and a generic ZIP load model. From there, I built out everything else. I was 
working in per-unit with balanced networks, though, so you may be need a few more 
building blocks. I think this is something we can brainstorm, or maybe Jim has ideas.
b.	For higher-level models, I think we want things like: 1-phase transformer, 3-phase 
transformer, 1-phase AC/DC converter (rectifier and/or inverter), 3-phase AC/DC 
converter (rectifier and/or inverter), DC/DC converter, constant power load (AC or DC) 
[represents electronics], constant current load (AC or DC) [represents LED lighting], 
induction motor load, resistive load, etc. We should probably work through these 
desired models as a team, and the desired parameters that would define each model. 
6.	Execution from Python and Post-Processing: Sounds like Daniel may have some good stuff for 
you to re-use here. I also think this part is less important than getting the engine working well 
and reliably and having the ability to extract the data for analysis in other software.
7.	Visualization: NREL has a program called DView (https://github.com/NREL/wex/wiki/DView) 
that provides a very nice interface for viewing time series data for annual simulations. Once we 
are able to run simulations with time series data for long periods of time (e.g. annual 
simulations), this may be a nice application to enable quick visualization. Brian also suggested 
bringing the data into Python or similar for use with Jupyter notebooks. I am not familiar with 
those, but it seems like a good approach for unlocking the data for additional analysis and for 
providing analysis examples. This goes hand-in-hand with #6, and in fact putting data in a 
Jupyter notebook might be a good way to show the ability to do post-processing before we’ve 
had time to dig into computing standard metrics.

Thanks again! You, Jim, and I should sit down after the microgrid symposium to think through some of 
these in more detail, and also to figure out what support you may need.

Steve

Stephen M. Frank, PhD (he/him/his)
Instrumentation & Controls Engineer
Planning, Management, Engineering, and Construction
National Renewable Energy Laboratory (NREL)
15013 Denver West Parkway, Golden, CO 80401
Office: 303-275-4249 | Mobile: 303-908-4050 | Stephen.Frank@nrel.gov

