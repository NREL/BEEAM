model Resistor
  parameter Modelica.SIunits.Resistance R_ref = 1 "Reference resistance at T_ref";
  parameter Modelica.SIunits.Temperature T_ref = 293.15 "Reference temperature";
  parameter Modelica.SIunits.LinearTemperatureCoefficient alpha_ref = 0 
    "Temperature coefficient of resistance (R_actual = R_ref*(1 + alpha_ref*(heatPort.T - T_ref))";
  constant Boolean useHeatPort = false "=true, if heatPort is enabled";
  parameter Modelica.SIunits.Temperature T = T_ref "Fixed device temperature if useHeatPort = false";

  Modelica.SIunits.Voltage v.re "Imaginary part of complex voltage";
  Modelica.SIunits.Voltage v.im "Real part of complex voltage";
  Modelica.SIunits.Voltage abs_v = Modelica.ComplexMath.'abs'(
    v) "Magnitude of complex voltage";
  Modelica.SIunits.Angle arg_v = Modelica.ComplexMath.arg(
    v, 
    0) "Argument of complex voltage";
  Modelica.SIunits.Current i.re "Real part of complex current";
  Modelica.SIunits.Current i.im "Imaginary part of complex current";
  Modelica.SIunits.Current abs_i = Modelica.ComplexMath.'abs'(
    i) "Magnitude of complex current";
  Modelica.SIunits.Angle arg_i = Modelica.ComplexMath.arg(
    i, 
    0) "Argument of complex current";
  Modelica.SIunits.ActivePower P = Modelica.ComplexMath.real(
    Complex.'*'.multiply(
      v, 
      Modelica.ComplexMath.conj(
        i))) "Active power";
  Modelica.SIunits.ReactivePower Q = Modelica.ComplexMath.imag(
    Complex.'*'.multiply(
      v, 
      Modelica.ComplexMath.conj(
        i))) "Reactive power";
  Modelica.SIunits.ApparentPower S = Modelica.ComplexMath.'abs'(
    Complex.'*'.multiply(
      v, 
      Modelica.ComplexMath.conj(
        i))) "Magnitude of complex apparent power";
  Real pf = cos(Modelica.ComplexMath.arg(
    Complex.'constructor'.fromReal(P, Q), 
    0)) "Power factor";
  Modelica.SIunits.AngularVelocity omega "Angular velocity of reference frame";
  Modelica.SIunits.ElectricPotential pin_p.v.re "Imaginary part of complex electric potential";
  Modelica.SIunits.ElectricPotential pin_p.v.im "Real part of complex electrical potential";
  Modelica.SIunits.Current pin_p.i.re "Real part of complex current";
  Modelica.SIunits.Current pin_p.i.im "Imaginary part of complex current";
  Modelica.SIunits.Angle pin_p.reference.gamma;
  Modelica.SIunits.ElectricPotential pin_n.v.re "Imaginary part of complex electric potential";
  Modelica.SIunits.ElectricPotential pin_n.v.im "Real part of complex electrical potential";
  Modelica.SIunits.Current pin_n.i.re "Real part of complex current";
  Modelica.SIunits.Current pin_n.i.im "Imaginary part of complex current";
  Modelica.SIunits.Angle pin_n.reference.gamma;
  Modelica.SIunits.Power LossPower "Loss power leaving component via heatPort";
  Modelica.SIunits.Temperature T_heatPort "Temperature of heatPort";
  Modelica.SIunits.Resistance R_actual "Resistance = R_ref*(1 + alpha_ref*(heatPort.T - T_ref))";

// Equations and algorithms

  // This model
  // class Modelica.Electrical.QuasiStationary.SinglePhase.Basic.Resistor
    // extends Modelica.Electrical.QuasiStationary.SinglePhase.Interfaces.TwoPin
    equation
      Connections.branch(pin_p.reference, pin_n.reference);
      pin_p.reference.gamma = pin_n.reference.gamma;
      omega = der(pin_p.reference.gamma);
      v = Complex.'-'.subtract(
        pin_p.v, 
        pin_n.v);
      i = pin_p.i;
    // extends Modelica.Electrical.QuasiStationary.SinglePhase.Interfaces.OnePort
    equation
      Complex.'+'(
        pin_p.i, 
        pin_n.i) = Complex.'constructor'.fromReal(0, 0);
    // extends Modelica.Electrical.Analog.Interfaces.ConditionalHeatPort
    equation
      if ( not useHeatPort) then 
        T_heatPort = T;
      end if;
    // end of extends 
  equation
    assert(1+alpha_ref*(T_heatPort-T_ref) >= 1E-15, "Temperature outside scope of model!");
    R_actual = R_ref*(1+alpha_ref*(T_heatPort-T_ref));
    v = Complex.'*'.multiply(
      Complex.'constructor'.fromReal(R_actual, 0), 
      i);
    LossPower = Modelica.ComplexMath.real(
      Complex.'*'.multiply(
        v, 
        Modelica.ComplexMath.conj(
          i)));

end Resistor;
