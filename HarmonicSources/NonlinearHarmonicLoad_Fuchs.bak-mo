within HPF.HarmonicSources;

model NonlinearHarmonicLoad_Fuchs
/*
  nonlinear harmonic load as defined in "Power Quality in Power Systems and Electrical Machines, Ch7"
*/
extends HPF.Interfaces.TwoPinBase;
import Modelica.ComplexMath.*;
  //Solver.SystemDef systemDef;
  //extends Solver.SystemDef_Ext;
  outer discrete Boolean modeSelect;
  parameter Complex p_h1(re(start=1),im(start=0)) "Complex Power at fundamental";
  parameter Complex v_h1(re(start=1),im(start=0)) "Nodal voltage across load at h=1";
  parameter Complex v_h3(re(start=1),im(start=0)) "Nodal voltage across load at h=3";
  parameter Complex i_h1(re(start=1),im(start=0)) "Current at h=1";
equation

  if modeSelect == true then   // power sink at fundamental
    p_h1 = v[1] .* Modelica.ComplexMath.conj(i[1]);
    v[2:3] .* Modelica.ComplexMath.conj(i[2:3]) = {Complex(0.0) for i in 1:2};

  elseif modeSelect == false then  // harmonic current source
    /* using v-i load characteristics from the book.
      The current injection is only defined at 5th harmonic
      
      Harmonics are defined (odd harmonic only), 
      index | harmonic number
      1     | 1
      2     | 3
      3     | 5
      [Note: This representation applies only to this implementation]
    */
    /* ISSUE: the example does not define harmonic injection currents at the fundamental harmonic
              In the example, the current at the fundamental is computed in the first step,
              power flow solution for the fundamental.
    */
    
    i[1].re = previous(i[1].re);
    i[1].im = previous(i[1].im);
    i[2] = Complex(0.0);  // settting to 0 will force i[2] to 0 at every iteration, setting i[2] = previous(i[2])??
    i[3].re = (0.3*'abs'(v[1])^3 * Modelica.Math.cos(3*arg(v[1]))) + (0.3*'abs'(v[3])^2 * Modelica.Math.cos(3*arg(v[3])));
    i[3].im = (0.3*'abs'(v[1])^3 * Modelica.Math.sin(3*arg(v[1]))) + (0.3*'abs'(v[3])^2 * Modelica.Math.sin(3*arg(v[3])));
  end if;
annotation(
    Icon(coordinateSystem(grid = {0, 0})),
    Diagram(coordinateSystem(extent = {{-200, -200}, {200, 200}}, grid = {0, 0})));
    
end NonlinearHarmonicLoad_Fuchs;
